{"version":3,"file":"59242a1a.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AA4CA;AACA;;;;;AA4BA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;;;;AAMA;AACA;;AAEA;AAEA;;AAEA;AAGA;;AAEA;;AAGA;;;;;;AAxDA;;;;;;;;;;;;;;AAAA;;ACAA;;;;AAMA;;AAIA;AACA;AAGA;AACA;AACA;;AAEA;;;AAOA;AAGA;AACA;;;AAKA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;;AAEA;AAGA;;;AApBA;AA0BA;AAGA;;AAhGA;;;;;;;;;;;;;;;;;;;;AAAA;;ACkEA;AACA;AACA;AACA;AACA;;;;;AAKA;;;;;AAKA;;;;;AAKA;;AAIA;;AAEA;AACA;;;AAIA;AACA;;;AAIA;;AAIA;;AAEA;AACA;;;AAIA;AACA;;;;;;AAOA;AACA;;;AAKA;;;;;;;;AAUA;AACA;AAGA;;;AAGA;;AAEA;;;;;;;AAOA;;AAIA;;AAIA;AAGA;;AAGA;;AAIA;AAEA;AACA;AAEA;;;AAIA;;;;;AAOA;;AAIA;AACA;AACA;;;;AAIA;AAGA;AACA;AACA;;;AAGA;AAEA;AAGA;AAGA;AACA;AACA;;;AAIA;AAGA;AAIA;;;AAMA;;;;AAOA;;;;;AAOA;AAGA;;AAEA;AAEA;AACA;;;;;AAQA;AAGA;;;AAKA;AACA;;AAEA;;AAGA;;;;;AAMA;;;AAIA;;;;AAMA;AACA;AAGA;;AAEA;;;AAKA;;;;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;;;AAGA;;;;AAMA;;;AAKA;;;;AAOA;;;;AAMA;AACA;AACA;;;AAGA;;AAGA;AAGA;;AAGA;;;;;AAKA;AACA;AAGA;;AAEA;;;;;;AASA;AACA;;;;AAIA;AACA;;;;AAMA;;;;AAKA;;AAIA;AACA;;;;;AA1WA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACeA;AACA;AAGA;;;AAKA;AAcA;;AAEA;AACA;;AAOA;AAUA;AAMA;;AAKA;AACA;AACA;;;AAOA;AAIA;;AAEA;;;;AAQA;AAIA;;AAEA;;;;AAQA;;AAMA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AAGA;;;;;AAKA;;AAEA;;;;;AAKA;AACA;AACA;;AAEA;;;;;AAKA;AACA;AACA;;AAIA;;;;;;;AAgDA;;;AAGA;;;;AAIA;;;;;;;AA3OA","sources":["webpack://home-assistant-frontend/./src/components/ha-icon-picker.ts","webpack://home-assistant-frontend/./src/panels/config/script/blueprint-script-editor.ts","webpack://home-assistant-frontend/./src/panels/config/script/ha-script-editor.ts","webpack://home-assistant-frontend/./src/panels/config/script/ha-script-picker.ts"],"sourcesContent":["import { mdiCheck, mdiMenuDown, mdiMenuUp } from \"@mdi/js\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport \"@vaadin/vaadin-combo-box/theme/material/vaadin-combo-box-light\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { ComboBoxLitRenderer, comboBoxRenderer } from \"lit-vaadin-helpers\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { customIcons } from \"../data/custom_icons\";\nimport { PolymerChangedEvent } from \"../polymer-types\";\nimport \"./ha-icon\";\nimport \"./ha-icon-button\";\n\ntype IconItem = {\n  icon: string;\n  keywords: string[];\n};\nlet iconItems: IconItem[] = [];\n\n// eslint-disable-next-line lit/prefer-static-styles\nconst rowRenderer: ComboBoxLitRenderer<IconItem> = (item) => html`<style>\n    paper-icon-item {\n      padding: 0;\n      margin: -8px;\n    }\n    #content {\n      display: flex;\n      align-items: center;\n    }\n    ha-svg-icon {\n      padding-left: 2px;\n      color: var(--secondary-text-color);\n    }\n    :host(:not([selected])) ha-svg-icon {\n      display: none;\n    }\n    :host([selected]) paper-icon-item {\n      margin-left: 0;\n    }\n  </style>\n\n  <ha-svg-icon .path=${mdiCheck}></ha-svg-icon>\n  <paper-icon-item>\n    <ha-icon .icon=${item.icon} slot=\"item-icon\"></ha-icon>\n    <paper-item-body>${item.icon}</paper-item-body>\n  </paper-icon-item>`;\n\n@customElement(\"ha-icon-picker\")\nexport class HaIconPicker extends LitElement {\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public placeholder?: string;\n\n  @property() public fallbackPath?: string;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public invalid = false;\n\n  @state() private _opened = false;\n\n  @query(\"vaadin-combo-box-light\", true) private comboBox!: HTMLElement;\n\n  protected render(): TemplateResult {\n    return html`\n      <vaadin-combo-box-light\n        item-value-path=\"icon\"\n        item-label-path=\"icon\"\n        .value=${this._value}\n        allow-custom-value\n        .filteredItems=${iconItems}\n        ${comboBoxRenderer(rowRenderer)}\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n        @filter-changed=${this._filterChanged}\n      >\n        <paper-input\n          .label=${this.label}\n          .placeholder=${this.placeholder}\n          .disabled=${this.disabled}\n          class=\"input\"\n          autocapitalize=\"none\"\n          autocomplete=\"off\"\n          autocorrect=\"off\"\n          spellcheck=\"false\"\n          .errorMessage=${this.errorMessage}\n          .invalid=${this.invalid}\n        >\n          ${this._value || this.placeholder\n            ? html`\n                <ha-icon .icon=${this._value || this.placeholder} slot=\"prefix\">\n                </ha-icon>\n              `\n            : this.fallbackPath\n            ? html`<ha-svg-icon\n                .path=${this.fallbackPath}\n                slot=\"prefix\"\n              ></ha-svg-icon>`\n            : \"\"}\n          <ha-icon-button\n            .path=${this._opened ? mdiMenuUp : mdiMenuDown}\n            slot=\"suffix\"\n            class=\"toggle-button\"\n          ></ha-icon-button>\n        </paper-input>\n      </vaadin-combo-box-light>\n    `;\n  }\n\n  private async _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n    if (this._opened && !iconItems.length) {\n      const iconList = await import(\"../../build/mdi/iconList.json\");\n\n      iconItems = iconList.default.map((icon) => ({\n        icon: `mdi:${icon.name}`,\n        keywords: icon.keywords,\n      }));\n\n      (this.comboBox as any).filteredItems = iconItems;\n\n      Object.keys(customIcons).forEach((iconSet) => {\n        this._loadCustomIconItems(iconSet);\n      });\n    }\n  }\n\n  private async _loadCustomIconItems(iconsetPrefix: string) {\n    try {\n      const getIconList = customIcons[iconsetPrefix].getIconList;\n      if (typeof getIconList !== \"function\") {\n        return;\n      }\n      const iconList = await getIconList();\n      const customIconItems = iconList.map((icon) => ({\n        icon: `${iconsetPrefix}:${icon.name}`,\n        keywords: icon.keywords ?? [],\n      }));\n      iconItems.push(...customIconItems);\n      (this.comboBox as any).filteredItems = iconItems;\n    } catch (e) {\n      // eslint-disable-next-line\n      console.warn(`Unable to load icon list for ${iconsetPrefix} iconset`);\n    }\n  }\n\n  private _valueChanged(ev: PolymerChangedEvent<string>) {\n    this._setValue(ev.detail.value);\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    fireEvent(\n      this,\n      \"value-changed\",\n      { value },\n      {\n        bubbles: false,\n        composed: false,\n      }\n    );\n  }\n\n  private _filterChanged(ev: CustomEvent): void {\n    const filterString = ev.detail.value.toLowerCase();\n    const characterCount = filterString.length;\n    if (characterCount >= 2) {\n      const filteredItems: IconItem[] = [];\n      const filteredItemsByKeywords: IconItem[] = [];\n\n      iconItems.forEach((item) => {\n        if (item.icon.includes(filterString)) {\n          filteredItems.push(item);\n          return;\n        }\n        if (item.keywords.some((t) => t.includes(filterString))) {\n          filteredItemsByKeywords.push(item);\n        }\n      });\n\n      filteredItems.push(...filteredItemsByKeywords);\n\n      if (filteredItems.length > 0) {\n        (this.comboBox as any).filteredItems = filteredItems;\n      } else {\n        (this.comboBox as any).filteredItems = [\n          { icon: filterString, keywords: [] },\n        ];\n      }\n    } else {\n      (this.comboBox as any).filteredItems = iconItems;\n    }\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  static get styles() {\n    return css`\n      ha-icon,\n      ha-svg-icon {\n        position: relative;\n        bottom: 2px;\n      }\n      *[slot=\"prefix\"] {\n        margin-right: 8px;\n      }\n      paper-input > ha-icon-button {\n        --mdc-icon-button-size: 24px;\n        padding: 2px;\n        color: var(--secondary-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-picker\": HaIconPicker;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/ha-blueprint-picker\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-circular-progress\";\nimport \"../../../components/ha-markdown\";\nimport \"../../../components/ha-selector/ha-selector\";\nimport \"../../../components/ha-settings-row\";\n\nimport {\n  BlueprintOrError,\n  Blueprints,\n  fetchBlueprints,\n} from \"../../../data/blueprint\";\nimport { BlueprintScriptConfig } from \"../../../data/script\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport \"../ha-config-section\";\n\n@customElement(\"blueprint-script-editor\")\nexport class HaBlueprintScriptEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public isWide!: boolean;\n\n  @property({ reflect: true, type: Boolean }) public narrow!: boolean;\n\n  @property({ attribute: false }) public config!: BlueprintScriptConfig;\n\n  @state() private _blueprints?: Blueprints;\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    this._getBlueprints();\n  }\n\n  private get _blueprint(): BlueprintOrError | undefined {\n    if (!this._blueprints) {\n      return undefined;\n    }\n    return this._blueprints[this.config.use_blueprint.path];\n  }\n\n  protected render() {\n    const blueprint = this._blueprint;\n    return html` <ha-config-section vertical .isWide=${this.isWide}>\n      <span slot=\"header\"\n        >${this.hass.localize(\n          \"ui.panel.config.automation.editor.blueprint.header\"\n        )}</span\n      >\n      <ha-card>\n        <div class=\"blueprint-picker-container\">\n          ${this._blueprints\n            ? Object.keys(this._blueprints).length\n              ? html`\n                  <ha-blueprint-picker\n                    .hass=${this.hass}\n                    .label=${this.hass.localize(\n                      \"ui.panel.config.automation.editor.blueprint.blueprint_to_use\"\n                    )}\n                    .blueprints=${this._blueprints}\n                    .value=${this.config.use_blueprint.path}\n                    @value-changed=${this._blueprintChanged}\n                  ></ha-blueprint-picker>\n                `\n              : this.hass.localize(\n                  \"ui.panel.config.automation.editor.blueprint.no_blueprints\"\n                )\n            : html`<ha-circular-progress active></ha-circular-progress>`}\n        </div>\n\n        ${this.config.use_blueprint.path\n          ? blueprint && \"error\" in blueprint\n            ? html`<p class=\"warning padding\">\n                There is an error in this Blueprint: ${blueprint.error}\n              </p>`\n            : html`${blueprint?.metadata.description\n                ? html`<ha-markdown\n                    class=\"card-content\"\n                    breaks\n                    .content=${blueprint.metadata.description}\n                  ></ha-markdown>`\n                : \"\"}\n              ${blueprint?.metadata?.input &&\n              Object.keys(blueprint.metadata.input).length\n                ? Object.entries(blueprint.metadata.input).map(\n                    ([key, value]) =>\n                      html`<ha-settings-row .narrow=${this.narrow}>\n                        <span slot=\"heading\">${value?.name || key}</span>\n                        <span slot=\"description\">${value?.description}</span>\n                        ${value?.selector\n                          ? html`<ha-selector\n                              .hass=${this.hass}\n                              .selector=${value.selector}\n                              .key=${key}\n                              .value=${(this.config.use_blueprint.input &&\n                                this.config.use_blueprint.input[key]) ??\n                              value?.default}\n                              @value-changed=${this._inputChanged}\n                            ></ha-selector>`\n                          : html`<paper-input\n                              .key=${key}\n                              required\n                              .value=${(this.config.use_blueprint.input &&\n                                this.config.use_blueprint.input[key]) ??\n                              value?.default}\n                              @value-changed=${this._inputChanged}\n                              no-label-float\n                            ></paper-input>`}\n                      </ha-settings-row>`\n                  )\n                : html`<p class=\"padding\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.automation.editor.blueprint.no_inputs\"\n                    )}\n                  </p>`}`\n          : \"\"}\n      </ha-card>\n    </ha-config-section>`;\n  }\n\n  private async _getBlueprints() {\n    this._blueprints = await fetchBlueprints(this.hass, \"script\");\n  }\n\n  private _blueprintChanged(ev) {\n    ev.stopPropagation();\n    if (this.config.use_blueprint.path === ev.detail.value) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.config,\n        use_blueprint: {\n          path: ev.detail.value,\n        },\n      },\n    });\n  }\n\n  private _inputChanged(ev) {\n    ev.stopPropagation();\n    const target = ev.target as any;\n    const key = target.key;\n    const value = ev.detail.value;\n    if (\n      (this.config.use_blueprint.input &&\n        this.config.use_blueprint.input[key] === value) ||\n      (!this.config.use_blueprint.input && value === \"\")\n    ) {\n      return;\n    }\n    const input = { ...this.config.use_blueprint.input, [key]: value };\n\n    if (value === \"\" || value === undefined) {\n      delete input[key];\n    }\n\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.config,\n        use_blueprint: {\n          ...this.config.use_blueprint,\n          input,\n        },\n      },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .padding {\n          padding: 16px;\n        }\n        .blueprint-picker-container {\n          padding: 16px;\n        }\n        p {\n          margin-bottom: 0;\n        }\n        ha-settings-row {\n          --paper-time-input-justify-content: flex-end;\n          border-top: 1px solid var(--divider-color);\n        }\n        :host(:not([narrow])) ha-settings-row paper-input {\n          width: 60%;\n        }\n        :host(:not([narrow])) ha-settings-row ha-selector {\n          width: 60%;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"blueprint-script-editor\": HaBlueprintScriptEditor;\n  }\n}\n","import { ActionDetail } from \"@material/mwc-list/mwc-list-foundation\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport {\n  mdiCheck,\n  mdiContentDuplicate,\n  mdiContentSave,\n  mdiDelete,\n  mdiDotsVertical,\n} from \"@mdi/js\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport \"@polymer/paper-dropdown-menu/paper-dropdown-menu-light\";\nimport { PaperListboxElement } from \"@polymer/paper-listbox\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { property, state, query } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { computeObjectId } from \"../../../common/entity/compute_object_id\";\nimport { navigate } from \"../../../common/navigate\";\nimport { slugify } from \"../../../common/string/slugify\";\nimport { computeRTL } from \"../../../common/util/compute_rtl\";\nimport { copyToClipboard } from \"../../../common/util/copy-clipboard\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-icon-picker\";\nimport \"../../../components/ha-svg-icon\";\nimport \"../../../components/ha-yaml-editor\";\nimport type { HaYamlEditor } from \"../../../components/ha-yaml-editor\";\nimport {\n  Action,\n  deleteScript,\n  getScriptEditorInitData,\n  ManualScriptConfig,\n  MODES,\n  MODES_MAX,\n  ScriptConfig,\n  showScriptEditor,\n  triggerScript,\n} from \"../../../data/script\";\nimport { showConfirmationDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/ha-app-layout\";\nimport { KeyboardShortcutMixin } from \"../../../mixins/keyboard-shortcut-mixin\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport { showToast } from \"../../../util/toast\";\nimport \"../automation/action/ha-automation-action\";\nimport { HaDeviceAction } from \"../automation/action/types/ha-automation-action-device_id\";\nimport \"../ha-config-section\";\nimport { configSections } from \"../ha-panel-config\";\nimport \"./blueprint-script-editor\";\n\nexport class HaScriptEditor extends KeyboardShortcutMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public scriptEntityId: string | null = null;\n\n  @property() public route!: Route;\n\n  @property() public isWide?: boolean;\n\n  @property() public narrow!: boolean;\n\n  @state() private _config?: ScriptConfig;\n\n  @state() private _entityId?: string;\n\n  @state() private _idError = false;\n\n  @state() private _dirty = false;\n\n  @state() private _errors?: string;\n\n  @state() private _mode: \"gui\" | \"yaml\" = \"gui\";\n\n  @query(\"ha-yaml-editor\", true) private _editor?: HaYamlEditor;\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        .backCallback=${this._backTapped}\n        .tabs=${configSections.automations}\n      >\n        <ha-button-menu\n          corner=\"BOTTOM_START\"\n          slot=\"toolbar-icon\"\n          @action=${this._handleMenuAction}\n          activatable\n        >\n          <ha-icon-button\n            slot=\"trigger\"\n            .label=${this.hass.localize(\"ui.common.menu\")}\n            .path=${mdiDotsVertical}\n          ></ha-icon-button>\n\n          <mwc-list-item\n            aria-label=${this.hass.localize(\n              \"ui.panel.config.automation.editor.edit_ui\"\n            )}\n            graphic=\"icon\"\n            ?activated=${this._mode === \"gui\"}\n          >\n            ${this.hass.localize(\"ui.panel.config.automation.editor.edit_ui\")}\n            ${this._mode === \"gui\"\n              ? html` <ha-svg-icon\n                  class=\"selected_menu_item\"\n                  slot=\"graphic\"\n                  .path=${mdiCheck}\n                ></ha-svg-icon>`\n              : ``}\n          </mwc-list-item>\n          <mwc-list-item\n            aria-label=${this.hass.localize(\n              \"ui.panel.config.automation.editor.edit_yaml\"\n            )}\n            graphic=\"icon\"\n            ?activated=${this._mode === \"yaml\"}\n          >\n            ${this.hass.localize(\"ui.panel.config.automation.editor.edit_yaml\")}\n            ${this._mode === \"yaml\"\n              ? html` <ha-svg-icon\n                  class=\"selected_menu_item\"\n                  slot=\"graphic\"\n                  .path=${mdiCheck}\n                ></ha-svg-icon>`\n              : ``}\n          </mwc-list-item>\n\n          <li divider role=\"separator\"></li>\n\n          <mwc-list-item\n            .disabled=${!this.scriptEntityId}\n            .label=${this.hass.localize(\n              \"ui.panel.config.script.picker.duplicate_script\"\n            )}\n            graphic=\"icon\"\n          >\n            ${this.hass.localize(\n              \"ui.panel.config.script.picker.duplicate_script\"\n            )}\n            <ha-svg-icon\n              slot=\"graphic\"\n              .path=${mdiContentDuplicate}\n            ></ha-svg-icon>\n          </mwc-list-item>\n\n          <mwc-list-item\n            .disabled=${!this.scriptEntityId}\n            aria-label=${this.hass.localize(\n              \"ui.panel.config.script.editor.delete_script\"\n            )}\n            class=${classMap({ warning: Boolean(this.scriptEntityId) })}\n            graphic=\"icon\"\n          >\n            ${this.hass.localize(\"ui.panel.config.script.editor.delete_script\")}\n            <ha-svg-icon\n              class=${classMap({ warning: Boolean(this.scriptEntityId) })}\n              slot=\"graphic\"\n              .path=${mdiDelete}\n            >\n            </ha-svg-icon>\n          </mwc-list-item>\n        </ha-button-menu>\n        ${this.narrow\n          ? html` <span slot=\"header\">${this._config?.alias}</span> `\n          : \"\"}\n        <div\n          class=\"content ${classMap({\n            \"yaml-mode\": this._mode === \"yaml\",\n          })}\"\n        >\n          ${this._errors\n            ? html` <div class=\"errors\">${this._errors}</div> `\n            : \"\"}\n          ${this._mode === \"gui\"\n            ? html`\n                <div\n                  class=${classMap({\n                    rtl: computeRTL(this.hass),\n                  })}\n                >\n                  ${this._config\n                    ? html`\n                        <ha-config-section vertical .isWide=${this.isWide}>\n                          ${!this.narrow\n                            ? html`\n                                <span slot=\"header\">${this._config.alias}</span>\n                              `\n                            : \"\"}\n                          <span slot=\"introduction\">\n                            ${this.hass.localize(\n                              \"ui.panel.config.script.editor.introduction\"\n                            )}\n                          </span>\n                          <ha-card>\n                            <div class=\"card-content\">\n                              <paper-input\n                                .label=${this.hass.localize(\n                                  \"ui.panel.config.script.editor.alias\"\n                                )}\n                                name=\"alias\"\n                                .value=${this._config.alias}\n                                @value-changed=${this._valueChanged}\n                                @change=${this._aliasChanged}\n                              >\n                              </paper-input>\n                              <ha-icon-picker\n                                .label=${this.hass.localize(\n                                  \"ui.panel.config.script.editor.icon\"\n                                )}\n                                .name=${\"icon\"}\n                                .value=${this._config.icon}\n                                @value-changed=${this._valueChanged}\n                              >\n                              </ha-icon-picker>\n                              ${!this.scriptEntityId\n                                ? html`<paper-input\n                                    .label=${this.hass.localize(\n                                      \"ui.panel.config.script.editor.id\"\n                                    )}\n                                    .errorMessage=${this.hass.localize(\n                                      \"ui.panel.config.script.editor.id_already_exists\"\n                                    )}\n                                    .invalid=${this._idError}\n                                    .value=${this._entityId}\n                                    @value-changed=${this._idChanged}\n                                  >\n                                  </paper-input>`\n                                : \"\"}\n                              ${\"use_blueprint\" in this._config\n                                ? \"\"\n                                : html`<p>\n                                      ${this.hass.localize(\n                                        \"ui.panel.config.script.editor.modes.description\",\n                                        \"documentation_link\",\n                                        html`<a\n                                          href=${documentationUrl(\n                                            this.hass,\n                                            \"/integrations/script/#script-modes\"\n                                          )}\n                                          target=\"_blank\"\n                                          rel=\"noreferrer\"\n                                          >${this.hass.localize(\n                                            \"ui.panel.config.script.editor.modes.documentation\"\n                                          )}</a\n                                        >`\n                                      )}\n                                    </p>\n                                    <paper-dropdown-menu-light\n                                      .label=${this.hass.localize(\n                                        \"ui.panel.config.script.editor.modes.label\"\n                                      )}\n                                      no-animations\n                                    >\n                                      <paper-listbox\n                                        slot=\"dropdown-content\"\n                                        .selected=${this._config.mode\n                                          ? MODES.indexOf(this._config.mode)\n                                          : 0}\n                                        @iron-select=${this._modeChanged}\n                                      >\n                                        ${MODES.map(\n                                          (mode) => html`\n                                            <paper-item .mode=${mode}>\n                                              ${this.hass.localize(\n                                                `ui.panel.config.script.editor.modes.${mode}`\n                                              ) || mode}\n                                            </paper-item>\n                                          `\n                                        )}\n                                      </paper-listbox>\n                                    </paper-dropdown-menu-light>\n                                    ${this._config.mode &&\n                                    MODES_MAX.includes(this._config.mode)\n                                      ? html`<paper-input\n                                          .label=${this.hass.localize(\n                                            `ui.panel.config.script.editor.max.${this._config.mode}`\n                                          )}\n                                          type=\"number\"\n                                          name=\"max\"\n                                          .value=${this._config.max || \"10\"}\n                                          @value-changed=${this._valueChanged}\n                                        >\n                                        </paper-input>`\n                                      : html``} `}\n                            </div>\n                            ${this.scriptEntityId\n                              ? html`\n                                  <div\n                                    class=\"card-actions layout horizontal justified center\"\n                                  >\n                                    <a\n                                      href=\"/config/script/trace/${this\n                                        .scriptEntityId}\"\n                                    >\n                                      <mwc-button>\n                                        ${this.hass.localize(\n                                          \"ui.panel.config.script.editor.show_trace\"\n                                        )}\n                                      </mwc-button>\n                                    </a>\n                                    <mwc-button\n                                      @click=${this._runScript}\n                                      title=${this.hass.localize(\n                                        \"ui.panel.config.script.picker.run_script\"\n                                      )}\n                                      ?disabled=${this._dirty}\n                                    >\n                                      ${this.hass.localize(\n                                        \"ui.panel.config.script.picker.run_script\"\n                                      )}\n                                    </mwc-button>\n                                  </div>\n                                `\n                              : ``}\n                          </ha-card>\n                        </ha-config-section>\n\n                        ${\"use_blueprint\" in this._config\n                          ? html`<blueprint-script-editor\n                              .hass=${this.hass}\n                              .narrow=${this.narrow}\n                              .isWide=${this.isWide}\n                              .config=${this._config}\n                              @value-changed=${this._configChanged}\n                            ></blueprint-script-editor>`\n                          : html`<ha-config-section\n                              vertical\n                              .isWide=${this.isWide}\n                            >\n                              <span slot=\"header\">\n                                ${this.hass.localize(\n                                  \"ui.panel.config.script.editor.sequence\"\n                                )}\n                              </span>\n                              <span slot=\"introduction\">\n                                <p>\n                                  ${this.hass.localize(\n                                    \"ui.panel.config.script.editor.sequence_sentence\"\n                                  )}\n                                </p>\n                                <a\n                                  href=${documentationUrl(\n                                    this.hass,\n                                    \"/docs/scripts/\"\n                                  )}\n                                  target=\"_blank\"\n                                  rel=\"noreferrer\"\n                                >\n                                  ${this.hass.localize(\n                                    \"ui.panel.config.script.editor.link_available_actions\"\n                                  )}\n                                </a>\n                              </span>\n                              <ha-automation-action\n                                .actions=${this._config.sequence}\n                                @value-changed=${this._sequenceChanged}\n                                .hass=${this.hass}\n                              ></ha-automation-action>\n                            </ha-config-section>`}\n                      `\n                    : \"\"}\n                </div>\n              `\n            : this._mode === \"yaml\"\n            ? html`\n                ${!this.narrow\n                  ? html`\n                      <ha-card\n                        ><div class=\"card-header\">${this._config?.alias}</div>\n                        <div\n                          class=\"card-actions layout horizontal justified center\"\n                        >\n                          <mwc-button\n                            @click=${this._runScript}\n                            title=${this.hass.localize(\n                              \"ui.panel.config.script.picker.run_script\"\n                            )}\n                            ?disabled=${this._dirty}\n                          >\n                            ${this.hass.localize(\n                              \"ui.panel.config.script.picker.run_script\"\n                            )}\n                          </mwc-button>\n                        </div>\n                      </ha-card>\n                    `\n                  : ``}\n                <ha-yaml-editor\n                  .defaultValue=${this._preprocessYaml()}\n                  @value-changed=${this._yamlChanged}\n                ></ha-yaml-editor>\n                <ha-card\n                  ><div class=\"card-actions\">\n                    <mwc-button @click=${this._copyYaml}>\n                      ${this.hass.localize(\n                        \"ui.panel.config.automation.editor.copy_to_clipboard\"\n                      )}\n                    </mwc-button>\n                  </div>\n                </ha-card>\n              `\n            : ``}\n        </div>\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.script.editor.save_script\"\n          )}\n          extended\n          @click=${this._saveScript}\n          class=${classMap({\n            dirty: this._dirty,\n          })}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiContentSave}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n\n    const oldScript = changedProps.get(\"scriptEntityId\");\n    if (\n      changedProps.has(\"scriptEntityId\") &&\n      this.scriptEntityId &&\n      this.hass &&\n      // Only refresh config if we picked a new script. If same ID, don't fetch it.\n      (!oldScript || oldScript !== this.scriptEntityId)\n    ) {\n      this.hass\n        .callApi<ManualScriptConfig>(\n          \"GET\",\n          `config/script/config/${computeObjectId(this.scriptEntityId)}`\n        )\n        .then(\n          (config) => {\n            // Normalize data: ensure sequence is a list\n            // Happens when people copy paste their scripts into the config\n            const value = config.sequence;\n            if (value && !Array.isArray(value)) {\n              config.sequence = [value];\n            }\n            this._dirty = false;\n            this._config = config;\n          },\n          (resp) => {\n            alert(\n              resp.status_code === 404\n                ? this.hass.localize(\n                    \"ui.panel.config.script.editor.load_error_not_editable\"\n                  )\n                : this.hass.localize(\n                    \"ui.panel.config.script.editor.load_error_unknown\",\n                    \"err_no\",\n                    resp.status_code\n                  )\n            );\n            history.back();\n          }\n        );\n    }\n\n    if (\n      changedProps.has(\"scriptEntityId\") &&\n      !this.scriptEntityId &&\n      this.hass\n    ) {\n      const initData = getScriptEditorInitData();\n      this._dirty = !!initData;\n      const baseConfig: Partial<ScriptConfig> = {\n        alias: this.hass.localize(\"ui.panel.config.script.editor.default_name\"),\n      };\n      if (!initData || !(\"use_blueprint\" in initData)) {\n        baseConfig.sequence = [{ ...HaDeviceAction.defaultConfig }];\n      }\n      this._config = {\n        ...baseConfig,\n        ...initData,\n      } as ScriptConfig;\n    }\n  }\n\n  private async _runScript(ev) {\n    ev.stopPropagation();\n    await triggerScript(this.hass, this.scriptEntityId as string);\n    showToast(this, {\n      message: this.hass.localize(\n        \"ui.notification_toast.triggered\",\n        \"name\",\n        this._config!.alias\n      ),\n    });\n  }\n\n  private _modeChanged(ev: CustomEvent) {\n    const mode = ((ev.target as PaperListboxElement)?.selectedItem as any)\n      ?.mode;\n\n    if (mode === this._config!.mode) {\n      return;\n    }\n\n    this._config = { ...this._config!, mode };\n    if (!MODES_MAX.includes(mode)) {\n      delete this._config.max;\n    }\n    this._dirty = true;\n  }\n\n  private _aliasChanged(ev: CustomEvent) {\n    if (this.scriptEntityId || this._entityId) {\n      return;\n    }\n    const aliasSlugify = slugify((ev.target as any).value);\n    let id = aliasSlugify;\n    let i = 2;\n    while (this.hass.states[`script.${id}`]) {\n      id = `${aliasSlugify}_${i}`;\n      i++;\n    }\n    this._entityId = id;\n  }\n\n  private _idChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    this._entityId = (ev.target as any).value;\n    if (this.hass.states[`script.${this._entityId}`]) {\n      this._idError = true;\n    } else {\n      this._idError = false;\n    }\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const target = ev.target as any;\n    const name = target.name;\n    if (!name) {\n      return;\n    }\n    let newVal = ev.detail.value;\n    if (target.type === \"number\") {\n      newVal = Number(newVal);\n    }\n    if ((this._config![name] || \"\") === newVal) {\n      return;\n    }\n    if (!newVal) {\n      delete this._config![name];\n      this._config = { ...this._config! };\n    } else {\n      this._config = { ...this._config!, [name]: newVal };\n    }\n    this._dirty = true;\n  }\n\n  private _configChanged(ev) {\n    this._config = ev.detail.value;\n    this._dirty = true;\n  }\n\n  private _sequenceChanged(ev: CustomEvent): void {\n    this._config = { ...this._config!, sequence: ev.detail.value as Action[] };\n    this._errors = undefined;\n    this._dirty = true;\n  }\n\n  private _preprocessYaml() {\n    return this._config;\n  }\n\n  private async _copyYaml(): Promise<void> {\n    if (this._editor?.yaml) {\n      await copyToClipboard(this._editor.yaml);\n      showToast(this, {\n        message: this.hass.localize(\"ui.common.copied_clipboard\"),\n      });\n    }\n  }\n\n  private _yamlChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    if (!ev.detail.isValid) {\n      return;\n    }\n    this._config = ev.detail.value;\n    this._errors = undefined;\n    this._dirty = true;\n  }\n\n  private _backTapped = (): void => {\n    if (this._dirty) {\n      showConfirmationDialog(this, {\n        text: this.hass!.localize(\n          \"ui.panel.config.common.editor.confirm_unsaved\"\n        ),\n        confirmText: this.hass!.localize(\"ui.common.leave\"),\n        dismissText: this.hass!.localize(\"ui.common.stay\"),\n        confirm: () => {\n          setTimeout(() => history.back());\n        },\n      });\n    } else {\n      history.back();\n    }\n  };\n\n  private async _duplicate() {\n    if (this._dirty) {\n      if (\n        !(await showConfirmationDialog(this, {\n          text: this.hass!.localize(\n            \"ui.panel.config.common.editor.confirm_unsaved\"\n          ),\n          confirmText: this.hass!.localize(\"ui.common.yes\"),\n          dismissText: this.hass!.localize(\"ui.common.no\"),\n        }))\n      ) {\n        return;\n      }\n      // Wait for dialog to complete closing\n      await new Promise((resolve) => setTimeout(resolve, 0));\n    }\n    showScriptEditor({\n      ...this._config,\n      alias: `${this._config?.alias} (${this.hass.localize(\n        \"ui.panel.config.script.picker.duplicate\"\n      )})`,\n    });\n  }\n\n  private async _deleteConfirm() {\n    showConfirmationDialog(this, {\n      text: this.hass.localize(\"ui.panel.config.script.editor.delete_confirm\"),\n      confirmText: this.hass!.localize(\"ui.common.delete\"),\n      dismissText: this.hass!.localize(\"ui.common.cancel\"),\n      confirm: () => this._delete(),\n    });\n  }\n\n  private async _delete() {\n    await deleteScript(\n      this.hass,\n      computeObjectId(this.scriptEntityId as string)\n    );\n    history.back();\n  }\n\n  private async _handleMenuAction(ev: CustomEvent<ActionDetail>) {\n    switch (ev.detail.index) {\n      case 0:\n        this._mode = \"gui\";\n        break;\n      case 1:\n        this._mode = \"yaml\";\n        break;\n      case 2:\n        this._duplicate();\n        break;\n      case 3:\n        this._deleteConfirm();\n        break;\n    }\n  }\n\n  private _saveScript(): void {\n    if (this._idError) {\n      showToast(this, {\n        message: this.hass.localize(\n          \"ui.panel.config.script.editor.id_already_exists_save_error\"\n        ),\n        dismissable: false,\n        duration: 0,\n        action: {\n          action: () => {},\n          text: this.hass.localize(\"ui.dialogs.generic.ok\"),\n        },\n      });\n      return;\n    }\n    const id = this.scriptEntityId\n      ? computeObjectId(this.scriptEntityId)\n      : this._entityId || Date.now();\n    this.hass!.callApi(\"POST\", \"config/script/config/\" + id, this._config).then(\n      () => {\n        this._dirty = false;\n\n        if (!this.scriptEntityId) {\n          navigate(`/config/script/edit/${id}`, { replace: true });\n        }\n      },\n      (errors) => {\n        this._errors = errors.body.message || errors.error || errors.body;\n        showToast(this, {\n          message: errors.body.message || errors.error || errors.body,\n        });\n        throw errors;\n      }\n    );\n  }\n\n  protected handleKeyboardSave() {\n    this._saveScript();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-card {\n          overflow: hidden;\n        }\n        p {\n          margin-bottom: 0;\n        }\n        .errors {\n          padding: 20px;\n          font-weight: bold;\n          color: var(--error-color);\n        }\n        .content {\n          padding-bottom: 20px;\n        }\n        .yaml-mode {\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n          padding-bottom: 0;\n        }\n        ha-yaml-editor {\n          flex-grow: 1;\n          --code-mirror-height: 100%;\n          min-height: 0;\n        }\n        .yaml-mode ha-card {\n          overflow: initial;\n          --ha-card-border-radius: 0;\n          border-bottom: 1px solid var(--divider-color);\n        }\n        span[slot=\"introduction\"] a {\n          color: var(--primary-color);\n        }\n        ha-fab {\n          position: relative;\n          bottom: calc(-80px - env(safe-area-inset-bottom));\n          transition: bottom 0.3s;\n        }\n        ha-fab.dirty {\n          bottom: 0;\n        }\n        .selected_menu_item {\n          color: var(--primary-color);\n        }\n        li[role=\"separator\"] {\n          border-bottom-color: var(--divider-color);\n        }\n      `,\n    ];\n  }\n}\n\ncustomElements.define(\"ha-script-editor\", HaScriptEditor);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-script-editor\": HaScriptEditor;\n  }\n}\n","import {\n  mdiHelpCircle,\n  mdiHistory,\n  mdiInformationOutline,\n  mdiPencil,\n  mdiPlay,\n  mdiPlus,\n} from \"@mdi/js\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { formatDateTime } from \"../../../common/datetime/format_date_time\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { computeRTL } from \"../../../common/util/compute_rtl\";\nimport { DataTableColumnContainer } from \"../../../components/data-table/ha-data-table\";\nimport \"../../../components/ha-button-related-filter-menu\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-svg-icon\";\nimport { triggerScript } from \"../../../data/script\";\nimport { showAlertDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-tabs-subpage-data-table\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport { showToast } from \"../../../util/toast\";\nimport { configSections } from \"../ha-panel-config\";\n\n@customElement(\"ha-script-picker\")\nclass HaScriptPicker extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public scripts!: HassEntity[];\n\n  @property() public isWide!: boolean;\n\n  @property() public narrow!: boolean;\n\n  @property() public route!: Route;\n\n  @property() private _activeFilters?: string[];\n\n  @state() private _filteredScripts?: string[] | null;\n\n  @state() private _filterValue?;\n\n  private _scripts = memoizeOne(\n    (scripts: HassEntity[], filteredScripts?: string[] | null) => {\n      if (filteredScripts === null) {\n        return [];\n      }\n      return (\n        filteredScripts\n          ? scripts.filter((script) =>\n              filteredScripts!.includes(script.entity_id)\n            )\n          : scripts\n      ).map((script) => ({\n        ...script,\n        name: computeStateName(script),\n        last_triggered: script.attributes.last_triggered || undefined,\n      }));\n    }\n  );\n\n  private _columns = memoizeOne((narrow, _locale): DataTableColumnContainer => {\n    const columns: DataTableColumnContainer = {\n      activate: {\n        title: \"\",\n        type: \"icon-button\",\n        template: (_toggle, script) =>\n          html`\n            <ha-icon-button\n              .script=${script}\n              .label=${this.hass.localize(\n                \"ui.panel.config.script.picker.run_script\"\n              )}\n              @click=${this._runScript}\n              .path=${mdiPlay}\n            ></ha-icon-button>\n          `,\n      },\n      icon: {\n        title: \"\",\n        type: \"icon\",\n        template: (_icon, script) =>\n          html` <ha-state-icon .state=${script}></ha-state-icon>`,\n      },\n      name: {\n        title: this.hass.localize(\"ui.panel.config.script.picker.headers.name\"),\n        sortable: true,\n        filterable: true,\n        direction: \"asc\",\n        grows: true,\n        template: narrow\n          ? (name, script: any) => html`\n              ${name}\n              <div class=\"secondary\">\n                ${this.hass.localize(\"ui.card.automation.last_triggered\")}:\n                ${script.attributes.last_triggered\n                  ? formatDateTime(\n                      new Date(script.attributes.last_triggered),\n                      this.hass.locale\n                    )\n                  : this.hass.localize(\"ui.components.relative_time.never\")}\n              </div>\n            `\n          : undefined,\n      },\n    };\n    if (!narrow) {\n      columns.last_triggered = {\n        sortable: true,\n        width: \"20%\",\n        title: this.hass.localize(\"ui.card.automation.last_triggered\"),\n        template: (last_triggered) => html`\n          ${last_triggered\n            ? formatDateTime(new Date(last_triggered), this.hass.locale)\n            : this.hass.localize(\"ui.components.relative_time.never\")}\n        `,\n      };\n    }\n    columns.info = {\n      title: \"\",\n      type: \"icon-button\",\n      template: (_info, script) => html`\n        <ha-icon-button\n          .script=${script}\n          @click=${this._showInfo}\n          .label=${this.hass.localize(\n            \"ui.panel.config.script.picker.show_info\"\n          )}\n          .path=${mdiInformationOutline}\n        ></ha-icon-button>\n      `,\n    };\n    columns.trace = {\n      title: \"\",\n      type: \"icon-button\",\n      template: (_info, script: any) => html`\n        <a href=\"/config/script/trace/${script.entity_id}\">\n          <ha-icon-button\n            .label=${this.hass.localize(\n              \"ui.panel.config.script.picker.dev_script\"\n            )}\n            .path=${mdiHistory}\n          ></ha-icon-button>\n        </a>\n      `,\n    };\n    columns.edit = {\n      title: \"\",\n      type: \"icon-button\",\n      template: (_info, script: any) => html`\n        <a href=\"/config/script/edit/${script.entity_id}\">\n          <ha-icon-button\n            .label=${this.hass.localize(\n              \"ui.panel.config.script.picker.edit_script\"\n            )}\n            .path=${mdiPencil}\n          ></ha-icon-button>\n        </a>\n      `,\n    };\n    return columns;\n  });\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        back-path=\"/config\"\n        .route=${this.route}\n        .tabs=${configSections.automations}\n        .columns=${this._columns(this.narrow, this.hass.locale)}\n        .data=${this._scripts(this.scripts, this._filteredScripts)}\n        .activeFilters=${this._activeFilters}\n        id=\"entity_id\"\n        .noDataText=${this.hass.localize(\n          \"ui.panel.config.script.picker.no_scripts\"\n        )}\n        @clear-filter=${this._clearFilter}\n        hasFab\n      >\n        <ha-icon-button\n          slot=\"toolbar-icon\"\n          .label=${this.hass.localize(\"ui.common.help\")}\n          .path=${mdiHelpCircle}\n          @click=${this._showHelp}\n        ></ha-icon-button>\n        <ha-button-related-filter-menu\n          slot=\"filter-menu\"\n          corner=\"BOTTOM_START\"\n          .narrow=${this.narrow}\n          .hass=${this.hass}\n          .value=${this._filterValue}\n          exclude-domains='[\"script\"]'\n          @related-changed=${this._relatedFilterChanged}\n        >\n        </ha-button-related-filter-menu>\n        <a href=\"/config/script/edit/new\" slot=\"fab\">\n          <ha-fab\n            ?is-wide=${this.isWide}\n            ?narrow=${this.narrow}\n            .label=${this.hass.localize(\n              \"ui.panel.config.script.picker.add_script\"\n            )}\n            extended\n            ?rtl=${computeRTL(this.hass)}\n          >\n            <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n          </ha-fab>\n        </a>\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  private _relatedFilterChanged(ev: CustomEvent) {\n    this._filterValue = ev.detail.value;\n    if (!this._filterValue) {\n      this._clearFilter();\n      return;\n    }\n    this._activeFilters = [ev.detail.filter];\n    this._filteredScripts = ev.detail.items.script || null;\n  }\n\n  private _clearFilter() {\n    this._filteredScripts = undefined;\n    this._activeFilters = undefined;\n    this._filterValue = undefined;\n  }\n\n  private _runScript = async (ev) => {\n    ev.stopPropagation();\n    const script = ev.currentTarget.script as HassEntity;\n    await triggerScript(this.hass, script.entity_id);\n    showToast(this, {\n      message: this.hass.localize(\n        \"ui.notification_toast.triggered\",\n        \"name\",\n        computeStateName(script)\n      ),\n    });\n  };\n\n  private _showInfo(ev) {\n    ev.stopPropagation();\n    const entityId = ev.currentTarget.script.entity_id;\n    fireEvent(this, \"hass-more-info\", { entityId });\n  }\n\n  private _showHelp() {\n    showAlertDialog(this, {\n      title: this.hass.localize(\"ui.panel.config.script.caption\"),\n      text: html`\n        ${this.hass.localize(\"ui.panel.config.script.picker.introduction\")}\n        <p>\n          <a\n            href=${documentationUrl(this.hass, \"/docs/scripts/editor/\")}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            ${this.hass.localize(\"ui.panel.config.script.picker.learn_more\")}\n          </a>\n        </p>\n      `,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        a {\n          text-decoration: none;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-script-picker\": HaScriptPicker;\n  }\n}\n"],"names":[],"sourceRoot":""}