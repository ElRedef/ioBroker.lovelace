{"version":3,"file":"a4c4c6fc.js","mappings":";;AAiGA;AACA;AAGA;;;;AAIA;;AAEA;;;AAGA;AACA;;;AAGA;;AAEA;AACA;;AAEA;;AAGA;AACA;;AAEA;;;;;AA5GA;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;ACgCA;;AA2CA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AAIA;AACA;;;;;;;;AAQA;;AAGA;;;;AAMA;;;AAGA;;;AAIA;AAGA;;;;;;;AA9CA;;;;;;;;;;;;AAnCA;;;;AC/BA;ACAA;AACA;AACA;AAfA;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACmCA;AACA;;;;AAoCA;AACA;AAGA;AACA;AACA;;;;AAIA;;AAdA;AC1DA;AACA;AACA;;AAbA;AC8BA;AACA;AACA;;AAEA;AACA;AACA;AAGA;AAGA;AAvCA;;ACUA;AACA;AACA;;AAdA;;;;;;AAAA;ACyBA;AACA;AACA;AACA;AACA;AAGA;AAGA;;AAlCA;ACiBA;AACA;AACA;AACA;AACA;;AAnBA;ACcA;AAEA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AAEA;AACA;AA9CA;;;;;;;;;;;;AAAA;ACUA;AACA;AACA;AACA;AAhBA;ACcA;AACA;;;;;AAKA;AACA;;AAEA;AAEA;;;AAxBA;;;;;;;;;;;;AAAA;AC6GA;AAYA;AAYA;;AAYA;;;;AAIA;AACA;;;;;AAKA;;;;;AAKA;;;;;;;AASA;AACA;;;;;AAKA;;;;;AAKA;;;;;;;AASA;AACA;;;;;AAKA;;;;;AAKA;;;;;AA9FA;;AA0HA;;AAIA;;AAGA;AACA;AAEA;;AAGA;AACA;;;AAIA;;;AAGA;;;;;AAOA;;;AAKA;AACA;AACA;;;AAGA;;;;;;;;AAUA;;;AAGA;AACA;AACA;;;AAGA;;;;AArPA;AAkQA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAEA;AACA;AAGA;AACA;AACA;AACA;;AAIA;AA0LA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAteA;ACsBA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAxDA;;;;AAAA;ACCA;AACA;AACA;AACA;AACA;;;;AAMA;;AAEA;AACA;AACA;AACA;AACA;AAhCA;;ACYA;AACA;AACA;;;;AAhBA;ACuCA;AA3BA;ACkLA;AACA;AACA;;;AAGA;AACA;AAEA;AACA;;;;;;;;AAUA;;AAGA;AAEA;;AAIA;;;AAKA;;AAIA;AACA;AAGA;AACA;;AAEA;AAGA;AACA;AACA;AACA;;AAEA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AASA;AAKA;AACA;AAGA;;AATA;AAYA;AACA;;AAEA;AAIA;AACA;AACA;AACA;AACA;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAzPA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;;AAIA;;AAUA;AACA;AACA;AAKA;AACA;;;;AAIA;AACA;;;;;;ACtDA;AACA;;;;;;;AAZA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAxCA;ACgDA;;AAEA;;AAEA;AACA;;AA1CA;ACsCA;;AAIA;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AAjDA;;ACwBA;AACA;;;;AAIA;;AAEA;;;AAGA;;AAGA;AAEA;;AAEA;AACA;;;AAGA;;;;;;;;;;;;;;;;;;AA/CA;AC6BA;;;AAKA;AACA;AAGA;AACA;AACA;AACA;AAKA;;;AAGA;AACA;;AAIA;;;;;;;AASA;AAEA;AACA;AACA;AACA;;;;;;;;;;AArEA;;;;AC8HA;;AAGA;;AAIA;;AAEA;AAEA;;AAGA;;AAIA;;AAEA;AAEA;;;AAGA;;;AAGA;AACA;;;AASA;;;AAKA;;;;AAMA;;AAGA;;AAIA;AAEA;AAGA;AAEA;AACA;AAEA;AAEA;AAEA;AAKA;;AAGA;;;AAKA;AACA;;AAEA;;AAGA;AAGA;;AAEA;;AAEA;AAEA;;;;AAKA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAhKA;AC/DA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAMA;AACA;;;;;;;;;;;;;;AA1BA;ACkBA;;AAGA;AACA;AACA;;;;;AAOA;;;AAOA;;;AAKA;AACA;AACA;AACA;;;AAGA;;;AAKA;AACA;AACA;AACA;;;;;;AAOA;AACA;;;;;AAOA;;;AAKA;AACA;AACA;;AAzEA;;;;;;;;;;;;;AAAA;;ACKA;AACA;AACA;;AAdA;ACiCA;AAGA;;AAEA;AAnCA;;ACwCA;AACA;AACA;AACA;;;AAKA;AACA;AACA;AACA;AACA;;AAIA;;AAGA;AACA;AACA;AAGA;;AAEA;AA9DA;;AC2BA;;AAIA;AACA;;;AAGA;AAGA;AACA;AACA;;AA3CA;;AC4BA;;;;;AAOA;AACA;;AAEA;AAEA;AACA;;;;;AAQA;AAEA;;AAIA;AACA;AACA;AAEA;AAEA;;;AAKA;AACA;AACA;AACA;AAEA;AAEA;;;AAKA;AACA;AACA;AACA;;AAGA;;;AAKA;AACA;AACA;;AAhFA;;ACEA;AACA;AACA;AACA;;;AAjBA;;ACqDA;AACA;AACA;AACA;AACA;;AAjDA;;;;;AAAA;;ACSA;AAGA;AACA;AACA;;;;AAIA;;;AAKA;AACA;;;;AAIA;AACA;AACA;AACA;;AAvCA;;ACYA;;AAIA;AACA;;;;AAIA;AAGA;AACA;AACA;;;;AAIA;;;AAKA;AACA;;;AAtCA;ACuDA;AAEA;AAEA;AAKA;;AAGA;;;AAKA;AACA;;AAEA;;AAGA;AAGA;;AAEA;;AAEA;AAEA;;;;;AAMA;;;;;;;ACvCA;;;AAGA;;;;;AAKA;;;AASA;;;AAKA;;;;AAMA;;AAGA;;AAIA;AAEA;AAGA;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;;;;AAxDA;;;;;;;;;;;;AAXA;ACAA;;AAGA;AACA;AACA;AACA;AACA;;;;;AAMA;AACA;;;;AAjBA;;;;;;;;;;AAjCA;;ACyCA;AACA;AACA;AACA;;;AAKA;AACA;AACA;AACA;AACA;;AAIA;;AAGA;AACA;AACA;AAGA;;AAEA;AA9DA;;ACaA;AACA;AACA;;AArBA;;ACiBA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AAGA;;;;AAIA;;AAIA;AACA;;;AAGA;;AAIA;AACA;;;AAGA;;AAIA;AACA;;;;;ACbA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AAGA;;;;AAIA;AAGA;AACA;AACA;;;AAGA;AAGA;AACA;AACA;;AA1DA;;ACEA;;AAIA;;;;;AAOA;AACA;;;;AAIA;;;;;AAOA;AACA;;;;;;AAMA;;AAIA;AACA;;;;AAIA;;;AAKA;;;;;AAOA;AACA;;;;AAIA;;;;;AAOA;AACA;;;;;;AAMA;;AAIA;AACA;;AAxFA;;;;;AAAA;;ACMA;;AAIA;AACA;;;AAlBA;;ACgDA;;;AAKA;;;AAGA;;;;AAIA;;;AAKA;;;AAGA;;;AAGA;AAEA;AAGA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAGA;AACA;AACA;AACA;;;;AAIA;;;AAKA;;;AAGA;;;;AAIA;;;AAKA;;;AAGA;;;AAGA;AAEA;AAGA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAGA;AACA;AACA;AACA;;AAEA;;;;;AAMA;AAGA;;;AAGA;AACA;AACA;;;;;AA/HA;;;;;AAAA;ACkBA;;;;;AAOA;;AAEA;;AAEA;AAGA;AACA;;AAEA;;AAtBA;;ACbA;AAGA;AACA;AACA;;AAEA;;;AAGA;AAGA;AACA;AACA;;AAEA;;;AAGA;;AApCA;;;;AC6FA;;;AAGA;;;AAGA;AACA;;;AASA;;;AAKA;;;;AAMA;;AAGA;;AAIA;AAEA;AAGA;AAEA;AACA;AAEA;AAEA;AAEA;AAKA;;AAGA;;;AAKA;AACA;;AAEA;;AAGA;AAGA;;AAEA;;AAEA;AAEA;;;;;AAMA;AAGA;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;;;AAxHA;AC9DA;;AAGA;AACA;AACA;AACA;AACA;;;;;AAMA;AACA;;;;;;;;;;;;;;AArBA;;ACyCA;AACA;AACA;AACA;;;AAKA;AACA;AACA;AACA;AACA;;AAIA;;AAGA;AACA;AACA;AAGA;;AAEA;AA9DA;;ACWA;;AAIA;AACA;;;AAGA;AAGA;AACA;AACA;;;AAGA;;AAIA;AAGA;AAGA;AACA;AACA;;AAzCA;;ACgBA;;AAIA;AACA;;;AAGA;AAGA;AACA;AACA;;AAEA;;;AAGA;;AAIA;;;;;AAOA;AACA;;;;AAIA;;;;;AAOA;AACA;;;;AA5DA;;;;;AAAA;;ACaA;;AAIA;;;;;AAOA;AACA;;;;AAIA;;;;;AAOA;AACA;;;;AAvCA;;;;;AAAA;;ACcA;;AAIA;AACA;;;AAGA;;AAIA;AACA;;AA1BA;;ACkCA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AAGA;;;;AAIA;;AAIA;AACA;;;AAGA;;AAIA;AACA;;;AAGA;;AAIA;AACA;;;;AAIA;AAGA;AACA;AACA;;AA/EA;;ACqEA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AAGA;;;;AAIA;AAGA;AACA;AACA;;;AAGA;AAGA;AACA;AACA;;;AAGA;AAGA;AACA;AACA;;AAnFA;;ACRA;;AAIA;;;;;AAOA;AACA;;;;AAIA;;;;;AAOA;AACA;;;;;;AAMA;;AAIA;AACA;;AAnDA;;;;;AAAA;;ACiBA;AAGA;;;;AAIA;;AAEA;;AAEA;AAEA;AACA;;;;;AAlCA;;ACSA;;AAIA;AACA;;;AAlBA;AC6CA;;;AAKA;;;AAGA;;;;AAIA;;;AAKA;;;AAGA;;;;AAIA;AAEA;AAGA;AACA;AACA;AAIA;AACA;;AAEA;AAEA;AAGA;AACA;AAIA;AACA;AAtFA;;ACQA;;AAIA;AACA;;;AAGA;;AAIA;AACA;;;AAGA;;AAIA;AACA;;AAlCA;;ACYA;;AAIA;AACA;;AApBA;;AC6BA;AAGA;AACA;AACA;;AAEA;;;AAGA;AAGA;AACA;AACA;;AAEA;;;;AAIA;;AAIA;;;;;AAOA;AACA;;;;AAIA;;;;;AAOA;AACA;;;;AA9DA;;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/components/device/ha-device-automation-picker.ts","webpack://home-assistant-frontend/./src/components/entity/ha-entity-attribute-picker.ts","webpack://home-assistant-frontend/./src/components/ha-code-editor.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-action.ts","webpack://home-assistant-frontend/./src/components/ha-addon-picker.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-addon.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-area.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-boolean.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-device.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-entity.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-number.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-object.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-select.ts","webpack://home-assistant-frontend/./src/components/ha-target-picker.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-target.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-text.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector-time.ts","webpack://home-assistant-frontend/./src/components/ha-selector/ha-selector.ts","webpack://home-assistant-frontend/./src/components/ha-service-control.ts","webpack://home-assistant-frontend/./src/components/ha-service-picker.ts","webpack://home-assistant-frontend/./src/components/ha-settings-row.ts","webpack://home-assistant-frontend/./src/components/ha-time-input.ts","webpack://home-assistant-frontend/./src/components/ha-yaml-editor.ts","webpack://home-assistant-frontend/./src/components/user/ha-user-badge.ts","webpack://home-assistant-frontend/./src/components/user/ha-user-picker.ts","webpack://home-assistant-frontend/./src/components/user/ha-users-picker.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/ha-automation-action-row.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/ha-automation-action.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-choose.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-condition.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-delay.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-device_id.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-event.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-repeat.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-scene.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-service.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-wait_for_trigger.ts","webpack://home-assistant-frontend/./src/panels/config/automation/action/types/ha-automation-action-wait_template.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/ha-automation-condition-editor.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/ha-automation-condition-row.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/ha-automation-condition.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/types/ha-automation-condition-device.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/types/ha-automation-condition-logical.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/types/ha-automation-condition-numeric_state.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/types/ha-automation-condition-state.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/types/ha-automation-condition-sun.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/types/ha-automation-condition-template.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/types/ha-automation-condition-time.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/types/ha-automation-condition-trigger.ts","webpack://home-assistant-frontend/./src/panels/config/automation/condition/types/ha-automation-condition-zone.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/ha-automation-trigger-row.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/ha-automation-trigger.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-device.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-event.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-geo_location.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-homeassistant.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-mqtt.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-numeric_state.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-state.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-sun.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-tag.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-template.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-time.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-time_pattern.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-webhook.ts","webpack://home-assistant-frontend/./src/panels/config/automation/trigger/types/ha-automation-trigger-zone.ts"],"sourcesContent":["import \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport {\n  DeviceAutomation,\n  deviceAutomationsEqual,\n} from \"../../data/device_automation\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-paper-dropdown-menu\";\n\nconst NO_AUTOMATION_KEY = \"NO_AUTOMATION\";\nconst UNKNOWN_AUTOMATION_KEY = \"UNKNOWN_AUTOMATION\";\n\nexport abstract class HaDeviceAutomationPicker<\n  T extends DeviceAutomation\n> extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public deviceId?: string;\n\n  @property() public value?: T;\n\n  @state() private _automations: T[] = [];\n\n  // Trigger an empty render so we start with a clean DOM.\n  // paper-listbox does not like changing things around.\n  @state() private _renderEmpty = false;\n\n  protected get NO_AUTOMATION_TEXT() {\n    return this.hass.localize(\n      \"ui.panel.config.devices.automation.actions.no_actions\"\n    );\n  }\n\n  protected get UNKNOWN_AUTOMATION_TEXT() {\n    return this.hass.localize(\n      \"ui.panel.config.devices.automation.actions.unknown_action\"\n    );\n  }\n\n  private _localizeDeviceAutomation: (\n    hass: HomeAssistant,\n    automation: T\n  ) => string;\n\n  private _fetchDeviceAutomations: (\n    hass: HomeAssistant,\n    deviceId: string\n  ) => Promise<T[]>;\n\n  private _createNoAutomation: (deviceId?: string) => T;\n\n  constructor(\n    localizeDeviceAutomation: HaDeviceAutomationPicker<T>[\"_localizeDeviceAutomation\"],\n    fetchDeviceAutomations: HaDeviceAutomationPicker<T>[\"_fetchDeviceAutomations\"],\n    createNoAutomation: HaDeviceAutomationPicker<T>[\"_createNoAutomation\"]\n  ) {\n    super();\n    this._localizeDeviceAutomation = localizeDeviceAutomation;\n    this._fetchDeviceAutomations = fetchDeviceAutomations;\n    this._createNoAutomation = createNoAutomation;\n  }\n\n  private get _key() {\n    if (\n      !this.value ||\n      deviceAutomationsEqual(\n        this._createNoAutomation(this.deviceId),\n        this.value\n      )\n    ) {\n      return NO_AUTOMATION_KEY;\n    }\n\n    const idx = this._automations.findIndex((automation) =>\n      deviceAutomationsEqual(automation, this.value!)\n    );\n\n    if (idx === -1) {\n      return UNKNOWN_AUTOMATION_KEY;\n    }\n\n    return `${this._automations[idx].device_id}_${idx}`;\n  }\n\n  protected render(): TemplateResult {\n    if (this._renderEmpty) {\n      return html``;\n    }\n    return html`\n      <ha-paper-dropdown-menu\n        .label=${this.label}\n        .value=${this.value\n          ? this._localizeDeviceAutomation(this.hass, this.value)\n          : \"\"}\n        ?disabled=${this._automations.length === 0}\n      >\n        <paper-listbox\n          slot=\"dropdown-content\"\n          .selected=${this._key}\n          attr-for-selected=\"key\"\n          @iron-select=${this._automationChanged}\n        >\n          <paper-item\n            key=${NO_AUTOMATION_KEY}\n            .automation=${this._createNoAutomation(this.deviceId)}\n            hidden\n          >\n            ${this.NO_AUTOMATION_TEXT}\n          </paper-item>\n          <paper-item key=${UNKNOWN_AUTOMATION_KEY} hidden>\n            ${this.UNKNOWN_AUTOMATION_TEXT}\n          </paper-item>\n          ${this._automations.map(\n            (automation, idx) => html`\n              <paper-item\n                key=${`${this.deviceId}_${idx}`}\n                .automation=${automation}\n              >\n                ${this._localizeDeviceAutomation(this.hass, automation)}\n              </paper-item>\n            `\n          )}\n        </paper-listbox>\n      </ha-paper-dropdown-menu>\n    `;\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n\n    if (changedProps.has(\"deviceId\")) {\n      this._updateDeviceInfo();\n    }\n\n    // The value has changed, force the listbox to update\n    if (changedProps.has(\"value\") || changedProps.has(\"_renderEmpty\")) {\n      const listbox = this.shadowRoot!.querySelector(\"paper-listbox\")!;\n      if (listbox) {\n        listbox._selectSelected(this._key);\n      }\n    }\n  }\n\n  private async _updateDeviceInfo() {\n    this._automations = this.deviceId\n      ? await this._fetchDeviceAutomations(this.hass, this.deviceId)\n      : // No device, clear the list of automations\n        [];\n\n    // If there is no value, or if we have changed the device ID, reset the value.\n    if (!this.value || this.value.device_id !== this.deviceId) {\n      this._setValue(\n        this._automations.length\n          ? this._automations[0]\n          : this._createNoAutomation(this.deviceId)\n      );\n    }\n    this._renderEmpty = true;\n    await this.updateComplete;\n    this._renderEmpty = false;\n  }\n\n  private _automationChanged(ev) {\n    if (ev.detail.item.automation) {\n      this._setValue(ev.detail.item.automation);\n    }\n  }\n\n  private _setValue(automation: T) {\n    if (this.value && deviceAutomationsEqual(automation, this.value)) {\n      return;\n    }\n    fireEvent(this, \"change\");\n    fireEvent(this, \"value-changed\", { value: automation });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-paper-dropdown-menu {\n        width: 100%;\n      }\n      paper-listbox {\n        min-width: 200px;\n      }\n      paper-item {\n        cursor: pointer;\n      }\n    `;\n  }\n}\n","import { mdiCheck, mdiClose, mdiMenuDown, mdiMenuUp } from \"@mdi/js\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@vaadin/vaadin-combo-box/theme/material/vaadin-combo-box-light\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { ComboBoxLitRenderer, comboBoxRenderer } from \"lit-vaadin-helpers\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { PolymerChangedEvent } from \"../../polymer-types\";\nimport { HomeAssistant } from \"../../types\";\nimport { formatAttributeName } from \"../../util/hass-attributes-util\";\nimport \"../ha-icon-button\";\nimport \"../ha-svg-icon\";\nimport \"./state-badge\";\n\nexport type HaEntityPickerEntityFilterFunc = (entityId: HassEntity) => boolean;\n\n// eslint-disable-next-line lit/prefer-static-styles\nconst rowRenderer: ComboBoxLitRenderer<string> = (item) => html`<style>\n    paper-item {\n      padding: 0;\n      margin: -10px;\n      margin-left: 0;\n    }\n    #content {\n      display: flex;\n      align-items: center;\n    }\n    ha-svg-icon {\n      padding-left: 2px;\n      margin-right: -2px;\n      color: var(--secondary-text-color);\n    }\n    :host(:not([selected])) ha-svg-icon {\n      display: none;\n    }\n    :host([selected]) paper-item {\n      margin-left: 10px;\n    }\n  </style>\n  <ha-svg-icon .path=${mdiCheck}></ha-svg-icon>\n  <paper-item>${formatAttributeName(item)}</paper-item>`;\n\n@customElement(\"ha-entity-attribute-picker\")\nclass HaEntityAttributePicker extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public entityId?: string;\n\n  @property({ type: Boolean }) public autofocus = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean, attribute: \"allow-custom-value\" })\n  public allowCustomValue;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property({ type: Boolean }) private _opened = false;\n\n  @query(\"vaadin-combo-box-light\", true) private _comboBox!: HTMLElement;\n\n  protected shouldUpdate(changedProps: PropertyValues) {\n    return !(!changedProps.has(\"_opened\") && this._opened);\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (changedProps.has(\"_opened\") && this._opened) {\n      const state = this.entityId ? this.hass.states[this.entityId] : undefined;\n      (this._comboBox as any).items = state\n        ? Object.keys(state.attributes)\n        : [];\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n\n    return html`\n      <vaadin-combo-box-light\n        .value=${this._value}\n        .allowCustomValue=${this.allowCustomValue}\n        attr-for-value=\"bind-value\"\n        ${comboBoxRenderer(rowRenderer)}\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n      >\n        <paper-input\n          .autofocus=${this.autofocus}\n          .label=${this.label ??\n          this.hass.localize(\n            \"ui.components.entity.entity-attribute-picker.attribute\"\n          )}\n          .value=${this._value ? formatAttributeName(this._value) : \"\"}\n          .disabled=${this.disabled || !this.entityId}\n          class=\"input\"\n          autocapitalize=\"none\"\n          autocomplete=\"off\"\n          autocorrect=\"off\"\n          spellcheck=\"false\"\n        >\n          <div class=\"suffix\" slot=\"suffix\">\n            ${this.value\n              ? html`\n                  <ha-icon-button\n                    .label=${this.hass.localize(\n                      \"ui.components.entity.entity-picker.clear\"\n                    )}\n                    .path=${mdiClose}\n                    class=\"clear-button\"\n                    tabindex=\"-1\"\n                    @click=${this._clearValue}\n                    no-ripple\n                  ></ha-icon-button>\n                `\n              : \"\"}\n\n            <ha-icon-button\n              .label=${this.hass.localize(\n                \"ui.components.entity.entity-attribute-picker.show_attributes\"\n              )}\n              .path=${this._opened ? mdiMenuUp : mdiMenuDown}\n              class=\"toggle-button\"\n              tabindex=\"-1\"\n            ></ha-icon-button>\n          </div>\n        </paper-input>\n      </vaadin-combo-box-light>\n    `;\n  }\n\n  private _clearValue(ev: Event) {\n    ev.stopPropagation();\n    this._setValue(\"\");\n  }\n\n  private get _value() {\n    return this.value;\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n  }\n\n  private _valueChanged(ev: PolymerChangedEvent<string>) {\n    const newValue = ev.detail.value;\n    if (newValue !== this._value) {\n      this._setValue(newValue);\n    }\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    setTimeout(() => {\n      fireEvent(this, \"value-changed\", { value });\n      fireEvent(this, \"change\");\n    }, 0);\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .suffix {\n        display: flex;\n      }\n      ha-icon-button {\n        --mdc-icon-button-size: 24px;\n        padding: 0px 2px;\n        color: var(--secondary-text-color);\n      }\n      [hidden] {\n        display: none;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-entity-attribute-picker\": HaEntityAttributePicker;\n  }\n}\n","import type { EditorView, KeyBinding, ViewUpdate } from \"@codemirror/view\";\nimport { css, CSSResultGroup, PropertyValues, ReactiveElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { loadCodeMirror } from \"../resources/codemirror.ondemand\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"editor-save\": undefined;\n  }\n}\n\nconst saveKeyBinding: KeyBinding = {\n  key: \"Mod-s\",\n  run: (view: EditorView) => {\n    fireEvent(view.dom, \"editor-save\");\n    return true;\n  },\n};\n\n@customElement(\"ha-code-editor\")\nexport class HaCodeEditor extends ReactiveElement {\n  public codemirror?: EditorView;\n\n  @property() public mode = \"yaml\";\n\n  @property({ type: Boolean }) public autofocus = false;\n\n  @property({ type: Boolean }) public readOnly = false;\n\n  @property() public error = false;\n\n  @state() private _value = \"\";\n\n  private _loadedCodeMirror?: typeof import(\"../resources/codemirror\");\n\n  public set value(value: string) {\n    this._value = value;\n  }\n\n  public get value(): string {\n    return this.codemirror ? this.codemirror.state.doc.toString() : this._value;\n  }\n\n  public get hasComments(): boolean {\n    if (!this.codemirror || !this._loadedCodeMirror) {\n      return false;\n    }\n    const className = this._loadedCodeMirror.HighlightStyle.get(\n      this.codemirror.state,\n      this._loadedCodeMirror.tags.comment\n    );\n    return !!this.shadowRoot!.querySelector(`span.${className}`);\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (!this.codemirror) {\n      return;\n    }\n    if (this.autofocus !== false) {\n      this.codemirror.focus();\n    }\n  }\n\n  protected update(changedProps: PropertyValues): void {\n    super.update(changedProps);\n\n    if (!this.codemirror) {\n      return;\n    }\n\n    if (changedProps.has(\"mode\")) {\n      this.codemirror.dispatch({\n        effects: this._loadedCodeMirror!.langCompartment!.reconfigure(\n          this._mode\n        ),\n      });\n    }\n    if (changedProps.has(\"readOnly\")) {\n      this.codemirror.dispatch({\n        effects: this._loadedCodeMirror!.readonlyCompartment!.reconfigure(\n          this._loadedCodeMirror!.EditorView!.editable.of(!this.readOnly)\n        ),\n      });\n    }\n    if (changedProps.has(\"_value\") && this._value !== this.value) {\n      this.codemirror.dispatch({\n        changes: {\n          from: 0,\n          to: this.codemirror.state.doc.length,\n          insert: this._value,\n        },\n      });\n    }\n    if (changedProps.has(\"error\")) {\n      this.classList.toggle(\"error-state\", this.error);\n    }\n  }\n\n  protected firstUpdated(changedProps: PropertyValues): void {\n    super.firstUpdated(changedProps);\n    this._blockKeyboardShortcuts();\n    this._load();\n  }\n\n  private get _mode() {\n    return this._loadedCodeMirror!.langs[this.mode];\n  }\n\n  private async _load(): Promise<void> {\n    this._loadedCodeMirror = await loadCodeMirror();\n\n    this.codemirror = new this._loadedCodeMirror.EditorView({\n      state: this._loadedCodeMirror.EditorState.create({\n        doc: this._value,\n        extensions: [\n          this._loadedCodeMirror.lineNumbers(),\n          this._loadedCodeMirror.EditorState.allowMultipleSelections.of(true),\n          this._loadedCodeMirror.history(),\n          this._loadedCodeMirror.highlightSelectionMatches(),\n          this._loadedCodeMirror.highlightActiveLine(),\n          this._loadedCodeMirror.drawSelection(),\n          this._loadedCodeMirror.rectangularSelection(),\n          this._loadedCodeMirror.keymap.of([\n            ...this._loadedCodeMirror.defaultKeymap,\n            ...this._loadedCodeMirror.searchKeymap,\n            ...this._loadedCodeMirror.historyKeymap,\n            ...this._loadedCodeMirror.tabKeyBindings,\n            saveKeyBinding,\n          ] as KeyBinding[]),\n          this._loadedCodeMirror.langCompartment.of(this._mode),\n          this._loadedCodeMirror.theme,\n          this._loadedCodeMirror.Prec.fallback(\n            this._loadedCodeMirror.highlightStyle\n          ),\n          this._loadedCodeMirror.readonlyCompartment.of(\n            this._loadedCodeMirror.EditorView.editable.of(!this.readOnly)\n          ),\n          this._loadedCodeMirror.EditorView.updateListener.of((update) =>\n            this._onUpdate(update)\n          ),\n        ],\n      }),\n      root: this.shadowRoot!,\n      parent: this.shadowRoot!,\n    });\n  }\n\n  private _blockKeyboardShortcuts() {\n    this.addEventListener(\"keydown\", (ev) => ev.stopPropagation());\n  }\n\n  private _onUpdate(update: ViewUpdate): void {\n    if (!update.docChanged) {\n      return;\n    }\n    const newValue = this.value;\n    if (newValue === this._value) {\n      return;\n    }\n    this._value = newValue;\n    fireEvent(this, \"value-changed\", { value: this._value });\n  }\n\n  // Only Lit 2.0 will use this\n  static get styles(): CSSResultGroup {\n    return css`\n      :host(.error-state) div.cm-wrap .cm-gutters {\n        border-color: var(--error-state-color, red);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-code-editor\": HaCodeEditor;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { Action } from \"../../data/script\";\nimport { ActionSelector } from \"../../data/selector\";\nimport \"../../panels/config/automation/action/ha-automation-action\";\nimport { HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-selector-action\")\nexport class HaActionSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: ActionSelector;\n\n  @property() public value?: Action;\n\n  @property() public label?: string;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  protected render() {\n    return html`<ha-automation-action\n      .disabled=${this.disabled}\n      .actions=${this.value || []}\n      .hass=${this.hass}\n    ></ha-automation-action>`;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-automation-action {\n        display: block;\n        margin-bottom: 16px;\n      }\n      :host([disabled]) ha-automation-action {\n        opacity: var(--light-disabled-opacity);\n        pointer-events: none;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-action\": HaActionSelector;\n  }\n}\n","import { mdiCheck } from \"@mdi/js\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { ComboBoxLitRenderer } from \"lit-vaadin-helpers\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../common/config/is_component_loaded\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { stringCompare } from \"../common/string/compare\";\nimport { HassioAddonInfo } from \"../data/hassio/addon\";\nimport { fetchHassioSupervisorInfo } from \"../data/hassio/supervisor\";\nimport { showAlertDialog } from \"../dialogs/generic/show-dialog-box\";\nimport { PolymerChangedEvent } from \"../polymer-types\";\nimport { HomeAssistant } from \"../types\";\nimport { HaComboBox } from \"./ha-combo-box\";\n\n// eslint-disable-next-line lit/prefer-static-styles\nconst rowRenderer: ComboBoxLitRenderer<HassioAddonInfo> = (item) => html`<style>\n    paper-item {\n      padding: 0;\n      margin: -10px;\n      margin-left: 0px;\n    }\n    #content {\n      display: flex;\n      align-items: center;\n    }\n    :host([selected]) paper-item {\n      margin-left: 0;\n    }\n    ha-svg-icon {\n      padding-left: 2px;\n      margin-right: -2px;\n      color: var(--secondary-text-color);\n    }\n    :host(:not([selected])) ha-svg-icon {\n      display: none;\n    }\n    :host([selected]) paper-icon-item {\n      margin-left: 0;\n    }\n  </style>\n  <ha-svg-icon .path=${mdiCheck}></ha-svg-icon>\n  <paper-item>\n    <paper-item-body two-line>\n      ${item.name}\n      <span secondary>${item.slug}</span>\n    </paper-item-body>\n  </paper-item>`;\n\n@customElement(\"ha-addon-picker\")\nclass HaAddonPicker extends LitElement {\n  public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public value = \"\";\n\n  @state() private _addons?: HassioAddonInfo[];\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @query(\"ha-combo-box\") private _comboBox!: HaComboBox;\n\n  public open() {\n    this._comboBox?.open();\n  }\n\n  public focus() {\n    this._comboBox?.focus();\n  }\n\n  protected firstUpdated() {\n    this._getAddons();\n  }\n\n  protected render(): TemplateResult {\n    if (!this._addons) {\n      return html``;\n    }\n    return html`\n      <ha-combo-box\n        .hass=${this.hass}\n        .label=${this.label === undefined && this.hass\n          ? this.hass.localize(\"ui.components.addon-picker.addon\")\n          : this.label}\n        .value=${this._value}\n        .renderer=${rowRenderer}\n        .items=${this._addons}\n        item-value-path=\"slug\"\n        item-id-path=\"slug\"\n        item-label-path=\"name\"\n        @value-changed=${this._addonChanged}\n      ></ha-combo-box>\n    `;\n  }\n\n  private async _getAddons() {\n    try {\n      if (isComponentLoaded(this.hass, \"hassio\")) {\n        const supervisorInfo = await fetchHassioSupervisorInfo(this.hass);\n        this._addons = supervisorInfo.addons.sort((a, b) =>\n          stringCompare(a.name, b.name)\n        );\n      } else {\n        showAlertDialog(this, {\n          title: this.hass.localize(\n            \"ui.componencts.addon-picker.error.no_supervisor.title\"\n          ),\n          text: this.hass.localize(\n            \"ui.componencts.addon-picker.error.no_supervisor.description\"\n          ),\n        });\n      }\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: this.hass.localize(\n          \"ui.componencts.addon-picker.error.fetch_addons.title\"\n        ),\n        text: this.hass.localize(\n          \"ui.componencts.addon-picker.error.fetch_addons.description\"\n        ),\n      });\n    }\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  private _addonChanged(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    const newValue = ev.detail.value;\n\n    if (newValue !== this._value) {\n      this._setValue(newValue);\n    }\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    setTimeout(() => {\n      fireEvent(this, \"value-changed\", { value });\n      fireEvent(this, \"change\");\n    }, 0);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-addon-picker\": HaAddonPicker;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { AddonSelector } from \"../../data/selector\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-addon-picker\";\n\n@customElement(\"ha-selector-addon\")\nexport class HaAddonSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: AddonSelector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  protected render() {\n    return html`<ha-addon-picker\n      .hass=${this.hass}\n      .value=${this.value}\n      .label=${this.label}\n      allow-custom-entity\n    ></ha-addon-picker>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-addon\": HaAddonSelector;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ConfigEntry, getConfigEntries } from \"../../data/config_entries\";\nimport { DeviceRegistryEntry } from \"../../data/device_registry\";\nimport { EntityRegistryEntry } from \"../../data/entity_registry\";\nimport { AreaSelector } from \"../../data/selector\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-area-picker\";\n\n@customElement(\"ha-selector-area\")\nexport class HaAreaSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: AreaSelector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @state() public _configEntries?: ConfigEntry[];\n\n  @property({ type: Boolean }) public disabled = false;\n\n  protected updated(changedProperties) {\n    if (changedProperties.has(\"selector\")) {\n      const oldSelector = changedProperties.get(\"selector\");\n      if (\n        oldSelector !== this.selector &&\n        this.selector.area.device?.integration\n      ) {\n        this._loadConfigEntries();\n      }\n    }\n  }\n\n  protected render() {\n    return html`<ha-area-picker\n      .hass=${this.hass}\n      .value=${this.value}\n      .label=${this.label}\n      no-add\n      .deviceFilter=${this._filterDevices}\n      .entityFilter=${this._filterEntities}\n      .includeDeviceClasses=${this.selector.area.entity?.device_class\n        ? [this.selector.area.entity.device_class]\n        : undefined}\n      .includeDomains=${this.selector.area.entity?.domain\n        ? [this.selector.area.entity.domain]\n        : undefined}\n      .disabled=${this.disabled}\n    ></ha-area-picker>`;\n  }\n\n  private _filterEntities = (entity: EntityRegistryEntry): boolean => {\n    if (this.selector.area.entity?.integration) {\n      if (entity.platform !== this.selector.area.entity.integration) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  private _filterDevices = (device: DeviceRegistryEntry): boolean => {\n    if (\n      this.selector.area.device?.manufacturer &&\n      device.manufacturer !== this.selector.area.device.manufacturer\n    ) {\n      return false;\n    }\n    if (\n      this.selector.area.device?.model &&\n      device.model !== this.selector.area.device.model\n    ) {\n      return false;\n    }\n    if (this.selector.area.device?.integration) {\n      if (\n        this._configEntries &&\n        !this._configEntries.some((entry) =>\n          device.config_entries.includes(entry.entry_id)\n        )\n      ) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  private async _loadConfigEntries() {\n    this._configEntries = (await getConfigEntries(this.hass)).filter(\n      (entry) => entry.domain === this.selector.area.device?.integration\n    );\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-area\": HaAreaSelector;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-formfield\";\nimport \"../ha-switch\";\n\n@customElement(\"ha-selector-boolean\")\nexport class HaBooleanSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public value?: number;\n\n  @property() public label?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  protected render() {\n    return html`<ha-formfield alignEnd spaceBetween .label=${this.label}>\n      <ha-switch\n        .checked=${this.value}\n        @change=${this._handleChange}\n        .disabled=${this.disabled}\n      ></ha-switch>\n    </ha-formfield>`;\n  }\n\n  private _handleChange(ev) {\n    const value = ev.target.checked;\n    if (this.value === value) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", { value });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-formfield {\n        width: 100%;\n        margin: 16px 0;\n        --mdc-typography-body2-font-size: 1em;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-boolean\": HaBooleanSelector;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ConfigEntry, getConfigEntries } from \"../../data/config_entries\";\nimport { DeviceRegistryEntry } from \"../../data/device_registry\";\nimport { DeviceSelector } from \"../../data/selector\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../device/ha-device-picker\";\n\n@customElement(\"ha-selector-device\")\nexport class HaDeviceSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: DeviceSelector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @state() public _configEntries?: ConfigEntry[];\n\n  @property({ type: Boolean }) public disabled = false;\n\n  protected updated(changedProperties) {\n    if (changedProperties.has(\"selector\")) {\n      const oldSelector = changedProperties.get(\"selector\");\n      if (oldSelector !== this.selector && this.selector.device?.integration) {\n        this._loadConfigEntries();\n      }\n    }\n  }\n\n  protected render() {\n    return html`<ha-device-picker\n      .hass=${this.hass}\n      .value=${this.value}\n      .label=${this.label}\n      .deviceFilter=${this._filterDevices}\n      .includeDeviceClasses=${this.selector.device.entity?.device_class\n        ? [this.selector.device.entity.device_class]\n        : undefined}\n      .includeDomains=${this.selector.device.entity?.domain\n        ? [this.selector.device.entity.domain]\n        : undefined}\n      .disabled=${this.disabled}\n      allow-custom-entity\n    ></ha-device-picker>`;\n  }\n\n  private _filterDevices = (device: DeviceRegistryEntry): boolean => {\n    if (\n      this.selector.device?.manufacturer &&\n      device.manufacturer !== this.selector.device.manufacturer\n    ) {\n      return false;\n    }\n    if (\n      this.selector.device?.model &&\n      device.model !== this.selector.device.model\n    ) {\n      return false;\n    }\n    if (this.selector.device?.integration) {\n      if (\n        this._configEntries &&\n        !this._configEntries.some((entry) =>\n          device.config_entries.includes(entry.entry_id)\n        )\n      ) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  private async _loadConfigEntries() {\n    this._configEntries = (await getConfigEntries(this.hass)).filter(\n      (entry) => entry.domain === this.selector.device.integration\n    );\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-device\": HaDeviceSelector;\n  }\n}\n","import { HassEntity, UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { computeStateDomain } from \"../../common/entity/compute_state_domain\";\nimport { subscribeEntityRegistry } from \"../../data/entity_registry\";\nimport { EntitySelector } from \"../../data/selector\";\nimport { SubscribeMixin } from \"../../mixins/subscribe-mixin\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../entity/ha-entity-picker\";\n\n@customElement(\"ha-selector-entity\")\nexport class HaEntitySelector extends SubscribeMixin(LitElement) {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: EntitySelector;\n\n  @state() private _entityPlaformLookup?: Record<string, string>;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  protected render() {\n    return html`<ha-entity-picker\n      .hass=${this.hass}\n      .value=${this.value}\n      .label=${this.label}\n      .entityFilter=${this._filterEntities}\n      .disabled=${this.disabled}\n      allow-custom-entity\n    ></ha-entity-picker>`;\n  }\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeEntityRegistry(this.hass.connection!, (entities) => {\n        const entityLookup = {};\n        for (const confEnt of entities) {\n          if (!confEnt.platform) {\n            continue;\n          }\n          entityLookup[confEnt.entity_id] = confEnt.platform;\n        }\n        this._entityPlaformLookup = entityLookup;\n      }),\n    ];\n  }\n\n  private _filterEntities = (entity: HassEntity): boolean => {\n    if (this.selector.entity?.domain) {\n      if (computeStateDomain(entity) !== this.selector.entity.domain) {\n        return false;\n      }\n    }\n    if (this.selector.entity?.device_class) {\n      if (\n        !entity.attributes.device_class ||\n        entity.attributes.device_class !== this.selector.entity.device_class\n      ) {\n        return false;\n      }\n    }\n    if (this.selector.entity?.integration) {\n      if (\n        !this._entityPlaformLookup ||\n        this._entityPlaformLookup[entity.entity_id] !==\n          this.selector.entity.integration\n      ) {\n        return false;\n      }\n    }\n    return true;\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-entity\": HaEntitySelector;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { NumberSelector } from \"../../data/selector\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-slider\";\n\n@customElement(\"ha-selector-number\")\nexport class HaNumberSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: NumberSelector;\n\n  @property() public value?: number;\n\n  @property() public placeholder?: number;\n\n  @property() public label?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  protected render() {\n    return html`${this.label}\n      ${this.selector.number.mode !== \"box\"\n        ? html`<ha-slider\n            .min=${this.selector.number.min}\n            .max=${this.selector.number.max}\n            .value=${this._value}\n            .step=${this.selector.number.step ?? 1}\n            .disabled=${this.disabled}\n            pin\n            ignore-bar-touch\n            @change=${this._handleSliderChange}\n          >\n          </ha-slider>`\n        : \"\"}\n      <paper-input\n        pattern=\"[0-9]+([\\\\.][0-9]+)?\"\n        .label=${this.selector.number.mode !== \"box\" ? undefined : this.label}\n        .placeholder=${this.placeholder}\n        .noLabelFloat=${this.selector.number.mode !== \"box\"}\n        class=${classMap({ single: this.selector.number.mode === \"box\" })}\n        .min=${this.selector.number.min}\n        .max=${this.selector.number.max}\n        .value=${this.value}\n        .step=${this.selector.number.step ?? 1}\n        .disabled=${this.disabled}\n        type=\"number\"\n        auto-validate\n        @value-changed=${this._handleInputChange}\n      >\n        ${this.selector.number.unit_of_measurement\n          ? html`<div slot=\"suffix\">\n              ${this.selector.number.unit_of_measurement}\n            </div>`\n          : \"\"}\n      </paper-input>`;\n  }\n\n  private get _value() {\n    return this.value || 0;\n  }\n\n  private _handleInputChange(ev) {\n    ev.stopPropagation();\n    const value =\n      ev.detail.value === \"\" || isNaN(ev.detail.value)\n        ? undefined\n        : Number(ev.detail.value);\n    if (this.value === value) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", { value });\n  }\n\n  private _handleSliderChange(ev) {\n    ev.stopPropagation();\n    const value = Number(ev.target.value);\n    if (this.value === value) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", { value });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n      ha-slider {\n        flex: 1;\n      }\n      .single {\n        flex: 1;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-number\": HaNumberSelector;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-yaml-editor\";\n\n@customElement(\"ha-selector-object\")\nexport class HaObjectSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public placeholder?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  protected render() {\n    return html`<ha-yaml-editor\n      .disabled=${this.disabled}\n      .placeholder=${this.placeholder}\n      .defaultValue=${this.value}\n      @value-changed=${this._handleChange}\n    ></ha-yaml-editor>`;\n  }\n\n  private _handleChange(ev) {\n    const value = ev.target.value;\n    if (!ev.target.isValid) {\n      return;\n    }\n    if (this.value === value) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", { value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-object\": HaObjectSelector;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { SelectSelector } from \"../../data/selector\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-paper-dropdown-menu\";\n\n@customElement(\"ha-selector-select\")\nexport class HaSelectSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: SelectSelector;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  protected render() {\n    return html`<ha-paper-dropdown-menu\n      .disabled=${this.disabled}\n      .label=${this.label}\n    >\n      <paper-listbox\n        slot=\"dropdown-content\"\n        attr-for-selected=\"item-value\"\n        .selected=${this.value}\n        @selected-item-changed=${this._valueChanged}\n      >\n        ${this.selector.select.options.map(\n          (item: string) => html`\n            <paper-item .itemValue=${item}> ${item} </paper-item>\n          `\n        )}\n      </paper-listbox>\n    </ha-paper-dropdown-menu>`;\n  }\n\n  private _valueChanged(ev) {\n    if (this.disabled || !ev.detail.value) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: ev.detail.value.itemValue,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-paper-dropdown-menu {\n        width: 100%;\n        min-width: 200px;\n        display: block;\n      }\n      paper-listbox {\n        min-width: 200px;\n      }\n      paper-item {\n        cursor: pointer;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-select\": HaSelectSelector;\n  }\n}\n","// @ts-ignore\nimport chipStyles from \"@material/chips/dist/mdc.chips.min.css\";\nimport \"@material/mwc-button/mwc-button\";\nimport {\n  mdiClose,\n  mdiDevices,\n  mdiPlus,\n  mdiSofa,\n  mdiUnfoldMoreVertical,\n} from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport {\n  HassEntity,\n  HassServiceTarget,\n  UnsubscribeFunc,\n} from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, unsafeCSS } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { ensureArray } from \"../common/ensure-array\";\nimport { computeDomain } from \"../common/entity/compute_domain\";\nimport { computeStateName } from \"../common/entity/compute_state_name\";\nimport {\n  AreaRegistryEntry,\n  subscribeAreaRegistry,\n} from \"../data/area_registry\";\nimport {\n  computeDeviceName,\n  DeviceRegistryEntry,\n  subscribeDeviceRegistry,\n} from \"../data/device_registry\";\nimport {\n  EntityRegistryEntry,\n  subscribeEntityRegistry,\n} from \"../data/entity_registry\";\nimport { SubscribeMixin } from \"../mixins/subscribe-mixin\";\nimport { HomeAssistant } from \"../types\";\nimport \"./device/ha-device-picker\";\nimport type { HaDevicePickerDeviceFilterFunc } from \"./device/ha-device-picker\";\nimport \"./entity/ha-entity-picker\";\nimport type { HaEntityPickerEntityFilterFunc } from \"./entity/ha-entity-picker\";\nimport \"./ha-area-picker\";\nimport \"./ha-icon-button\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-target-picker\")\nexport class HaTargetPicker extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public value?: HassServiceTarget;\n\n  @property() public label?: string;\n\n  /**\n   * Show only targets with entities from specific domains.\n   * @type {Array}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show only targets with entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  @property() public deviceFilter?: HaDevicePickerDeviceFilterFunc;\n\n  @property() public entityRegFilter?: (entity: EntityRegistryEntry) => boolean;\n\n  @property() public entityFilter?: HaEntityPickerEntityFilterFunc;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @state() private _areas?: { [areaId: string]: AreaRegistryEntry };\n\n  @state() private _devices?: {\n    [deviceId: string]: DeviceRegistryEntry;\n  };\n\n  @state() private _entities?: EntityRegistryEntry[];\n\n  @state() private _addMode?: \"area_id\" | \"entity_id\" | \"device_id\";\n\n  @query(\"#input\") private _inputElement?;\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeAreaRegistry(this.hass.connection!, (areas) => {\n        const areaLookup: { [areaId: string]: AreaRegistryEntry } = {};\n        for (const area of areas) {\n          areaLookup[area.area_id] = area;\n        }\n        this._areas = areaLookup;\n      }),\n      subscribeDeviceRegistry(this.hass.connection!, (devices) => {\n        const deviceLookup: { [deviceId: string]: DeviceRegistryEntry } = {};\n        for (const device of devices) {\n          deviceLookup[device.id] = device;\n        }\n        this._devices = deviceLookup;\n      }),\n      subscribeEntityRegistry(this.hass.connection!, (entities) => {\n        this._entities = entities;\n      }),\n    ];\n  }\n\n  protected render() {\n    if (!this._areas || !this._devices || !this._entities) {\n      return html``;\n    }\n    return html`<div class=\"mdc-chip-set items\">\n        ${this.value?.area_id\n          ? ensureArray(this.value.area_id).map((area_id) => {\n              const area = this._areas![area_id];\n              return this._renderChip(\n                \"area_id\",\n                area_id,\n                area?.name || area_id,\n                undefined,\n                mdiSofa\n              );\n            })\n          : \"\"}\n        ${this.value?.device_id\n          ? ensureArray(this.value.device_id).map((device_id) => {\n              const device = this._devices![device_id];\n              return this._renderChip(\n                \"device_id\",\n                device_id,\n                device ? computeDeviceName(device, this.hass) : device_id,\n                undefined,\n                mdiDevices\n              );\n            })\n          : \"\"}\n        ${this.value?.entity_id\n          ? ensureArray(this.value.entity_id).map((entity_id) => {\n              const entity = this.hass.states[entity_id];\n              return this._renderChip(\n                \"entity_id\",\n                entity_id,\n                entity ? computeStateName(entity) : entity_id,\n                entity\n              );\n            })\n          : \"\"}\n      </div>\n      ${this._renderPicker()}\n      <div class=\"mdc-chip-set\">\n        <div\n          class=\"mdc-chip area_id add\"\n          .type=${\"area_id\"}\n          @click=${this._showPicker}\n        >\n          <div class=\"mdc-chip__ripple\"></div>\n          <ha-svg-icon\n            class=\"mdc-chip__icon mdc-chip__icon--leading\"\n            .path=${mdiPlus}\n          ></ha-svg-icon>\n          <span role=\"gridcell\">\n            <span role=\"button\" tabindex=\"0\" class=\"mdc-chip__primary-action\">\n              <span class=\"mdc-chip__text\"\n                >${this.hass.localize(\n                  \"ui.components.target-picker.add_area_id\"\n                )}</span\n              >\n            </span>\n          </span>\n        </div>\n        <div\n          class=\"mdc-chip device_id add\"\n          .type=${\"device_id\"}\n          @click=${this._showPicker}\n        >\n          <div class=\"mdc-chip__ripple\"></div>\n          <ha-svg-icon\n            class=\"mdc-chip__icon mdc-chip__icon--leading\"\n            .path=${mdiPlus}\n          ></ha-svg-icon>\n          <span role=\"gridcell\">\n            <span role=\"button\" tabindex=\"0\" class=\"mdc-chip__primary-action\">\n              <span class=\"mdc-chip__text\"\n                >${this.hass.localize(\n                  \"ui.components.target-picker.add_device_id\"\n                )}</span\n              >\n            </span>\n          </span>\n        </div>\n        <div\n          class=\"mdc-chip entity_id add\"\n          .type=${\"entity_id\"}\n          @click=${this._showPicker}\n        >\n          <div class=\"mdc-chip__ripple\"></div>\n          <ha-svg-icon\n            class=\"mdc-chip__icon mdc-chip__icon--leading\"\n            .path=${mdiPlus}\n          ></ha-svg-icon>\n          <span role=\"gridcell\">\n            <span role=\"button\" tabindex=\"0\" class=\"mdc-chip__primary-action\">\n              <span class=\"mdc-chip__text\"\n                >${this.hass.localize(\n                  \"ui.components.target-picker.add_entity_id\"\n                )}</span\n              >\n            </span>\n          </span>\n        </div>\n      </div>`;\n  }\n\n  private async _showPicker(ev) {\n    this._addMode = ev.currentTarget.type;\n    await this.updateComplete;\n    setTimeout(() => {\n      this._inputElement?.open();\n      this._inputElement?.focus();\n    }, 0);\n  }\n\n  private _renderChip(\n    type: string,\n    id: string,\n    name: string,\n    entityState?: HassEntity,\n    iconPath?: string\n  ) {\n    return html`\n      <div\n        class=\"mdc-chip ${classMap({\n          [type]: true,\n        })}\"\n      >\n        ${iconPath\n          ? html`<ha-svg-icon\n              class=\"mdc-chip__icon mdc-chip__icon--leading\"\n              .path=${iconPath}\n            ></ha-svg-icon>`\n          : \"\"}\n        ${entityState\n          ? html`<ha-state-icon\n              class=\"mdc-chip__icon mdc-chip__icon--leading\"\n              .state=${entityState}\n            ></ha-state-icon>`\n          : \"\"}\n        <span role=\"gridcell\">\n          <span role=\"button\" tabindex=\"0\" class=\"mdc-chip__primary-action\">\n            <span class=\"mdc-chip__text\">${name}</span>\n          </span>\n        </span>\n        ${type === \"entity_id\"\n          ? \"\"\n          : html` <span role=\"gridcell\">\n              <ha-icon-button\n                class=\"expand-btn mdc-chip__icon mdc-chip__icon--trailing\"\n                tabindex=\"-1\"\n                role=\"button\"\n                .label=${this.hass.localize(\n                  \"ui.components.target-picker.expand\"\n                )}\n                .path=${mdiUnfoldMoreVertical}\n                hideTooltip\n                .id=${id}\n                .type=${type}\n                @click=${this._handleExpand}\n              ></ha-icon-button>\n              <paper-tooltip class=\"expand\" animation-delay=\"0\"\n                >${this.hass.localize(\n                  `ui.components.target-picker.expand_${type}`\n                )}</paper-tooltip\n              >\n            </span>`}\n        <span role=\"gridcell\">\n          <ha-icon-button\n            class=\"mdc-chip__icon mdc-chip__icon--trailing\"\n            tabindex=\"-1\"\n            role=\"button\"\n            .label=${this.hass.localize(\"ui.components.target-picker.expand\")}\n            .path=${mdiClose}\n            hideTooltip\n            .id=${id}\n            .type=${type}\n            @click=${this._handleRemove}\n          ></ha-icon-button>\n          <paper-tooltip animation-delay=\"0\"\n            >${this.hass.localize(\n              `ui.components.target-picker.remove_${type}`\n            )}</paper-tooltip\n          >\n        </span>\n      </div>\n    `;\n  }\n\n  private _renderPicker() {\n    switch (this._addMode) {\n      case \"area_id\":\n        return html`<ha-area-picker\n          .hass=${this.hass}\n          id=\"input\"\n          .type=${\"area_id\"}\n          .label=${this.hass.localize(\n            \"ui.components.target-picker.add_area_id\"\n          )}\n          no-add\n          .deviceFilter=${this.deviceFilter}\n          .entityFilter=${this.entityRegFilter}\n          .includeDeviceClasses=${this.includeDeviceClasses}\n          .includeDomains=${this.includeDomains}\n          @value-changed=${this._targetPicked}\n        ></ha-area-picker>`;\n      case \"device_id\":\n        return html`<ha-device-picker\n          .hass=${this.hass}\n          id=\"input\"\n          .type=${\"device_id\"}\n          .label=${this.hass.localize(\n            \"ui.components.target-picker.add_device_id\"\n          )}\n          .deviceFilter=${this.deviceFilter}\n          .entityFilter=${this.entityRegFilter}\n          .includeDeviceClasses=${this.includeDeviceClasses}\n          .includeDomains=${this.includeDomains}\n          @value-changed=${this._targetPicked}\n        ></ha-device-picker>`;\n      case \"entity_id\":\n        return html`<ha-entity-picker\n          .hass=${this.hass}\n          id=\"input\"\n          .type=${\"entity_id\"}\n          .label=${this.hass.localize(\n            \"ui.components.target-picker.add_entity_id\"\n          )}\n          .entityFilter=${this.entityFilter}\n          .includeDeviceClasses=${this.includeDeviceClasses}\n          .includeDomains=${this.includeDomains}\n          @value-changed=${this._targetPicked}\n          allow-custom-entity\n        ></ha-entity-picker>`;\n    }\n    return html``;\n  }\n\n  private _targetPicked(ev) {\n    ev.stopPropagation();\n    if (!ev.detail.value) {\n      return;\n    }\n    const value = ev.detail.value;\n    const target = ev.currentTarget;\n    target.value = \"\";\n    this._addMode = undefined;\n    fireEvent(this, \"value-changed\", {\n      value: this.value\n        ? {\n            ...this.value,\n            [target.type]: this.value[target.type]\n              ? [...ensureArray(this.value[target.type]), value]\n              : value,\n          }\n        : { [target.type]: value },\n    });\n  }\n\n  private _handleExpand(ev) {\n    const target = ev.currentTarget as any;\n    const newDevices: string[] = [];\n    const newEntities: string[] = [];\n    if (target.type === \"area_id\") {\n      Object.values(this._devices!).forEach((device) => {\n        if (\n          device.area_id === target.id &&\n          !this.value!.device_id?.includes(device.id) &&\n          this._deviceMeetsFilter(device)\n        ) {\n          newDevices.push(device.id);\n        }\n      });\n      this._entities!.forEach((entity) => {\n        if (\n          entity.area_id === target.id &&\n          !this.value!.entity_id?.includes(entity.entity_id) &&\n          this._entityRegMeetsFilter(entity)\n        ) {\n          newEntities.push(entity.entity_id);\n        }\n      });\n    } else if (target.type === \"device_id\") {\n      this._entities!.forEach((entity) => {\n        if (\n          entity.device_id === target.id &&\n          !this.value!.entity_id?.includes(entity.entity_id) &&\n          this._entityRegMeetsFilter(entity)\n        ) {\n          newEntities.push(entity.entity_id);\n        }\n      });\n    } else {\n      return;\n    }\n    let value = this.value;\n    if (newEntities.length) {\n      value = this._addItems(value, \"entity_id\", newEntities);\n    }\n    if (newDevices.length) {\n      value = this._addItems(value, \"device_id\", newDevices);\n    }\n    value = this._removeItem(value, target.type, target.id);\n    fireEvent(this, \"value-changed\", { value });\n  }\n\n  private _handleRemove(ev) {\n    const target = ev.currentTarget as any;\n    fireEvent(this, \"value-changed\", {\n      value: this._removeItem(this.value, target.type, target.id),\n    });\n  }\n\n  private _addItems(\n    value: this[\"value\"],\n    type: string,\n    ids: string[]\n  ): this[\"value\"] {\n    return {\n      ...value,\n      [type]: value![type] ? ensureArray(value![type])!.concat(ids) : ids,\n    };\n  }\n\n  private _removeItem(\n    value: this[\"value\"],\n    type: string,\n    id: string\n  ): this[\"value\"] {\n    const newVal = ensureArray(value![type])!.filter(\n      (val) => String(val) !== id\n    );\n    if (newVal.length) {\n      return {\n        ...value,\n        [type]: newVal,\n      };\n    }\n    const val = { ...value }!;\n    delete val[type];\n    if (Object.keys(val).length) {\n      return val;\n    }\n    return undefined;\n  }\n\n  private _deviceMeetsFilter(device: DeviceRegistryEntry): boolean {\n    const devEntities = this._entities?.filter(\n      (entity) => entity.device_id === device.id\n    );\n    if (this.includeDomains) {\n      if (!devEntities || !devEntities.length) {\n        return false;\n      }\n      if (\n        !devEntities.some((entity) =>\n          this.includeDomains!.includes(computeDomain(entity.entity_id))\n        )\n      ) {\n        return false;\n      }\n    }\n\n    if (this.includeDeviceClasses) {\n      if (!devEntities || !devEntities.length) {\n        return false;\n      }\n      if (\n        !devEntities.some((entity) => {\n          const stateObj = this.hass.states[entity.entity_id];\n          if (!stateObj) {\n            return false;\n          }\n          return (\n            stateObj.attributes.device_class &&\n            this.includeDeviceClasses!.includes(\n              stateObj.attributes.device_class\n            )\n          );\n        })\n      ) {\n        return false;\n      }\n    }\n\n    if (this.deviceFilter) {\n      return this.deviceFilter(device);\n    }\n    return true;\n  }\n\n  private _entityRegMeetsFilter(entity: EntityRegistryEntry): boolean {\n    if (entity.entity_category) {\n      return false;\n    }\n    if (\n      this.includeDomains &&\n      !this.includeDomains.includes(computeDomain(entity.entity_id))\n    ) {\n      return false;\n    }\n    if (this.includeDeviceClasses) {\n      const stateObj = this.hass.states[entity.entity_id];\n      if (!stateObj) {\n        return false;\n      }\n      if (\n        !stateObj.attributes.device_class ||\n        !this.includeDeviceClasses!.includes(stateObj.attributes.device_class)\n      ) {\n        return false;\n      }\n    }\n    if (this.entityRegFilter) {\n      return this.entityRegFilter(entity);\n    }\n    return true;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ${unsafeCSS(chipStyles)}\n      .mdc-chip {\n        color: var(--primary-text-color);\n      }\n      .items {\n        z-index: 2;\n      }\n      .mdc-chip-set {\n        padding: 4px 0;\n      }\n      .mdc-chip.add {\n        color: rgba(0, 0, 0, 0.87);\n      }\n      .mdc-chip:not(.add) {\n        cursor: default;\n      }\n      .mdc-chip ha-icon-button {\n        --mdc-icon-button-size: 24px;\n        display: flex;\n        align-items: center;\n        outline: none;\n      }\n      .mdc-chip ha-icon-button ha-svg-icon {\n        border-radius: 50%;\n        background: var(--secondary-text-color);\n      }\n      .mdc-chip__icon.mdc-chip__icon--trailing {\n        width: 16px;\n        height: 16px;\n        --mdc-icon-size: 14px;\n        color: var(--secondary-text-color);\n      }\n      .mdc-chip__icon--leading {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        --mdc-icon-size: 20px;\n        border-radius: 50%;\n        padding: 6px;\n        margin-left: -14px !important;\n      }\n      .expand-btn {\n        margin-right: 0;\n      }\n      .mdc-chip.area_id:not(.add) {\n        border: 2px solid #fed6a4;\n        background: var(--card-background-color);\n      }\n      .mdc-chip.area_id:not(.add) .mdc-chip__icon--leading,\n      .mdc-chip.area_id.add {\n        background: #fed6a4;\n      }\n      .mdc-chip.device_id:not(.add) {\n        border: 2px solid #a8e1fb;\n        background: var(--card-background-color);\n      }\n      .mdc-chip.device_id:not(.add) .mdc-chip__icon--leading,\n      .mdc-chip.device_id.add {\n        background: #a8e1fb;\n      }\n      .mdc-chip.entity_id:not(.add) {\n        border: 2px solid #d2e7b9;\n        background: var(--card-background-color);\n      }\n      .mdc-chip.entity_id:not(.add) .mdc-chip__icon--leading,\n      .mdc-chip.entity_id.add {\n        background: #d2e7b9;\n      }\n      .mdc-chip:hover {\n        z-index: 5;\n      }\n      paper-tooltip.expand {\n        min-width: 200px;\n      }\n      :host([disabled]) .mdc-chip {\n        opacity: var(--light-disabled-opacity);\n        pointer-events: none;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-target-picker\": HaTargetPicker;\n  }\n}\n","import \"@material/mwc-list/mwc-list\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport \"@material/mwc-tab-bar/mwc-tab-bar\";\nimport \"@material/mwc-tab/mwc-tab\";\nimport \"@polymer/paper-input/paper-input\";\nimport {\n  HassEntity,\n  HassServiceTarget,\n  UnsubscribeFunc,\n} from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ConfigEntry, getConfigEntries } from \"../../data/config_entries\";\nimport { DeviceRegistryEntry } from \"../../data/device_registry\";\nimport {\n  EntityRegistryEntry,\n  subscribeEntityRegistry,\n} from \"../../data/entity_registry\";\nimport { TargetSelector } from \"../../data/selector\";\nimport { SubscribeMixin } from \"../../mixins/subscribe-mixin\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-target-picker\";\n\n@customElement(\"ha-selector-target\")\nexport class HaTargetSelector extends SubscribeMixin(LitElement) {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: TargetSelector;\n\n  @property() public value?: HassServiceTarget;\n\n  @property() public label?: string;\n\n  @state() private _entityPlaformLookup?: Record<string, string>;\n\n  @state() private _configEntries?: ConfigEntry[];\n\n  @property({ type: Boolean }) public disabled = false;\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeEntityRegistry(this.hass.connection!, (entities) => {\n        const entityLookup = {};\n        for (const confEnt of entities) {\n          if (!confEnt.platform) {\n            continue;\n          }\n          entityLookup[confEnt.entity_id] = confEnt.platform;\n        }\n        this._entityPlaformLookup = entityLookup;\n      }),\n    ];\n  }\n\n  protected updated(changedProperties) {\n    if (changedProperties.has(\"selector\")) {\n      const oldSelector = changedProperties.get(\"selector\");\n      if (\n        oldSelector !== this.selector &&\n        (this.selector.target.device?.integration ||\n          this.selector.target.entity?.integration)\n      ) {\n        this._loadConfigEntries();\n      }\n    }\n  }\n\n  protected render() {\n    return html`<ha-target-picker\n      .hass=${this.hass}\n      .value=${this.value}\n      .deviceFilter=${this._filterDevices}\n      .entityRegFilter=${this._filterRegEntities}\n      .entityFilter=${this._filterEntities}\n      .includeDeviceClasses=${this.selector.target.entity?.device_class\n        ? [this.selector.target.entity.device_class]\n        : undefined}\n      .includeDomains=${this.selector.target.entity?.domain\n        ? [this.selector.target.entity.domain]\n        : undefined}\n      .disabled=${this.disabled}\n    ></ha-target-picker>`;\n  }\n\n  private _filterEntities = (entity: HassEntity): boolean => {\n    if (\n      this.selector.target.entity?.integration ||\n      this.selector.target.device?.integration\n    ) {\n      if (\n        !this._entityPlaformLookup ||\n        this._entityPlaformLookup[entity.entity_id] !==\n          (this.selector.target.entity?.integration ||\n            this.selector.target.device?.integration)\n      ) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  private _filterRegEntities = (entity: EntityRegistryEntry): boolean => {\n    if (this.selector.target.entity?.integration) {\n      if (entity.platform !== this.selector.target.entity.integration) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  private _filterDevices = (device: DeviceRegistryEntry): boolean => {\n    if (\n      this.selector.target.device?.manufacturer &&\n      device.manufacturer !== this.selector.target.device.manufacturer\n    ) {\n      return false;\n    }\n    if (\n      this.selector.target.device?.model &&\n      device.model !== this.selector.target.device.model\n    ) {\n      return false;\n    }\n    if (\n      this.selector.target.device?.integration ||\n      this.selector.target.entity?.integration\n    ) {\n      if (\n        !this._configEntries?.some((entry) =>\n          device.config_entries.includes(entry.entry_id)\n        )\n      ) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  private async _loadConfigEntries() {\n    this._configEntries = (await getConfigEntries(this.hass)).filter(\n      (entry) =>\n        entry.domain ===\n        (this.selector.target.device?.integration ||\n          this.selector.target.entity?.integration)\n    );\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-target-picker {\n        display: block;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-target\": HaTargetSelector;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-input/paper-textarea\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { StringSelector } from \"../../data/selector\";\nimport { HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-selector-text\")\nexport class HaTextSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public placeholder?: string;\n\n  @property() public selector!: StringSelector;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  protected render() {\n    if (this.selector.text?.multiline) {\n      return html`<paper-textarea\n        .label=${this.label}\n        .placeholder=${this.placeholder}\n        .value=${this.value}\n        .disabled=${this.disabled}\n        @value-changed=${this._handleChange}\n        autocapitalize=\"none\"\n        autocomplete=\"off\"\n        spellcheck=\"false\"\n      ></paper-textarea>`;\n    }\n    return html`<paper-input\n      required\n      .value=${this.value}\n      .placeholder=${this.placeholder}\n      .disabled=${this.disabled}\n      @value-changed=${this._handleChange}\n      .label=${this.label}\n    ></paper-input>`;\n  }\n\n  private _handleChange(ev) {\n    const value = ev.target.value;\n    if (this.value === value) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", { value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-text\": HaTextSelector;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { TimeSelector } from \"../../data/selector\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-time-input\";\n\n@customElement(\"ha-selector-time\")\nexport class HaTimeSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: TimeSelector;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  protected render() {\n    return html`\n      <ha-time-input\n        .value=${this.value}\n        .locale=${this.hass.locale}\n        .disabled=${this.disabled}\n        hide-label\n        enable-second\n      ></ha-time-input>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-time\": HaTimeSelector;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { dynamicElement } from \"../../common/dom/dynamic-element-directive\";\nimport { Selector } from \"../../data/selector\";\nimport { HomeAssistant } from \"../../types\";\nimport \"./ha-selector-action\";\nimport \"./ha-selector-addon\";\nimport \"./ha-selector-area\";\nimport \"./ha-selector-boolean\";\nimport \"./ha-selector-device\";\nimport \"./ha-selector-entity\";\nimport \"./ha-selector-number\";\nimport \"./ha-selector-object\";\nimport \"./ha-selector-select\";\nimport \"./ha-selector-target\";\nimport \"./ha-selector-text\";\nimport \"./ha-selector-time\";\n\n@customElement(\"ha-selector\")\nexport class HaSelector extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public selector!: Selector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public placeholder?: any;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  public focus() {\n    const input = this.shadowRoot!.getElementById(\"selector\");\n    if (!input) {\n      return;\n    }\n    (input as HTMLElement).focus();\n  }\n\n  private get _type() {\n    return Object.keys(this.selector)[0];\n  }\n\n  protected render() {\n    return html`\n      ${dynamicElement(`ha-selector-${this._type}`, {\n        hass: this.hass,\n        selector: this.selector,\n        value: this.value,\n        label: this.label,\n        placeholder: this.placeholder,\n        disabled: this.disabled,\n        id: \"selector\",\n      })}\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector\": HaSelector;\n  }\n}\n","import { mdiHelpCircle } from \"@mdi/js\";\nimport {\n  HassService,\n  HassServices,\n  HassServiceTarget,\n} from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { computeDomain } from \"../common/entity/compute_domain\";\nimport { computeObjectId } from \"../common/entity/compute_object_id\";\nimport {\n  fetchIntegrationManifest,\n  IntegrationManifest,\n} from \"../data/integration\";\nimport { Selector } from \"../data/selector\";\nimport { PolymerChangedEvent } from \"../polymer-types\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-checkbox\";\nimport \"./ha-icon-button\";\nimport \"./ha-selector/ha-selector\";\nimport \"./ha-service-picker\";\nimport \"./ha-settings-row\";\nimport \"./ha-yaml-editor\";\nimport type { HaYamlEditor } from \"./ha-yaml-editor\";\n\nconst showOptionalToggle = (field) =>\n  field.selector &&\n  !field.required &&\n  !(\"boolean\" in field.selector && field.default);\n\ninterface ExtHassService extends Omit<HassService, \"fields\"> {\n  fields: {\n    key: string;\n    name?: string;\n    description: string;\n    required?: boolean;\n    advanced?: boolean;\n    default?: any;\n    example?: any;\n    selector?: Selector;\n  }[];\n  hasSelector: string[];\n}\n\n@customElement(\"ha-service-control\")\nexport class HaServiceControl extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public value?: {\n    service: string;\n    target?: HassServiceTarget;\n    data?: Record<string, any>;\n  };\n\n  @state() private _value!: this[\"value\"];\n\n  @property({ reflect: true, type: Boolean }) public narrow!: boolean;\n\n  @property({ type: Boolean }) public showAdvanced?: boolean;\n\n  @state() private _checkedKeys = new Set();\n\n  @state() private _manifest?: IntegrationManifest;\n\n  @query(\"ha-yaml-editor\") private _yamlEditor?: HaYamlEditor;\n\n  protected updated(changedProperties: PropertyValues<this>) {\n    if (!changedProperties.has(\"value\")) {\n      return;\n    }\n    const oldValue = changedProperties.get(\"value\") as\n      | undefined\n      | this[\"value\"];\n\n    if (oldValue?.service !== this.value?.service) {\n      this._checkedKeys = new Set();\n    }\n\n    const serviceData = this._getServiceInfo(\n      this.value?.service,\n      this.hass.services\n    );\n\n    // Fetch the manifest if we have a service selected and the service domain changed.\n    // If no service is selected, clear the manifest.\n    if (this.value?.service) {\n      if (\n        !oldValue?.service ||\n        computeDomain(this.value.service) !== computeDomain(oldValue.service)\n      ) {\n        this._fetchManifest(computeDomain(this.value?.service));\n      }\n    } else {\n      this._manifest = undefined;\n    }\n\n    if (\n      serviceData &&\n      \"target\" in serviceData &&\n      (this.value?.data?.entity_id ||\n        this.value?.data?.area_id ||\n        this.value?.data?.device_id)\n    ) {\n      const target = {\n        ...this.value.target,\n      };\n\n      if (this.value.data.entity_id && !this.value.target?.entity_id) {\n        target.entity_id = this.value.data.entity_id;\n      }\n      if (this.value.data.area_id && !this.value.target?.area_id) {\n        target.area_id = this.value.data.area_id;\n      }\n      if (this.value.data.device_id && !this.value.target?.device_id) {\n        target.device_id = this.value.data.device_id;\n      }\n\n      this._value = {\n        ...this.value,\n        target,\n        data: { ...this.value.data },\n      };\n\n      delete this._value.data!.entity_id;\n      delete this._value.data!.device_id;\n      delete this._value.data!.area_id;\n    } else {\n      this._value = this.value;\n    }\n\n    if (this._value?.data) {\n      const yamlEditor = this._yamlEditor;\n      if (yamlEditor && yamlEditor.value !== this._value.data) {\n        yamlEditor.setValue(this._value.data);\n      }\n    }\n  }\n\n  private _getServiceInfo = memoizeOne(\n    (\n      service?: string,\n      serviceDomains?: HassServices\n    ): ExtHassService | undefined => {\n      if (!service || !serviceDomains) {\n        return undefined;\n      }\n      const domain = computeDomain(service);\n      const serviceName = computeObjectId(service);\n      if (!(domain in serviceDomains)) {\n        return undefined;\n      }\n      if (!(serviceName in serviceDomains[domain])) {\n        return undefined;\n      }\n\n      const fields = Object.entries(\n        serviceDomains[domain][serviceName].fields\n      ).map(([key, value]) => ({\n        key,\n        ...value,\n        selector: value.selector as Selector | undefined,\n      }));\n      return {\n        ...serviceDomains[domain][serviceName],\n        fields,\n        hasSelector: fields.length\n          ? fields.filter((field) => field.selector).map((field) => field.key)\n          : [],\n      };\n    }\n  );\n\n  protected render() {\n    const serviceData = this._getServiceInfo(\n      this._value?.service,\n      this.hass.services\n    );\n\n    const shouldRenderServiceDataYaml =\n      (serviceData?.fields.length && !serviceData.hasSelector.length) ||\n      (serviceData &&\n        Object.keys(this._value?.data || {}).some(\n          (key) => !serviceData!.hasSelector.includes(key)\n        ));\n\n    const entityId =\n      shouldRenderServiceDataYaml &&\n      serviceData?.fields.find((field) => field.key === \"entity_id\");\n\n    const hasOptional = Boolean(\n      !shouldRenderServiceDataYaml &&\n        serviceData?.fields.some((field) => showOptionalToggle(field))\n    );\n\n    return html`<ha-service-picker\n        .hass=${this.hass}\n        .value=${this._value?.service}\n        @value-changed=${this._serviceChanged}\n      ></ha-service-picker>\n      <div class=\"description\">\n        <p>${serviceData?.description}</p>\n        ${this._manifest\n          ? html` <a\n              href=${this._manifest.documentation}\n              title=${this.hass.localize(\n                \"ui.components.service-control.integration_doc\"\n              )}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <ha-icon-button\n                .path=${mdiHelpCircle}\n                class=\"help-icon\"\n              ></ha-icon-button>\n            </a>`\n          : \"\"}\n      </div>\n      ${serviceData && \"target\" in serviceData\n        ? html`<ha-settings-row .narrow=${this.narrow}>\n            ${hasOptional\n              ? html`<div slot=\"prefix\" class=\"checkbox-spacer\"></div>`\n              : \"\"}\n            <span slot=\"heading\"\n              >${this.hass.localize(\n                \"ui.components.service-control.target\"\n              )}</span\n            >\n            <span slot=\"description\"\n              >${this.hass.localize(\n                \"ui.components.service-control.target_description\"\n              )}</span\n            ><ha-selector\n              .hass=${this.hass}\n              .selector=${serviceData.target\n                ? { target: serviceData.target }\n                : { target: {} }}\n              @value-changed=${this._targetChanged}\n              .value=${this._value?.target}\n            ></ha-selector\n          ></ha-settings-row>`\n        : entityId\n        ? html`<ha-entity-picker\n            .hass=${this.hass}\n            .value=${this._value?.data?.entity_id}\n            .label=${entityId.description}\n            @value-changed=${this._entityPicked}\n            allow-custom-entity\n          ></ha-entity-picker>`\n        : \"\"}\n      ${shouldRenderServiceDataYaml\n        ? html`<ha-yaml-editor\n            .label=${this.hass.localize(\n              \"ui.components.service-control.service_data\"\n            )}\n            .name=${\"data\"}\n            .defaultValue=${this._value?.data}\n            @value-changed=${this._dataChanged}\n          ></ha-yaml-editor>`\n        : serviceData?.fields.map((dataField) => {\n            const showOptional = showOptionalToggle(dataField);\n            return dataField.selector &&\n              (!dataField.advanced ||\n                this.showAdvanced ||\n                (this._value?.data &&\n                  this._value.data[dataField.key] !== undefined))\n              ? html`<ha-settings-row .narrow=${this.narrow}>\n                  ${!showOptional\n                    ? hasOptional\n                      ? html`<div slot=\"prefix\" class=\"checkbox-spacer\"></div>`\n                      : \"\"\n                    : html`<ha-checkbox\n                        .key=${dataField.key}\n                        .checked=${this._checkedKeys.has(dataField.key) ||\n                        (this._value?.data &&\n                          this._value.data[dataField.key] !== undefined)}\n                        @change=${this._checkboxChanged}\n                        slot=\"prefix\"\n                      ></ha-checkbox>`}\n                  <span slot=\"heading\">${dataField.name || dataField.key}</span>\n                  <span slot=\"description\">${dataField?.description}</span>\n                  <ha-selector\n                    .disabled=${showOptional &&\n                    !this._checkedKeys.has(dataField.key) &&\n                    (!this._value?.data ||\n                      this._value.data[dataField.key] === undefined)}\n                    .hass=${this.hass}\n                    .selector=${dataField.selector}\n                    .key=${dataField.key}\n                    @value-changed=${this._serviceDataChanged}\n                    .value=${this._value?.data &&\n                    this._value.data[dataField.key] !== undefined\n                      ? this._value.data[dataField.key]\n                      : dataField.default}\n                  ></ha-selector>\n                </ha-settings-row>`\n              : \"\";\n          })}`;\n  }\n\n  private _checkboxChanged(ev) {\n    const checked = ev.currentTarget.checked;\n    const key = ev.currentTarget.key;\n    let data;\n\n    if (checked) {\n      this._checkedKeys.add(key);\n      const defaultValue = this._getServiceInfo(\n        this._value?.service,\n        this.hass.services\n      )?.fields.find((field) => field.key === key)?.default;\n      if (defaultValue) {\n        data = {\n          ...this._value?.data,\n          [key]: defaultValue,\n        };\n      }\n    } else {\n      this._checkedKeys.delete(key);\n      data = { ...this._value?.data };\n      delete data[key];\n    }\n    if (data) {\n      fireEvent(this, \"value-changed\", {\n        value: {\n          ...this._value,\n          data,\n        },\n      });\n    }\n    this.requestUpdate(\"_checkedKeys\");\n  }\n\n  private _serviceChanged(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    if (ev.detail.value === this._value?.service) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: { service: ev.detail.value || \"\" },\n    });\n  }\n\n  private _entityPicked(ev: CustomEvent) {\n    ev.stopPropagation();\n    const newValue = ev.detail.value;\n    if (this._value?.data?.entity_id === newValue) {\n      return;\n    }\n    let value;\n    if (!newValue && this._value?.data) {\n      value = { ...this._value };\n      delete value.data.entity_id;\n    } else {\n      value = {\n        ...this._value,\n        data: { ...this._value?.data, entity_id: ev.detail.value },\n      };\n    }\n    fireEvent(this, \"value-changed\", {\n      value,\n    });\n  }\n\n  private _targetChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const newValue = ev.detail.value;\n    if (this._value?.target === newValue) {\n      return;\n    }\n    let value;\n    if (!newValue) {\n      value = { ...this._value };\n      delete value.target;\n    } else {\n      value = { ...this._value, target: ev.detail.value };\n    }\n    fireEvent(this, \"value-changed\", {\n      value,\n    });\n  }\n\n  private _serviceDataChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const key = (ev.currentTarget as any).key;\n    const value = ev.detail.value;\n    if (\n      this._value?.data?.[key] === value ||\n      (!this._value?.data?.[key] && (value === \"\" || value === undefined))\n    ) {\n      return;\n    }\n\n    const data = { ...this._value?.data, [key]: value };\n\n    if (value === \"\" || value === undefined) {\n      delete data[key];\n    }\n\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this._value,\n        data,\n      },\n    });\n  }\n\n  private _dataChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    if (!ev.detail.isValid) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this._value,\n        data: ev.detail.value,\n      },\n    });\n  }\n\n  private async _fetchManifest(integration: string) {\n    this._manifest = undefined;\n    try {\n      this._manifest = await fetchIntegrationManifest(this.hass, integration);\n    } catch (err: any) {\n      // Ignore if loading manifest fails. Probably bad JSON in manifest\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-settings-row {\n        padding: var(--service-control-padding, 0 16px);\n      }\n      ha-settings-row {\n        --paper-time-input-justify-content: flex-end;\n        border-top: var(\n          --service-control-items-border-top,\n          1px solid var(--divider-color)\n        );\n      }\n      ha-service-picker,\n      ha-entity-picker,\n      ha-yaml-editor {\n        display: block;\n        margin: var(--service-control-padding, 0 16px);\n      }\n      ha-yaml-editor {\n        padding: 16px 0;\n      }\n      p {\n        margin: var(--service-control-padding, 0 16px);\n        padding: 16px 0;\n      }\n      :host(:not([narrow])) ha-settings-row paper-input {\n        width: 60%;\n      }\n      :host(:not([narrow])) ha-settings-row ha-selector {\n        width: 60%;\n      }\n      .checkbox-spacer {\n        width: 32px;\n      }\n      ha-checkbox {\n        margin-left: -16px;\n      }\n      .help-icon {\n        color: var(--secondary-text-color);\n      }\n      .description {\n        justify-content: space-between;\n        display: flex;\n        align-items: center;\n        padding-right: 2px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-service-control\": HaServiceControl;\n  }\n}\n","import { mdiCheck } from \"@mdi/js\";\nimport { html, LitElement } from \"lit\";\nimport { ComboBoxLitRenderer } from \"lit-vaadin-helpers\";\nimport { property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { LocalizeFunc } from \"../common/translations/localize\";\nimport { domainToName } from \"../data/integration\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-combo-box\";\n\nconst rowRenderer: ComboBoxLitRenderer<{ service: string; name: string }> = (\n  item\n  // eslint-disable-next-line lit/prefer-static-styles\n) => html`<style>\n    paper-item {\n      padding: 0;\n      margin: -10px;\n      margin-left: 0px;\n    }\n    #content {\n      display: flex;\n      align-items: center;\n    }\n    :host([selected]) paper-item {\n      margin-left: 10px;\n    }\n    ha-svg-icon {\n      padding-left: 2px;\n      margin-right: -2px;\n      color: var(--secondary-text-color);\n    }\n    :host(:not([selected])) ha-svg-icon {\n      display: none;\n    }\n    :host([selected]) paper-icon-item {\n      margin-left: 0;\n    }\n  </style>\n  <ha-svg-icon .path=${mdiCheck}></ha-svg-icon>\n  <paper-item>\n    <paper-item-body two-line>\n      ${item.name}\n      <span secondary>${item.name === item.service ? \"\" : item.service}</span>\n    </paper-item-body>\n  </paper-item>`;\n\nclass HaServicePicker extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public value?: string;\n\n  @state() private _filter?: string;\n\n  protected render() {\n    return html`\n      <ha-combo-box\n        .hass=${this.hass}\n        .label=${this.hass.localize(\"ui.components.service-picker.service\")}\n        .filteredItems=${this._filteredServices(\n          this.hass.localize,\n          this.hass.services,\n          this._filter\n        )}\n        .value=${this.value}\n        .renderer=${rowRenderer}\n        item-value-path=\"service\"\n        item-label-path=\"name\"\n        allow-custom-value\n        @filter-changed=${this._filterChanged}\n        @value-changed=${this._valueChanged}\n      ></ha-combo-box>\n    `;\n  }\n\n  private _services = memoizeOne(\n    (\n      localize: LocalizeFunc,\n      services: HomeAssistant[\"services\"]\n    ): {\n      service: string;\n      name: string;\n    }[] => {\n      if (!services) {\n        return [];\n      }\n      const result: { service: string; name: string }[] = [];\n\n      Object.keys(services)\n        .sort()\n        .forEach((domain) => {\n          const services_keys = Object.keys(services[domain]).sort();\n\n          for (const service of services_keys) {\n            result.push({\n              service: `${domain}.${service}`,\n              name: `${domainToName(localize, domain)}: ${\n                services[domain][service].name || service\n              }`,\n            });\n          }\n        });\n\n      return result;\n    }\n  );\n\n  private _filteredServices = memoizeOne(\n    (\n      localize: LocalizeFunc,\n      services: HomeAssistant[\"services\"],\n      filter?: string\n    ) => {\n      if (!services) {\n        return [];\n      }\n      const processedServices = this._services(localize, services);\n\n      if (!filter) {\n        return processedServices;\n      }\n      return processedServices.filter(\n        (service) =>\n          service.service.toLowerCase().includes(filter) ||\n          service.name?.toLowerCase().includes(filter)\n      );\n    }\n  );\n\n  private _filterChanged(ev: CustomEvent): void {\n    this._filter = ev.detail.value.toLowerCase();\n  }\n\n  private _valueChanged(ev) {\n    this.value = ev.detail.value;\n    fireEvent(this, \"change\");\n    fireEvent(this, \"value-changed\", { value: this.value });\n  }\n}\n\ncustomElements.define(\"ha-service-picker\", HaServicePicker);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-service-picker\": HaServicePicker;\n  }\n}\n","import \"@polymer/paper-item/paper-item-body\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-settings-row\")\nexport class HaSettingsRow extends LitElement {\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @property({ type: Boolean, attribute: \"three-line\" })\n  public threeLine = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"prefix-wrap\">\n        <slot name=\"prefix\"></slot>\n        <paper-item-body\n          ?two-line=${!this.threeLine}\n          ?three-line=${this.threeLine}\n        >\n          <slot name=\"heading\"></slot>\n          <div secondary><slot name=\"description\"></slot></div>\n        </paper-item-body>\n      </div>\n      <slot></slot>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n        padding: 0 16px;\n        align-content: normal;\n        align-self: auto;\n        align-items: center;\n      }\n      paper-item-body {\n        padding: 8px 16px 8px 0;\n      }\n      paper-item-body[two-line] {\n        min-height: calc(\n          var(--paper-item-body-two-line-min-height, 72px) - 16px\n        );\n        flex: 1;\n      }\n      :host([narrow]) {\n        align-items: normal;\n        flex-direction: column;\n        border-top: 1px solid var(--divider-color);\n        padding-bottom: 8px;\n      }\n      ::slotted(ha-switch) {\n        padding: 16px 0;\n      }\n      div[secondary] {\n        white-space: normal;\n      }\n      .prefix-wrap {\n        display: contents;\n      }\n      :host([narrow]) .prefix-wrap {\n        display: flex;\n        align-items: center;\n      }\n    `;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-settings-row\": HaSettingsRow;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { useAmPm } from \"../common/datetime/use_am_pm\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./paper-time-input\";\nimport { FrontendLocaleData } from \"../data/translation\";\n\n@customElement(\"ha-time-input\")\nexport class HaTimeInput extends LitElement {\n  @property() public locale!: FrontendLocaleData;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean, attribute: \"hide-label\" }) public hideLabel =\n    false;\n\n  @property({ type: Boolean, attribute: \"enable-second\" })\n  public enableSecond = false;\n\n  protected render() {\n    const useAMPM = useAmPm(this.locale);\n\n    const parts = this.value?.split(\":\") || [];\n    let hours = parts[0];\n    const numberHours = Number(parts[0]);\n    if (numberHours && useAMPM && numberHours > 12 && numberHours < 24) {\n      hours = String(numberHours - 12).padStart(2, \"0\");\n    }\n    if (useAMPM && numberHours === 0) {\n      hours = \"12\";\n    }\n\n    return html`\n      <paper-time-input\n        .label=${this.label}\n        .hour=${hours}\n        .min=${parts[1]}\n        .sec=${parts[2]}\n        .format=${useAMPM ? 12 : 24}\n        .amPm=${useAMPM && (numberHours >= 12 ? \"PM\" : \"AM\")}\n        .disabled=${this.disabled}\n        @change=${this._timeChanged}\n        @am-pm-changed=${this._timeChanged}\n        .hideLabel=${this.hideLabel}\n        .enableSecond=${this.enableSecond}\n      ></paper-time-input>\n    `;\n  }\n\n  private _timeChanged(ev) {\n    let value = ev.target.value;\n    const useAMPM = useAmPm(this.locale);\n    let hours = Number(ev.target.hour || 0);\n    if (value && useAMPM) {\n      if (ev.target.amPm === \"PM\" && hours < 12) {\n        hours += 12;\n      }\n      if (ev.target.amPm === \"AM\" && hours === 12) {\n        hours = 0;\n      }\n      value = `${hours.toString().padStart(2, \"0\")}:${ev.target.min || \"00\"}:${\n        ev.target.sec || \"00\"\n      }`;\n    }\n    if (value === this.value) {\n      return;\n    }\n    this.value = value;\n    fireEvent(this, \"change\");\n    fireEvent(this, \"value-changed\", {\n      value,\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-time-input\": HaTimeInput;\n  }\n}\n","import { DEFAULT_SCHEMA, dump, load, Schema } from \"js-yaml\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-code-editor\";\n\nconst isEmpty = (obj: Record<string, unknown>): boolean => {\n  if (typeof obj !== \"object\") {\n    return false;\n  }\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n@customElement(\"ha-yaml-editor\")\nexport class HaYamlEditor extends LitElement {\n  @property() public value?: any;\n\n  @property({ attribute: false }) public yamlSchema: Schema = DEFAULT_SCHEMA;\n\n  @property() public defaultValue?: any;\n\n  @property() public isValid = true;\n\n  @property() public label?: string;\n\n  @state() private _yaml = \"\";\n\n  public setValue(value): void {\n    try {\n      this._yaml =\n        value && !isEmpty(value)\n          ? dump(value, { schema: this.yamlSchema })\n          : \"\";\n    } catch (err: any) {\n      // eslint-disable-next-line no-console\n      console.error(err, value);\n      alert(`There was an error converting to YAML: ${err}`);\n    }\n  }\n\n  protected firstUpdated(): void {\n    if (this.defaultValue) {\n      this.setValue(this.defaultValue);\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (this._yaml === undefined) {\n      return html``;\n    }\n    return html`\n      ${this.label ? html`<p>${this.label}</p>` : \"\"}\n      <ha-code-editor\n        .value=${this._yaml}\n        mode=\"yaml\"\n        .error=${this.isValid === false}\n        @value-changed=${this._onChange}\n      ></ha-code-editor>\n    `;\n  }\n\n  private _onChange(ev: CustomEvent): void {\n    ev.stopPropagation();\n    this._yaml = ev.detail.value;\n    let parsed;\n    let isValid = true;\n\n    if (this._yaml) {\n      try {\n        parsed = load(this._yaml, { schema: this.yamlSchema });\n      } catch (err: any) {\n        // Invalid YAML\n        isValid = false;\n      }\n    } else {\n      parsed = {};\n    }\n\n    this.value = parsed;\n    this.isValid = isValid;\n\n    fireEvent(this, \"value-changed\", { value: parsed, isValid } as any);\n  }\n\n  get yaml() {\n    return this._yaml;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-yaml-editor\": HaYamlEditor;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { computeStateDomain } from \"../../common/entity/compute_state_domain\";\nimport { computeUserInitials, User } from \"../../data/user\";\nimport { CurrentUser, HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-user-badge\")\nclass UserBadge extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public user?: User | CurrentUser;\n\n  @state() private _personPicture?: string;\n\n  private _personEntityId?: string;\n\n  public willUpdate(changedProps: PropertyValues<this>) {\n    super.willUpdate(changedProps);\n    if (changedProps.has(\"user\")) {\n      this._getPersonPicture();\n      return;\n    }\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (\n      this._personEntityId &&\n      oldHass &&\n      this.hass.states[this._personEntityId] !==\n        oldHass.states[this._personEntityId]\n    ) {\n      const entityState = this.hass.states[this._personEntityId];\n      if (entityState) {\n        this._personPicture = entityState.attributes.entity_picture;\n      } else {\n        this._getPersonPicture();\n      }\n    } else if (!this._personEntityId && oldHass) {\n      this._getPersonPicture();\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this.user) {\n      return html``;\n    }\n    const picture = this._personPicture;\n\n    if (picture) {\n      return html`<div\n        style=${styleMap({ backgroundImage: `url(${picture})` })}\n        class=\"picture\"\n      ></div>`;\n    }\n    const initials = computeUserInitials(this.user.name);\n    return html`<div\n      class=\"initials ${classMap({ long: initials!.length > 2 })}\"\n    >\n      ${initials}\n    </div>`;\n  }\n\n  private _getPersonPicture() {\n    this._personEntityId = undefined;\n    this._personPicture = undefined;\n    if (!this.hass || !this.user) {\n      return;\n    }\n    for (const entity of Object.values(this.hass.states)) {\n      if (\n        entity.attributes.user_id === this.user.id &&\n        computeStateDomain(entity) === \"person\"\n      ) {\n        this._personEntityId = entity.entity_id;\n        this._personPicture = entity.attributes.entity_picture;\n        break;\n      }\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: contents;\n      }\n      .picture {\n        width: 40px;\n        height: 40px;\n        background-size: cover;\n        border-radius: 50%;\n      }\n      .initials {\n        display: inline-block;\n        box-sizing: border-box;\n        width: 40px;\n        line-height: 40px;\n        border-radius: 50%;\n        text-align: center;\n        background-color: var(--light-primary-color);\n        text-decoration: none;\n        color: var(--text-light-primary-color, var(--primary-text-color));\n        overflow: hidden;\n      }\n      .initials.long {\n        font-size: 80%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-user-badge\": UserBadge;\n  }\n}\n","import \"@polymer/paper-dropdown-menu/paper-dropdown-menu-light\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { stringCompare } from \"../../common/string/compare\";\nimport { fetchUsers, User } from \"../../data/user\";\nimport { HomeAssistant } from \"../../types\";\nimport \"./ha-user-badge\";\n\nclass HaUserPicker extends LitElement {\n  public hass?: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public noUserLabel?: string;\n\n  @property() public value = \"\";\n\n  @property() public users?: User[];\n\n  @property({ type: Boolean }) public disabled = false;\n\n  private _sortedUsers = memoizeOne((users?: User[]) => {\n    if (!users) {\n      return [];\n    }\n\n    return users\n      .filter((user) => !user.system_generated)\n      .sort((a, b) => stringCompare(a.name, b.name));\n  });\n\n  protected render(): TemplateResult {\n    return html`\n      <paper-dropdown-menu-light\n        .label=${this.label}\n        .disabled=${this.disabled}\n      >\n        <paper-listbox\n          slot=\"dropdown-content\"\n          .selected=${this.value}\n          attr-for-selected=\"data-user-id\"\n          @iron-select=${this._userChanged}\n        >\n          <paper-icon-item data-user-id=\"\">\n            ${this.noUserLabel ||\n            this.hass?.localize(\"ui.components.user-picker.no_user\")}\n          </paper-icon-item>\n          ${this._sortedUsers(this.users).map(\n            (user) => html`\n              <paper-icon-item data-user-id=${user.id}>\n                <ha-user-badge\n                  .hass=${this.hass}\n                  .user=${user}\n                  slot=\"item-icon\"\n                ></ha-user-badge>\n                ${user.name}\n              </paper-icon-item>\n            `\n          )}\n        </paper-listbox>\n      </paper-dropdown-menu-light>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    if (this.users === undefined) {\n      fetchUsers(this.hass!).then((users) => {\n        this.users = users;\n      });\n    }\n  }\n\n  private _userChanged(ev) {\n    const newValue = ev.detail.item.dataset.userId;\n\n    if (newValue !== this.value) {\n      this.value = ev.detail.value;\n      setTimeout(() => {\n        fireEvent(this, \"value-changed\", { value: newValue });\n        fireEvent(this, \"change\");\n      }, 0);\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n      }\n      paper-dropdown-menu-light {\n        display: block;\n      }\n      paper-listbox {\n        min-width: 200px;\n      }\n      paper-icon-item {\n        cursor: pointer;\n      }\n    `;\n  }\n}\n\ncustomElements.define(\"ha-user-picker\", HaUserPicker);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-user-picker\": HaUserPicker;\n  }\n}\n","import { mdiClose } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { guard } from \"lit/directives/guard\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { fetchUsers, User } from \"../../data/user\";\nimport type { PolymerChangedEvent } from \"../../polymer-types\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-icon-button\";\nimport \"./ha-user-picker\";\n\n@customElement(\"ha-users-picker\")\nclass HaUsersPickerLight extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public value?: string[];\n\n  @property({ attribute: \"picked-user-label\" })\n  public pickedUserLabel?: string;\n\n  @property({ attribute: \"pick-user-label\" })\n  public pickUserLabel?: string;\n\n  @property({ attribute: false })\n  public users?: User[];\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    if (this.users === undefined) {\n      fetchUsers(this.hass!).then((users) => {\n        this.users = users;\n      });\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this.users) {\n      return html``;\n    }\n\n    const notSelectedUsers = this._notSelectedUsers(this.users, this.value);\n    return html`\n      ${guard([notSelectedUsers], () =>\n        this.value?.map(\n          (user_id, idx) => html`\n            <div>\n              <ha-user-picker\n                .label=${this.pickedUserLabel}\n                .noUserLabel=${this.hass!.localize(\n                  \"ui.components.user-picker.remove_user\"\n                )}\n                .index=${idx}\n                .hass=${this.hass}\n                .value=${user_id}\n                .users=${this._notSelectedUsersAndSelected(\n                  user_id,\n                  this.users,\n                  notSelectedUsers\n                )}\n                @value-changed=${this._userChanged}\n              ></ha-user-picker>\n              <ha-icon-button\n                .userId=${user_id}\n                .label=${this.hass!.localize(\n                  \"ui.components.user-picker.remove_user\"\n                )}\n                .path=${mdiClose}\n                @click=${this._removeUser}\n              >\n                ></ha-icon-button\n              >\n            </div>\n          `\n        )\n      )}\n      <ha-user-picker\n        .noUserLabel=${this.pickUserLabel ||\n        this.hass!.localize(\"ui.components.user-picker.add_user\")}\n        .hass=${this.hass}\n        .users=${notSelectedUsers}\n        .disabled=${!notSelectedUsers?.length}\n        @value-changed=${this._addUser}\n      ></ha-user-picker>\n    `;\n  }\n\n  private _notSelectedUsers = memoizeOne(\n    (users?: User[], currentUsers?: string[]) =>\n      currentUsers\n        ? users?.filter(\n            (user) => !user.system_generated && !currentUsers.includes(user.id)\n          )\n        : users?.filter((user) => !user.system_generated)\n  );\n\n  private _notSelectedUsersAndSelected = (\n    userId: string,\n    users?: User[],\n    notSelected?: User[]\n  ) => {\n    const selectedUser = users?.find((user) => user.id === userId);\n    if (selectedUser) {\n      return notSelected ? [...notSelected, selectedUser] : [selectedUser];\n    }\n    return notSelected;\n  };\n\n  private get _currentUsers() {\n    return this.value || [];\n  }\n\n  private async _updateUsers(users) {\n    this.value = users;\n    fireEvent(this, \"value-changed\", {\n      value: users,\n    });\n  }\n\n  private _userChanged(event: PolymerChangedEvent<string>) {\n    event.stopPropagation();\n    const index = (event.currentTarget as any).index;\n    const newValue = event.detail.value;\n    const newUsers = [...this._currentUsers];\n    if (newValue === \"\") {\n      newUsers.splice(index, 1);\n    } else {\n      newUsers.splice(index, 1, newValue);\n    }\n    this._updateUsers(newUsers);\n  }\n\n  private async _addUser(event: PolymerChangedEvent<string>) {\n    event.stopPropagation();\n    const toAdd = event.detail.value;\n    (event.currentTarget as any).value = \"\";\n    if (!toAdd) {\n      return;\n    }\n    const currentUsers = this._currentUsers;\n    if (currentUsers.includes(toAdd)) {\n      return;\n    }\n\n    this._updateUsers([...currentUsers, toAdd]);\n  }\n\n  private _removeUser(event) {\n    const userId = (event.currentTarget as any).userId;\n    this._updateUsers(this._currentUsers.filter((user) => user !== userId));\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n      }\n      div {\n        display: flex;\n        align-items: center;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-users-picker\": HaUsersPickerLight;\n  }\n}\n","import { ActionDetail } from \"@material/mwc-list/mwc-list-foundation\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { mdiArrowDown, mdiArrowUp, mdiDotsVertical } from \"@mdi/js\";\nimport \"@material/mwc-select\";\nimport type { Select } from \"@material/mwc-select\";\nimport { css, CSSResultGroup, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { dynamicElement } from \"../../../../common/dom/dynamic-element-directive\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { stringCompare } from \"../../../../common/string/compare\";\nimport { handleStructError } from \"../../../../common/structs/handle-errors\";\nimport { LocalizeFunc } from \"../../../../common/translations/localize\";\nimport \"../../../../components/ha-button-menu\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-alert\";\nimport \"../../../../components/ha-icon-button\";\nimport type { HaYamlEditor } from \"../../../../components/ha-yaml-editor\";\nimport type { Action } from \"../../../../data/script\";\nimport { showConfirmationDialog } from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport \"./types/ha-automation-action-choose\";\nimport \"./types/ha-automation-action-condition\";\nimport \"./types/ha-automation-action-delay\";\nimport \"./types/ha-automation-action-device_id\";\nimport \"./types/ha-automation-action-event\";\nimport \"./types/ha-automation-action-repeat\";\nimport \"./types/ha-automation-action-scene\";\nimport \"./types/ha-automation-action-service\";\nimport \"./types/ha-automation-action-wait_for_trigger\";\nimport \"./types/ha-automation-action-wait_template\";\n\nconst OPTIONS = [\n  \"condition\",\n  \"delay\",\n  \"event\",\n  \"scene\",\n  \"service\",\n  \"wait_template\",\n  \"wait_for_trigger\",\n  \"repeat\",\n  \"choose\",\n  \"device_id\",\n];\n\nconst getType = (action: Action | undefined) =>\n  action ? OPTIONS.find((option) => option in action) : undefined;\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"move-action\": { direction: \"up\" | \"down\" };\n  }\n}\n\nexport interface ActionElement extends LitElement {\n  action: Action;\n}\n\nexport const handleChangeEvent = (element: ActionElement, ev: CustomEvent) => {\n  ev.stopPropagation();\n  const name = (ev.target as any)?.name;\n  if (!name) {\n    return;\n  }\n  const newVal = ev.detail.value;\n\n  if ((element.action[name] || \"\") === newVal) {\n    return;\n  }\n\n  let newAction: Action;\n  if (!newVal) {\n    newAction = { ...element.action };\n    delete newAction[name];\n  } else {\n    newAction = { ...element.action, [name]: newVal };\n  }\n  fireEvent(element, \"value-changed\", { value: newAction });\n};\n\n@customElement(\"ha-automation-action-row\")\nexport default class HaAutomationActionRow extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public action!: Action;\n\n  @property() public index!: number;\n\n  @property() public totalActions!: number;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @state() private _warnings?: string[];\n\n  @state() private _uiModeAvailable = true;\n\n  @state() private _yamlMode = false;\n\n  @query(\"ha-yaml-editor\") private _yamlEditor?: HaYamlEditor;\n\n  private _processedTypes = memoizeOne(\n    (localize: LocalizeFunc): [string, string][] =>\n      OPTIONS.map(\n        (action) =>\n          [\n            action,\n            localize(\n              `ui.panel.config.automation.editor.actions.type.${action}.label`\n            ),\n          ] as [string, string]\n      ).sort((a, b) => stringCompare(a[1], b[1]))\n  );\n\n  protected updated(changedProperties: PropertyValues) {\n    if (!changedProperties.has(\"action\")) {\n      return;\n    }\n    this._uiModeAvailable = Boolean(getType(this.action));\n    if (!this._uiModeAvailable && !this._yamlMode) {\n      this._yamlMode = true;\n    }\n\n    const yamlEditor = this._yamlEditor;\n    if (this._yamlMode && yamlEditor && yamlEditor.value !== this.action) {\n      yamlEditor.setValue(this.action);\n    }\n  }\n\n  protected render() {\n    const type = getType(this.action);\n    const selected = type ? OPTIONS.indexOf(type) : -1;\n    const yamlMode = this._yamlMode;\n\n    return html`\n      <ha-card>\n        <div class=\"card-content\">\n          <div class=\"card-menu\">\n            ${this.index !== 0\n              ? html`\n                  <ha-icon-button\n                    .label=${this.hass.localize(\n                      \"ui.panel.config.automation.editor.move_up\"\n                    )}\n                    .path=${mdiArrowUp}\n                    @click=${this._moveUp}\n                  ></ha-icon-button>\n                `\n              : \"\"}\n            ${this.index !== this.totalActions - 1\n              ? html`\n                  <ha-icon-button\n                    .label=${this.hass.localize(\n                      \"ui.panel.config.automation.editor.move_down\"\n                    )}\n                    .path=${mdiArrowDown}\n                    @click=${this._moveDown}\n                  ></ha-icon-button>\n                `\n              : \"\"}\n            <ha-button-menu corner=\"BOTTOM_START\" @action=${this._handleAction}>\n              <ha-icon-button\n                slot=\"trigger\"\n                .label=${this.hass.localize(\"ui.common.menu\")}\n                .path=${mdiDotsVertical}\n              ></ha-icon-button>\n              <mwc-list-item .disabled=${!this._uiModeAvailable}>\n                ${yamlMode\n                  ? this.hass.localize(\n                      \"ui.panel.config.automation.editor.edit_ui\"\n                    )\n                  : this.hass.localize(\n                      \"ui.panel.config.automation.editor.edit_yaml\"\n                    )}\n              </mwc-list-item>\n              <mwc-list-item>\n                ${this.hass.localize(\n                  \"ui.panel.config.automation.editor.actions.duplicate\"\n                )}\n              </mwc-list-item>\n              <mwc-list-item class=\"warning\">\n                ${this.hass.localize(\n                  \"ui.panel.config.automation.editor.actions.delete\"\n                )}\n              </mwc-list-item>\n            </ha-button-menu>\n          </div>\n          ${this._warnings\n            ? html`<ha-alert\n                alert-type=\"warning\"\n                .title=${this.hass.localize(\n                  \"ui.errors.config.editor_not_supported\"\n                )}\n              >\n                ${this._warnings!.length > 0 && this._warnings![0] !== undefined\n                  ? html` <ul>\n                      ${this._warnings!.map(\n                        (warning) => html`<li>${warning}</li>`\n                      )}\n                    </ul>`\n                  : \"\"}\n                ${this.hass.localize(\"ui.errors.config.edit_in_yaml_supported\")}\n              </ha-alert>`\n            : \"\"}\n          ${yamlMode\n            ? html`\n                ${selected === -1\n                  ? html`\n                      ${this.hass.localize(\n                        \"ui.panel.config.automation.editor.actions.unsupported_action\",\n                        \"action\",\n                        type\n                      )}\n                    `\n                  : \"\"}\n                <h2>\n                  ${this.hass.localize(\n                    \"ui.panel.config.automation.editor.edit_yaml\"\n                  )}\n                </h2>\n                <ha-yaml-editor\n                  .defaultValue=${this.action}\n                  @value-changed=${this._onYamlChange}\n                ></ha-yaml-editor>\n              `\n            : html`\n                <mwc-select\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.automation.editor.actions.type_select\"\n                  )}\n                  .value=${getType(this.action)}\n                  naturalMenuWidth\n                  @selected=${this._typeChanged}\n                >\n                  ${this._processedTypes(this.hass.localize).map(\n                    ([opt, label]) => html`\n                      <mwc-list-item .value=${opt}>${label}</mwc-list-item>\n                    `\n                  )}\n                </mwc-select>\n\n                <div @ui-mode-not-available=${this._handleUiModeNotAvailable}>\n                  ${dynamicElement(`ha-automation-action-${type}`, {\n                    hass: this.hass,\n                    action: this.action,\n                    narrow: this.narrow,\n                  })}\n                </div>\n              `}\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private _handleUiModeNotAvailable(ev: CustomEvent) {\n    // Prevent possible parent action-row from switching to yamlMode\n    ev.stopPropagation();\n\n    this._warnings = handleStructError(this.hass, ev.detail).warnings;\n    if (!this._yamlMode) {\n      this._yamlMode = true;\n    }\n  }\n\n  private _moveUp() {\n    fireEvent(this, \"move-action\", { direction: \"up\" });\n  }\n\n  private _moveDown() {\n    fireEvent(this, \"move-action\", { direction: \"down\" });\n  }\n\n  private _handleAction(ev: CustomEvent<ActionDetail>) {\n    switch (ev.detail.index) {\n      case 0:\n        this._switchYamlMode();\n        break;\n      case 1:\n        fireEvent(this, \"duplicate\");\n        break;\n      case 2:\n        this._onDelete();\n        break;\n    }\n  }\n\n  private _onDelete() {\n    showConfirmationDialog(this, {\n      text: this.hass.localize(\n        \"ui.panel.config.automation.editor.actions.delete_confirm\"\n      ),\n      dismissText: this.hass.localize(\"ui.common.cancel\"),\n      confirmText: this.hass.localize(\"ui.common.delete\"),\n      confirm: () => {\n        fireEvent(this, \"value-changed\", { value: null });\n      },\n    });\n  }\n\n  private _typeChanged(ev: CustomEvent) {\n    const type = (ev.target as Select).value;\n\n    if (!type) {\n      return;\n    }\n\n    this._uiModeAvailable = OPTIONS.includes(type);\n    if (!this._uiModeAvailable && !this._yamlMode) {\n      this._yamlMode = false;\n    }\n\n    if (type !== getType(this.action)) {\n      const elClass = customElements.get(\n        `ha-automation-action-${type}`\n      ) as CustomElementConstructor & { defaultConfig: Action };\n\n      fireEvent(this, \"value-changed\", {\n        value: {\n          ...elClass.defaultConfig,\n        },\n      });\n    }\n  }\n\n  private _onYamlChange(ev: CustomEvent) {\n    ev.stopPropagation();\n    if (!ev.detail.isValid) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", { value: ev.detail.value });\n  }\n\n  private _switchYamlMode() {\n    this._warnings = undefined;\n    this._yamlMode = !this._yamlMode;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .card-menu {\n          float: right;\n          z-index: 3;\n          --mdc-theme-text-primary-on-background: var(--primary-text-color);\n        }\n        .rtl .card-menu {\n          float: left;\n        }\n        mwc-list-item[disabled] {\n          --mdc-theme-text-primary-on-background: var(--disabled-text-color);\n        }\n        .warning {\n          margin-bottom: 8px;\n        }\n        .warning ul {\n          margin: 4px 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-row\": HaAutomationActionRow;\n  }\n}\n","import \"@material/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-card\";\nimport { Action } from \"../../../../data/script\";\nimport { HomeAssistant } from \"../../../../types\";\nimport \"./ha-automation-action-row\";\nimport { HaDeviceAction } from \"./types/ha-automation-action-device_id\";\n\n@customElement(\"ha-automation-action\")\nexport default class HaAutomationAction extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property() public actions!: Action[];\n\n  protected render() {\n    return html`\n      ${this.actions.map(\n        (action, idx) => html`\n          <ha-automation-action-row\n            .index=${idx}\n            .totalActions=${this.actions.length}\n            .action=${action}\n            .narrow=${this.narrow}\n            @duplicate=${this._duplicateAction}\n            @move-action=${this._move}\n            @value-changed=${this._actionChanged}\n            .hass=${this.hass}\n          ></ha-automation-action-row>\n        `\n      )}\n      <ha-card>\n        <div class=\"card-actions add-card\">\n          <mwc-button @click=${this._addAction}>\n            ${this.hass.localize(\n              \"ui.panel.config.automation.editor.actions.add\"\n            )}\n          </mwc-button>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private _addAction() {\n    const actions = this.actions.concat({\n      ...HaDeviceAction.defaultConfig,\n    });\n\n    fireEvent(this, \"value-changed\", { value: actions });\n  }\n\n  private _move(ev: CustomEvent) {\n    // Prevent possible parent action-row from also moving\n    ev.stopPropagation();\n\n    const index = (ev.target as any).index;\n    const newIndex = ev.detail.direction === \"up\" ? index - 1 : index + 1;\n    const actions = this.actions.concat();\n    const action = actions.splice(index, 1)[0];\n    actions.splice(newIndex, 0, action);\n    fireEvent(this, \"value-changed\", { value: actions });\n  }\n\n  private _actionChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const actions = [...this.actions];\n    const newValue = ev.detail.value;\n    const index = (ev.target as any).index;\n\n    if (newValue === null) {\n      actions.splice(index, 1);\n    } else {\n      actions[index] = newValue;\n    }\n\n    fireEvent(this, \"value-changed\", { value: actions });\n  }\n\n  private _duplicateAction(ev: CustomEvent) {\n    ev.stopPropagation();\n    const index = (ev.target as any).index;\n    fireEvent(this, \"value-changed\", {\n      value: this.actions.concat(this.actions[index]),\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-automation-action-row,\n      ha-card {\n        display: block;\n        margin-top: 16px;\n      }\n      .add-card mwc-button {\n        display: block;\n        text-align: center;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action\": HaAutomationAction;\n  }\n}\n","import { mdiDelete } from \"@mdi/js\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { ensureArray } from \"../../../../../common/ensure-array\";\nimport \"../../../../../components/ha-icon-button\";\nimport { Condition } from \"../../../../../data/automation\";\nimport { Action, ChooseAction } from \"../../../../../data/script\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport \"../ha-automation-action\";\nimport { ActionElement } from \"../ha-automation-action-row\";\n\n@customElement(\"ha-automation-action-choose\")\nexport class HaChooseAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public action!: ChooseAction;\n\n  public static get defaultConfig() {\n    return { choose: [{ conditions: [], sequence: [] }], default: [] };\n  }\n\n  protected render() {\n    const action = this.action;\n\n    return html`\n      ${(action.choose ? ensureArray(action.choose) : []).map(\n        (option, idx) => html`<ha-card>\n          <ha-icon-button\n            .idx=${idx}\n            @click=${this._removeOption}\n            .label=${this.hass.localize(\n              \"ui.panel.config.automation.editor.actions.type.choose.remove_option\"\n            )}\n            .path=${mdiDelete}\n          ></ha-icon-button>\n          <div class=\"card-content\">\n            <h2>\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.actions.type.choose.option\",\n                \"number\",\n                idx + 1\n              )}:\n            </h2>\n            <h3>\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.actions.type.choose.conditions\"\n              )}:\n            </h3>\n            <ha-automation-condition\n              .conditions=${option.conditions}\n              .hass=${this.hass}\n              .idx=${idx}\n              @value-changed=${this._conditionChanged}\n            ></ha-automation-condition>\n            <h3>\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.actions.type.choose.sequence\"\n              )}:\n            </h3>\n            <ha-automation-action\n              .actions=${option.sequence}\n              .hass=${this.hass}\n              .idx=${idx}\n              @value-changed=${this._actionChanged}\n            ></ha-automation-action>\n          </div>\n        </ha-card>`\n      )}\n      <ha-card>\n        <div class=\"card-actions add-card\">\n          <mwc-button @click=${this._addOption}>\n            ${this.hass.localize(\n              \"ui.panel.config.automation.editor.actions.type.choose.add_option\"\n            )}\n          </mwc-button>\n        </div>\n      </ha-card>\n      <h2>\n        ${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.choose.default\"\n        )}:\n      </h2>\n      <ha-automation-action\n        .actions=${action.default || []}\n        @value-changed=${this._defaultChanged}\n        .hass=${this.hass}\n      ></ha-automation-action>\n    `;\n  }\n\n  private _conditionChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const value = ev.detail.value as Condition[];\n    const index = (ev.target as any).idx;\n    const choose = this.action.choose\n      ? [...ensureArray(this.action.choose)]\n      : [];\n    choose[index].conditions = value;\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.action, choose },\n    });\n  }\n\n  private _actionChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const value = ev.detail.value as Action[];\n    const index = (ev.target as any).idx;\n    const choose = this.action.choose\n      ? [...ensureArray(this.action.choose)]\n      : [];\n    choose[index].sequence = value;\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.action, choose },\n    });\n  }\n\n  private _addOption() {\n    const choose = this.action.choose\n      ? [...ensureArray(this.action.choose)]\n      : [];\n    choose.push({ conditions: [], sequence: [] });\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.action, choose },\n    });\n  }\n\n  private _removeOption(ev: CustomEvent) {\n    const index = (ev.currentTarget as any).idx;\n    const choose = this.action.choose\n      ? [...ensureArray(this.action.choose)]\n      : [];\n    choose.splice(index, 1);\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.action, choose },\n    });\n  }\n\n  private _defaultChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const value = ev.detail.value as Action[];\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.action,\n        default: value,\n      },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-card {\n          margin-top: 16px;\n        }\n        .add-card mwc-button {\n          display: block;\n          text-align: center;\n        }\n        ha-icon-button {\n          position: absolute;\n          right: 0;\n          padding: 4px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-choose\": HaChooseAction;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { Condition } from \"../../../../../data/automation\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport \"../../condition/ha-automation-condition-editor\";\nimport { ActionElement } from \"../ha-automation-action-row\";\n\n@customElement(\"ha-automation-action-condition\")\nexport class HaConditionAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public action!: Condition;\n\n  public static get defaultConfig() {\n    return { condition: \"state\" };\n  }\n\n  protected render() {\n    return html`\n      <ha-automation-condition-editor\n        .condition=${this.action}\n        .hass=${this.hass}\n        @value-changed=${this._conditionChanged}\n      ></ha-automation-condition-editor>\n    `;\n  }\n\n  private _conditionChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n\n    fireEvent(this, \"value-changed\", {\n      value: ev.detail.value,\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-condition\": HaConditionAction;\n  }\n}\n","import { html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { hasTemplate } from \"../../../../../common/string/has-template\";\nimport type { HaDurationData } from \"../../../../../components/ha-duration-input\";\nimport \"../../../../../components/ha-duration-input\";\nimport { DelayAction } from \"../../../../../data/script\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { ActionElement } from \"../ha-automation-action-row\";\nimport { createDurationData } from \"../../../../../common/datetime/create_duration_data\";\n\n@customElement(\"ha-automation-action-delay\")\nexport class HaDelayAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public action!: DelayAction;\n\n  @property() public _timeData!: HaDurationData;\n\n  public static get defaultConfig() {\n    return { delay: \"\" };\n  }\n\n  public willUpdate(changedProperties: PropertyValues) {\n    if (!changedProperties.has(\"action\")) {\n      return;\n    }\n    // Check for templates in action. If found, revert to YAML mode.\n    if (this.action && hasTemplate(this.action)) {\n      fireEvent(\n        this,\n        \"ui-mode-not-available\",\n        Error(this.hass.localize(\"ui.errors.config.no_template_editor_support\"))\n      );\n      return;\n    }\n\n    this._timeData = createDurationData(this.action.delay);\n  }\n\n  protected render() {\n    return html`<ha-duration-input\n      .label=${this.hass.localize(\n        `ui.panel.config.automation.editor.actions.type.delay.delay`\n      )}\n      .data=${this._timeData}\n      enableMillisecond\n      @value-changed=${this._valueChanged}\n    ></ha-duration-input>`;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const value = ev.detail.value;\n    if (!value) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.action, delay: value },\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-delay\": HaDelayAction;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/device/ha-device-action-picker\";\nimport \"../../../../../components/device/ha-device-picker\";\nimport \"../../../../../components/ha-form/ha-form\";\nimport {\n  DeviceAction,\n  deviceAutomationsEqual,\n  DeviceCapabilities,\n  fetchDeviceActionCapabilities,\n} from \"../../../../../data/device_automation\";\nimport { HomeAssistant } from \"../../../../../types\";\n\n@customElement(\"ha-automation-action-device_id\")\nexport class HaDeviceAction extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Object }) public action!: DeviceAction;\n\n  @state() private _deviceId?: string;\n\n  @state() private _capabilities?: DeviceCapabilities;\n\n  private _origAction?: DeviceAction;\n\n  public static get defaultConfig() {\n    return {\n      device_id: \"\",\n      domain: \"\",\n      entity_id: \"\",\n    };\n  }\n\n  private _extraFieldsData = memoizeOne(\n    (action: DeviceAction, capabilities: DeviceCapabilities) => {\n      const extraFieldsData: Record<string, any> = {};\n      capabilities.extra_fields.forEach((item) => {\n        if (action[item.name] !== undefined) {\n          extraFieldsData![item.name] = action[item.name];\n        }\n      });\n      return extraFieldsData;\n    }\n  );\n\n  protected render() {\n    const deviceId = this._deviceId || this.action.device_id;\n\n    return html`\n      <ha-device-picker\n        .value=${deviceId}\n        @value-changed=${this._devicePicked}\n        .hass=${this.hass}\n        label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.device_id.label\"\n        )}\n      ></ha-device-picker>\n      <ha-device-action-picker\n        .value=${this.action}\n        .deviceId=${deviceId}\n        @value-changed=${this._deviceActionPicked}\n        .hass=${this.hass}\n        label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.device_id.action\"\n        )}\n      ></ha-device-action-picker>\n      ${this._capabilities?.extra_fields\n        ? html`\n            <ha-form\n              .data=${this._extraFieldsData(this.action, this._capabilities)}\n              .schema=${this._capabilities.extra_fields}\n              .computeLabel=${this._extraFieldsComputeLabelCallback(\n                this.hass.localize\n              )}\n              @value-changed=${this._extraFieldsChanged}\n            ></ha-form>\n          `\n        : \"\"}\n    `;\n  }\n\n  protected firstUpdated() {\n    if (!this._capabilities) {\n      this._getCapabilities();\n    }\n    if (this.action) {\n      this._origAction = this.action;\n    }\n  }\n\n  protected updated(changedPros) {\n    const prevAction = changedPros.get(\"action\");\n    if (prevAction && !deviceAutomationsEqual(prevAction, this.action)) {\n      this._deviceId = undefined;\n      this._getCapabilities();\n    }\n  }\n\n  private async _getCapabilities() {\n    this._capabilities = this.action.domain\n      ? await fetchDeviceActionCapabilities(this.hass, this.action)\n      : undefined;\n  }\n\n  private _devicePicked(ev) {\n    ev.stopPropagation();\n    this._deviceId = ev.target.value;\n  }\n\n  private _deviceActionPicked(ev) {\n    ev.stopPropagation();\n    let action = ev.detail.value;\n    if (this._origAction && deviceAutomationsEqual(this._origAction, action)) {\n      action = this._origAction;\n    }\n    fireEvent(this, \"value-changed\", { value: action });\n  }\n\n  private _extraFieldsChanged(ev) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.action,\n        ...ev.detail.value,\n      },\n    });\n  }\n\n  private _extraFieldsComputeLabelCallback(localize) {\n    // Returns a callback for ha-form to calculate labels per schema object\n    return (schema) =>\n      localize(\n        `ui.panel.config.automation.editor.actions.type.device_id.extra_fields.${schema.name}`\n      ) || schema.name;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-device_id\": HaDeviceAction;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport { html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/entity/ha-entity-picker\";\nimport \"../../../../../components/ha-service-picker\";\nimport \"../../../../../components/ha-yaml-editor\";\nimport type { HaYamlEditor } from \"../../../../../components/ha-yaml-editor\";\nimport type { EventAction } from \"../../../../../data/script\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport { ActionElement, handleChangeEvent } from \"../ha-automation-action-row\";\n\n@customElement(\"ha-automation-action-event\")\nexport class HaEventAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public action!: EventAction;\n\n  @query(\"ha-yaml-editor\", true) private _yamlEditor?: HaYamlEditor;\n\n  private _actionData?: EventAction[\"event_data\"];\n\n  public static get defaultConfig(): EventAction {\n    return { event: \"\", event_data: {} };\n  }\n\n  protected updated(changedProperties: PropertyValues) {\n    if (!changedProperties.has(\"action\")) {\n      return;\n    }\n    if (this._actionData && this._actionData !== this.action.event_data) {\n      if (this._yamlEditor) {\n        this._yamlEditor.setValue(this.action.event_data);\n      }\n    }\n    this._actionData = this.action.event_data;\n  }\n\n  protected render() {\n    const { event, event_data } = this.action;\n\n    return html`\n      <paper-input\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.event.event\"\n        )}\n        name=\"event\"\n        .value=${event}\n        @value-changed=${this._eventChanged}\n      ></paper-input>\n      <ha-yaml-editor\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.event.service_data\"\n        )}\n        .name=${\"event_data\"}\n        .defaultValue=${event_data}\n        @value-changed=${this._dataChanged}\n      ></ha-yaml-editor>\n    `;\n  }\n\n  private _dataChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    if (!ev.detail.isValid) {\n      return;\n    }\n    this._actionData = ev.detail.value;\n    handleChangeEvent(this, ev);\n  }\n\n  private _eventChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.action, event: ev.detail.value },\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-event\": HaEventAction;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport type { PaperListboxElement } from \"@polymer/paper-listbox\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport { CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport {\n  Action,\n  CountRepeat,\n  RepeatAction,\n  UntilRepeat,\n  WhileRepeat,\n} from \"../../../../../data/script\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { Condition } from \"../../../../lovelace/common/validate-condition\";\nimport \"../ha-automation-action\";\nimport { ActionElement } from \"../ha-automation-action-row\";\n\nconst OPTIONS = [\"count\", \"while\", \"until\"];\n\nconst getType = (action) => OPTIONS.find((option) => option in action);\n\n@customElement(\"ha-automation-action-repeat\")\nexport class HaRepeatAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public action!: RepeatAction;\n\n  public static get defaultConfig() {\n    return { repeat: { count: 2, sequence: [] } };\n  }\n\n  protected render() {\n    const action = this.action.repeat;\n\n    const type = getType(action);\n    const selected = type ? OPTIONS.indexOf(type) : -1;\n\n    return html`\n      <paper-dropdown-menu-light\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.repeat.type_select\"\n        )}\n        no-animations\n      >\n        <paper-listbox\n          slot=\"dropdown-content\"\n          .selected=${selected}\n          @iron-select=${this._typeChanged}\n        >\n          ${OPTIONS.map(\n            (opt) => html`\n              <paper-item .action=${opt}>\n                ${this.hass.localize(\n                  `ui.panel.config.automation.editor.actions.type.repeat.type.${opt}.label`\n                )}\n              </paper-item>\n            `\n          )}\n        </paper-listbox>\n      </paper-dropdown-menu-light>\n      ${type === \"count\"\n        ? html`<paper-input\n            .label=${this.hass.localize(\n              \"ui.panel.config.automation.editor.actions.type.repeat.type.count.label\"\n            )}\n            name=\"count\"\n            .value=${(action as CountRepeat).count || \"0\"}\n            @value-changed=${this._countChanged}\n          ></paper-input>`\n        : \"\"}\n      ${type === \"while\"\n        ? html` <h3>\n              ${this.hass.localize(\n                `ui.panel.config.automation.editor.actions.type.repeat.type.while.conditions`\n              )}:\n            </h3>\n            <ha-automation-condition\n              .conditions=${(action as WhileRepeat).while || []}\n              .hass=${this.hass}\n              @value-changed=${this._conditionChanged}\n            ></ha-automation-condition>`\n        : \"\"}\n      ${type === \"until\"\n        ? html` <h3>\n              ${this.hass.localize(\n                `ui.panel.config.automation.editor.actions.type.repeat.type.until.conditions`\n              )}:\n            </h3>\n            <ha-automation-condition\n              .conditions=${(action as UntilRepeat).until || []}\n              .hass=${this.hass}\n              @value-changed=${this._conditionChanged}\n            ></ha-automation-condition>`\n        : \"\"}\n      <h3>\n        ${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.repeat.sequence\"\n        )}:\n      </h3>\n      <ha-automation-action\n        .actions=${action.sequence}\n        @value-changed=${this._actionChanged}\n        .hass=${this.hass}\n      ></ha-automation-action>\n    `;\n  }\n\n  private _typeChanged(ev: CustomEvent) {\n    const type = ((ev.target as PaperListboxElement)?.selectedItem as any)\n      ?.action;\n\n    if (!type || type === getType(this.action.repeat)) {\n      return;\n    }\n\n    const value = type === \"count\" ? 2 : [];\n\n    fireEvent(this, \"value-changed\", {\n      value: {\n        repeat: { [type]: value, sequence: this.action.repeat.sequence },\n      },\n    });\n  }\n\n  private _conditionChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const value = ev.detail.value as Condition[];\n    fireEvent(this, \"value-changed\", {\n      value: {\n        repeat: {\n          ...this.action.repeat,\n          [getType(this.action.repeat)!]: value,\n        },\n      },\n    });\n  }\n\n  private _actionChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const value = ev.detail.value as Action[];\n    fireEvent(this, \"value-changed\", {\n      value: {\n        repeat: {\n          ...this.action.repeat,\n          sequence: value,\n        },\n      },\n    });\n  }\n\n  private _countChanged(ev: CustomEvent): void {\n    const newVal = ev.detail.value;\n    if ((this.action.repeat as CountRepeat).count === newVal) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: {\n        repeat: {\n          ...this.action.repeat,\n          count: newVal,\n        },\n      },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return haStyle;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-repeat\": HaRepeatAction;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/entity/ha-entity-picker\";\nimport { SceneAction } from \"../../../../../data/script\";\nimport { PolymerChangedEvent } from \"../../../../../polymer-types\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { ActionElement } from \"../ha-automation-action-row\";\n\nconst includeDomains = [\"scene\"];\n\n@customElement(\"ha-automation-action-scene\")\nexport class HaSceneAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public action!: SceneAction;\n\n  public static get defaultConfig(): SceneAction {\n    return { scene: \"\" };\n  }\n\n  protected render() {\n    const { scene } = this.action;\n\n    return html`\n      <ha-entity-picker\n        .hass=${this.hass}\n        .value=${scene}\n        @value-changed=${this._entityPicked}\n        .includeDomains=${includeDomains}\n        allow-custom-entity\n      ></ha-entity-picker>\n    `;\n  }\n\n  private _entityPicked(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.action, scene: ev.detail.value },\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-scene\": HaSceneAction;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport { css, CSSResultGroup, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { any, assert, object, optional, string } from \"superstruct\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { hasTemplate } from \"../../../../../common/string/has-template\";\nimport { entityIdOrAll } from \"../../../../../common/structs/is-entity-id\";\nimport \"../../../../../components/ha-service-control\";\nimport { ServiceAction } from \"../../../../../data/script\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport { ActionElement } from \"../ha-automation-action-row\";\n\nconst actionStruct = object({\n  service: optional(string()),\n  entity_id: optional(entityIdOrAll()),\n  target: optional(any()),\n  data: optional(any()),\n});\n\n@customElement(\"ha-automation-action-service\")\nexport class HaServiceAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public action!: ServiceAction;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @state() private _action!: ServiceAction;\n\n  public static get defaultConfig() {\n    return { service: \"\", data: {} };\n  }\n\n  protected updated(changedProperties: PropertyValues) {\n    if (!changedProperties.has(\"action\")) {\n      return;\n    }\n    try {\n      assert(this.action, actionStruct);\n    } catch (err: any) {\n      fireEvent(this, \"ui-mode-not-available\", err);\n      return;\n    }\n    if (this.action && hasTemplate(this.action)) {\n      fireEvent(\n        this,\n        \"ui-mode-not-available\",\n        Error(this.hass.localize(\"ui.errors.config.no_template_editor_support\"))\n      );\n      return;\n    }\n    if (this.action.entity_id) {\n      this._action = {\n        ...this.action,\n        data: { ...this.action.data, entity_id: this.action.entity_id },\n      };\n      delete this._action.entity_id;\n    } else {\n      this._action = this.action;\n    }\n  }\n\n  protected render() {\n    return html`\n      <ha-service-control\n        .narrow=${this.narrow}\n        .hass=${this.hass}\n        .value=${this._action}\n        .showAdvanced=${this.hass.userData?.showAdvanced}\n        @value-changed=${this._actionChanged}\n      ></ha-service-control>\n    `;\n  }\n\n  private _actionChanged(ev) {\n    if (ev.detail.value === this._action) {\n      ev.stopPropagation();\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-service-control {\n        display: block;\n        margin: 0 -16px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-service\": HaServiceAction;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-input/paper-textarea\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/ha-formfield\";\nimport { WaitForTriggerAction } from \"../../../../../data/script\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport \"../../trigger/ha-automation-trigger\";\nimport { ActionElement, handleChangeEvent } from \"../ha-automation-action-row\";\n\n@customElement(\"ha-automation-action-wait_for_trigger\")\nexport class HaWaitForTriggerAction\n  extends LitElement\n  implements ActionElement\n{\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public action!: WaitForTriggerAction;\n\n  public static get defaultConfig() {\n    return { wait_for_trigger: [] };\n  }\n\n  protected render() {\n    const { wait_for_trigger, continue_on_timeout, timeout } = this.action;\n\n    return html`\n      <paper-input\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.wait_for_trigger.timeout\"\n        )}\n        .name=${\"timeout\"}\n        .value=${timeout}\n        @value-changed=${this._valueChanged}\n      ></paper-input>\n      <br />\n      <ha-formfield\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.wait_for_trigger.continue_timeout\"\n        )}\n      >\n        <ha-switch\n          .checked=${continue_on_timeout ?? true}\n          @change=${this._continueChanged}\n        ></ha-switch>\n      </ha-formfield>\n      <ha-automation-trigger\n        .triggers=${wait_for_trigger}\n        .hass=${this.hass}\n        .name=${\"wait_for_trigger\"}\n        @value-changed=${this._valueChanged}\n      ></ha-automation-trigger>\n    `;\n  }\n\n  private _continueChanged(ev) {\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.action, continue_on_timeout: ev.target.checked },\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    handleChangeEvent(this, ev);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-wait_for_trigger\": HaWaitForTriggerAction;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-input/paper-textarea\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { WaitAction } from \"../../../../../data/script\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { ActionElement, handleChangeEvent } from \"../ha-automation-action-row\";\n\n@customElement(\"ha-automation-action-wait_template\")\nexport class HaWaitAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public action!: WaitAction;\n\n  public static get defaultConfig() {\n    return { wait_template: \"\" };\n  }\n\n  protected render() {\n    const { wait_template, timeout, continue_on_timeout } = this.action;\n\n    return html`\n      <paper-textarea\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.wait_template.wait_template\"\n        )}\n        name=\"wait_template\"\n        .value=${wait_template}\n        @value-changed=${this._valueChanged}\n        dir=\"ltr\"\n      ></paper-textarea>\n      <paper-input\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.wait_template.timeout\"\n        )}\n        .name=${\"timeout\"}\n        .value=${timeout}\n        @value-changed=${this._valueChanged}\n      ></paper-input>\n      <br />\n      <ha-formfield\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.actions.type.wait_template.continue_timeout\"\n        )}\n      >\n        <ha-switch\n          .checked=${continue_on_timeout}\n          @change=${this._continueChanged}\n        ></ha-switch>\n      </ha-formfield>\n    `;\n  }\n\n  private _continueChanged(ev) {\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.action, continue_on_timeout: ev.target.checked },\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    handleChangeEvent(this, ev);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-wait_template\": HaWaitAction;\n  }\n}\n","import { CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"@material/mwc-select\";\nimport type { Select } from \"@material/mwc-select\";\nimport memoizeOne from \"memoize-one\";\nimport { dynamicElement } from \"../../../../common/dom/dynamic-element-directive\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { stringCompare } from \"../../../../common/string/compare\";\nimport { LocalizeFunc } from \"../../../../common/translations/localize\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-yaml-editor\";\nimport type { Condition } from \"../../../../data/automation\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport \"./types/ha-automation-condition-and\";\nimport \"./types/ha-automation-condition-device\";\nimport \"./types/ha-automation-condition-not\";\nimport \"./types/ha-automation-condition-numeric_state\";\nimport \"./types/ha-automation-condition-or\";\nimport \"./types/ha-automation-condition-state\";\nimport \"./types/ha-automation-condition-sun\";\nimport \"./types/ha-automation-condition-template\";\nimport \"./types/ha-automation-condition-time\";\nimport \"./types/ha-automation-condition-trigger\";\nimport \"./types/ha-automation-condition-zone\";\n\nconst OPTIONS = [\n  \"device\",\n  \"and\",\n  \"or\",\n  \"not\",\n  \"state\",\n  \"numeric_state\",\n  \"sun\",\n  \"template\",\n  \"time\",\n  \"trigger\",\n  \"zone\",\n];\n\n@customElement(\"ha-automation-condition-editor\")\nexport default class HaAutomationConditionEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public condition!: Condition;\n\n  @property() public yamlMode = false;\n\n  private _processedTypes = memoizeOne(\n    (localize: LocalizeFunc): [string, string][] =>\n      OPTIONS.map(\n        (condition) =>\n          [\n            condition,\n            localize(\n              `ui.panel.config.automation.editor.conditions.type.${condition}.label`\n            ),\n          ] as [string, string]\n      ).sort((a, b) => stringCompare(a[1], b[1]))\n  );\n\n  protected render() {\n    const selected = OPTIONS.indexOf(this.condition.condition);\n    const yamlMode = this.yamlMode || selected === -1;\n    return html`\n      ${yamlMode\n        ? html`\n            ${selected === -1\n              ? html`\n                  ${this.hass.localize(\n                    \"ui.panel.config.automation.editor.conditions.unsupported_condition\",\n                    \"condition\",\n                    this.condition.condition\n                  )}\n                `\n              : \"\"}\n            <h2>\n              ${this.hass.localize(\n                \"ui.panel.config.automation.editor.edit_yaml\"\n              )}\n            </h2>\n            <ha-yaml-editor\n              .defaultValue=${this.condition}\n              @value-changed=${this._onYamlChange}\n            ></ha-yaml-editor>\n          `\n        : html`\n            <mwc-select\n              .label=${this.hass.localize(\n                \"ui.panel.config.automation.editor.conditions.type_select\"\n              )}\n              .value=${this.condition.condition}\n              naturalMenuWidth\n              @selected=${this._typeChanged}\n            >\n              ${this._processedTypes(this.hass.localize).map(\n                ([opt, label]) => html`\n                  <mwc-list-item .value=${opt}>${label}</mwc-list-item>\n                `\n              )}\n            </mwc-select>\n\n            <div>\n              ${dynamicElement(\n                `ha-automation-condition-${this.condition.condition}`,\n                { hass: this.hass, condition: this.condition }\n              )}\n            </div>\n          `}\n    `;\n  }\n\n  private _typeChanged(ev: CustomEvent) {\n    const type = (ev.target as Select).value;\n\n    if (!type) {\n      return;\n    }\n\n    const elClass = customElements.get(\n      `ha-automation-condition-${type}`\n    ) as CustomElementConstructor & {\n      defaultConfig: Omit<Condition, \"condition\">;\n    };\n\n    if (type !== this.condition.condition) {\n      fireEvent(this, \"value-changed\", {\n        value: {\n          condition: type,\n          ...elClass.defaultConfig,\n        },\n      });\n    }\n  }\n\n  private _onYamlChange(ev: CustomEvent) {\n    ev.stopPropagation();\n    if (!ev.detail.isValid) {\n      return;\n    }\n    // @ts-ignore\n    fireEvent(this, \"value-changed\", { value: ev.detail.value, yaml: true });\n  }\n\n  static get styles(): CSSResultGroup {\n    return haStyle;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-editor\": HaAutomationConditionEditor;\n  }\n}\n","import { ActionDetail } from \"@material/mwc-list/mwc-list-foundation\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { mdiDotsVertical } from \"@mdi/js\";\nimport \"@polymer/paper-item/paper-item\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { handleStructError } from \"../../../../common/structs/handle-errors\";\nimport \"../../../../components/ha-button-menu\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-icon-button\";\nimport { Condition } from \"../../../../data/automation\";\nimport { showConfirmationDialog } from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport \"./ha-automation-condition-editor\";\n\nexport interface ConditionElement extends LitElement {\n  condition: Condition;\n}\n\nexport const handleChangeEvent = (\n  element: ConditionElement,\n  ev: CustomEvent\n) => {\n  ev.stopPropagation();\n  const name = (ev.target as any)?.name;\n  if (!name) {\n    return;\n  }\n  const newVal = ev.detail.value;\n\n  if ((element.condition[name] || \"\") === newVal) {\n    return;\n  }\n\n  let newCondition: Condition;\n  if (!newVal) {\n    newCondition = { ...element.condition };\n    delete newCondition[name];\n  } else {\n    newCondition = { ...element.condition, [name]: newVal };\n  }\n  fireEvent(element, \"value-changed\", { value: newCondition });\n};\n\n@customElement(\"ha-automation-condition-row\")\nexport default class HaAutomationConditionRow extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public condition!: Condition;\n\n  @state() private _yamlMode = false;\n\n  @state() private _warnings?: string[];\n\n  protected render() {\n    if (!this.condition) {\n      return html``;\n    }\n    return html`\n      <ha-card>\n        <div class=\"card-content\">\n          <div class=\"card-menu\">\n            <ha-button-menu corner=\"BOTTOM_START\" @action=${this._handleAction}>\n              <ha-icon-button\n                slot=\"trigger\"\n                .label=${this.hass.localize(\"ui.common.menu\")}\n                .path=${mdiDotsVertical}\n              >\n              </ha-icon-button>\n              <mwc-list-item>\n                ${this._yamlMode\n                  ? this.hass.localize(\n                      \"ui.panel.config.automation.editor.edit_ui\"\n                    )\n                  : this.hass.localize(\n                      \"ui.panel.config.automation.editor.edit_yaml\"\n                    )}\n              </mwc-list-item>\n              <mwc-list-item>\n                ${this.hass.localize(\n                  \"ui.panel.config.automation.editor.actions.duplicate\"\n                )}\n              </mwc-list-item>\n              <mwc-list-item class=\"warning\">\n                ${this.hass.localize(\n                  \"ui.panel.config.automation.editor.actions.delete\"\n                )}\n              </mwc-list-item>\n            </ha-button-menu>\n          </div>\n          ${this._warnings\n            ? html`<ha-alert\n                alert-type=\"warning\"\n                .title=${this.hass.localize(\n                  \"ui.errors.config.editor_not_supported\"\n                )}\n              >\n                ${this._warnings!.length > 0 && this._warnings![0] !== undefined\n                  ? html` <ul>\n                      ${this._warnings!.map(\n                        (warning) => html`<li>${warning}</li>`\n                      )}\n                    </ul>`\n                  : \"\"}\n                ${this.hass.localize(\"ui.errors.config.edit_in_yaml_supported\")}\n              </ha-alert>`\n            : \"\"}\n          <ha-automation-condition-editor\n            @ui-mode-not-available=${this._handleUiModeNotAvailable}\n            @value-changed=${this._handleChangeEvent}\n            .yamlMode=${this._yamlMode}\n            .hass=${this.hass}\n            .condition=${this.condition}\n          ></ha-automation-condition-editor>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private _handleUiModeNotAvailable(ev: CustomEvent) {\n    // Prevent possible parent action-row from switching to yamlMode\n    ev.stopPropagation();\n    this._warnings = handleStructError(this.hass, ev.detail).warnings;\n    if (!this._yamlMode) {\n      this._yamlMode = true;\n    }\n  }\n\n  private _handleChangeEvent(ev: CustomEvent) {\n    if (ev.detail.yaml) {\n      this._warnings = undefined;\n    }\n  }\n\n  private _handleAction(ev: CustomEvent<ActionDetail>) {\n    switch (ev.detail.index) {\n      case 0:\n        this._switchYamlMode();\n        break;\n      case 1:\n        fireEvent(this, \"duplicate\");\n        break;\n      case 2:\n        this._onDelete();\n        break;\n    }\n  }\n\n  private _onDelete() {\n    showConfirmationDialog(this, {\n      text: this.hass.localize(\n        \"ui.panel.config.automation.editor.conditions.delete_confirm\"\n      ),\n      dismissText: this.hass.localize(\"ui.common.cancel\"),\n      confirmText: this.hass.localize(\"ui.common.delete\"),\n      confirm: () => {\n        fireEvent(this, \"value-changed\", { value: null });\n      },\n    });\n  }\n\n  private _switchYamlMode() {\n    this._warnings = undefined;\n    this._yamlMode = !this._yamlMode;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .card-menu {\n          float: right;\n          z-index: 3;\n          --mdc-theme-text-primary-on-background: var(--primary-text-color);\n        }\n        .rtl .card-menu {\n          float: left;\n        }\n        mwc-list-item[disabled] {\n          --mdc-theme-text-primary-on-background: var(--disabled-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-row\": HaAutomationConditionRow;\n  }\n}\n","import \"@material/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-card\";\nimport { Condition } from \"../../../../data/automation\";\nimport { HomeAssistant } from \"../../../../types\";\nimport \"./ha-automation-condition-row\";\nimport { HaDeviceCondition } from \"./types/ha-automation-condition-device\";\n\n@customElement(\"ha-automation-condition\")\nexport default class HaAutomationCondition extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public conditions!: Condition[];\n\n  protected updated(changedProperties: PropertyValues) {\n    if (!changedProperties.has(\"conditions\")) {\n      return;\n    }\n    let updatedConditions: Condition[] | undefined;\n    if (!Array.isArray(this.conditions)) {\n      updatedConditions = [this.conditions];\n    }\n\n    (updatedConditions || this.conditions).forEach((condition, index) => {\n      if (typeof condition === \"string\") {\n        updatedConditions = updatedConditions || [...this.conditions];\n        updatedConditions[index] = {\n          condition: \"template\",\n          value_template: condition,\n        };\n      }\n    });\n\n    if (updatedConditions) {\n      fireEvent(this, \"value-changed\", {\n        value: updatedConditions,\n      });\n    }\n  }\n\n  protected render() {\n    if (!Array.isArray(this.conditions)) {\n      return html``;\n    }\n    return html`\n      ${this.conditions.map(\n        (cond, idx) => html`\n          <ha-automation-condition-row\n            .index=${idx}\n            .condition=${cond}\n            @duplicate=${this._duplicateCondition}\n            @value-changed=${this._conditionChanged}\n            .hass=${this.hass}\n          ></ha-automation-condition-row>\n        `\n      )}\n      <ha-card>\n        <div class=\"card-actions add-card\">\n          <mwc-button @click=${this._addCondition}>\n            ${this.hass.localize(\n              \"ui.panel.config.automation.editor.conditions.add\"\n            )}\n          </mwc-button>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private _addCondition() {\n    const conditions = this.conditions.concat({\n      condition: \"device\",\n      ...HaDeviceCondition.defaultConfig,\n    });\n\n    fireEvent(this, \"value-changed\", { value: conditions });\n  }\n\n  private _conditionChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const conditions = [...this.conditions];\n    const newValue = ev.detail.value;\n    const index = (ev.target as any).index;\n\n    if (newValue === null) {\n      conditions.splice(index, 1);\n    } else {\n      conditions[index] = newValue;\n    }\n\n    fireEvent(this, \"value-changed\", { value: conditions });\n  }\n\n  private _duplicateCondition(ev: CustomEvent) {\n    ev.stopPropagation();\n    const index = (ev.target as any).index;\n    fireEvent(this, \"value-changed\", {\n      value: this.conditions.concat(this.conditions[index]),\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-automation-condition-row,\n      ha-card {\n        display: block;\n        margin-top: 16px;\n      }\n      .add-card mwc-button {\n        display: block;\n        text-align: center;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition\": HaAutomationCondition;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/device/ha-device-condition-picker\";\nimport \"../../../../../components/device/ha-device-picker\";\nimport \"../../../../../components/ha-form/ha-form\";\nimport {\n  deviceAutomationsEqual,\n  DeviceCapabilities,\n  DeviceCondition,\n  fetchDeviceConditionCapabilities,\n} from \"../../../../../data/device_automation\";\nimport { HomeAssistant } from \"../../../../../types\";\n\n@customElement(\"ha-automation-condition-device\")\nexport class HaDeviceCondition extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Object }) public condition!: DeviceCondition;\n\n  @state() private _deviceId?: string;\n\n  @state() private _capabilities?: DeviceCapabilities;\n\n  private _origCondition?: DeviceCondition;\n\n  public static get defaultConfig() {\n    return {\n      device_id: \"\",\n      domain: \"\",\n      entity_id: \"\",\n    };\n  }\n\n  private _extraFieldsData = memoizeOne(\n    (condition: DeviceCondition, capabilities: DeviceCapabilities) => {\n      const extraFieldsData: Record<string, any> = {};\n      capabilities.extra_fields.forEach((item) => {\n        if (condition[item.name] !== undefined) {\n          extraFieldsData![item.name] = condition[item.name];\n        }\n      });\n      return extraFieldsData;\n    }\n  );\n\n  protected render() {\n    const deviceId = this._deviceId || this.condition.device_id;\n\n    return html`\n      <ha-device-picker\n        .value=${deviceId}\n        @value-changed=${this._devicePicked}\n        .hass=${this.hass}\n        label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.conditions.type.device.label\"\n        )}\n      ></ha-device-picker>\n      <ha-device-condition-picker\n        .value=${this.condition}\n        .deviceId=${deviceId}\n        @value-changed=${this._deviceConditionPicked}\n        .hass=${this.hass}\n        label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.conditions.type.device.condition\"\n        )}\n      ></ha-device-condition-picker>\n      ${this._capabilities?.extra_fields\n        ? html`\n            <ha-form\n              .data=${this._extraFieldsData(this.condition, this._capabilities)}\n              .schema=${this._capabilities.extra_fields}\n              .computeLabel=${this._extraFieldsComputeLabelCallback(\n                this.hass.localize\n              )}\n              @value-changed=${this._extraFieldsChanged}\n            ></ha-form>\n          `\n        : \"\"}\n    `;\n  }\n\n  protected firstUpdated() {\n    if (!this._capabilities) {\n      this._getCapabilities();\n    }\n    if (this.condition) {\n      this._origCondition = this.condition;\n    }\n  }\n\n  protected updated(changedPros) {\n    const prevCondition = changedPros.get(\"condition\");\n    if (\n      prevCondition &&\n      !deviceAutomationsEqual(prevCondition, this.condition)\n    ) {\n      this._getCapabilities();\n    }\n  }\n\n  private async _getCapabilities() {\n    const condition = this.condition;\n\n    this._capabilities = condition.domain\n      ? await fetchDeviceConditionCapabilities(this.hass, condition)\n      : undefined;\n  }\n\n  private _devicePicked(ev) {\n    ev.stopPropagation();\n    this._deviceId = ev.target.value;\n  }\n\n  private _deviceConditionPicked(ev) {\n    ev.stopPropagation();\n    let condition = ev.detail.value;\n    if (\n      this._origCondition &&\n      deviceAutomationsEqual(this._origCondition, condition)\n    ) {\n      condition = this._origCondition;\n    }\n    fireEvent(this, \"value-changed\", { value: condition });\n  }\n\n  private _extraFieldsChanged(ev) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.condition,\n        ...ev.detail.value,\n      },\n    });\n  }\n\n  private _extraFieldsComputeLabelCallback(localize) {\n    // Returns a callback for ha-form to calculate labels per schema object\n    return (schema) =>\n      localize(\n        `ui.panel.config.automation.editor.conditions.type.device.extra_fields.${schema.name}`\n      ) || schema.name;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-device\": HaDeviceCondition;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { Condition, LogicalCondition } from \"../../../../../data/automation\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport \"../ha-automation-condition\";\nimport { ConditionElement } from \"../ha-automation-condition-row\";\nimport { HaStateCondition } from \"./ha-automation-condition-state\";\n\n@customElement(\"ha-automation-condition-logical\")\nexport class HaLogicalCondition extends LitElement implements ConditionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public condition!: LogicalCondition;\n\n  public static get defaultConfig() {\n    return {\n      conditions: [\n        {\n          condition: \"state\",\n          ...HaStateCondition.defaultConfig,\n        },\n      ] as Condition[],\n    };\n  }\n\n  protected render() {\n    return html`\n      <ha-automation-condition\n        .conditions=${this.condition.conditions || []}\n        @value-changed=${this._valueChanged}\n        .hass=${this.hass}\n      ></ha-automation-condition>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.condition, conditions: ev.detail.value },\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-logical\": HaLogicalCondition;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-input/paper-textarea\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../../../../../components/entity/ha-entity-picker\";\nimport { NumericStateCondition } from \"../../../../../data/automation\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { handleChangeEvent } from \"../ha-automation-condition-row\";\n\n@customElement(\"ha-automation-condition-numeric_state\")\nexport default class HaNumericStateCondition extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public condition!: NumericStateCondition;\n\n  public static get defaultConfig() {\n    return {\n      entity_id: \"\",\n    };\n  }\n\n  public render() {\n    const { value_template, entity_id, attribute, below, above } =\n      this.condition;\n\n    return html`\n      <ha-entity-picker\n        .value=${entity_id}\n        .name=${\"entity_id\"}\n        @value-changed=${this._valueChanged}\n        .hass=${this.hass}\n        allow-custom-entity\n      ></ha-entity-picker>\n      <ha-entity-attribute-picker\n        .hass=${this.hass}\n        .entityId=${entity_id}\n        .value=${attribute}\n        .name=${\"attribute\"}\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.state.attribute\"\n        )}\n        @value-changed=${this._valueChanged}\n        allow-custom-value\n      ></ha-entity-attribute-picker>\n      <paper-input\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.conditions.type.numeric_state.above\"\n        )}\n        name=\"above\"\n        .value=${above}\n        @value-changed=${this._valueChanged}\n      ></paper-input>\n      <paper-input\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.conditions.type.numeric_state.below\"\n        )}\n        name=\"below\"\n        .value=${below}\n        @value-changed=${this._valueChanged}\n      ></paper-input>\n      <paper-textarea\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.conditions.type.numeric_state.value_template\"\n        )}\n        name=\"value_template\"\n        .value=${value_template}\n        @value-changed=${this._valueChanged}\n        dir=\"ltr\"\n      ></paper-textarea>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    handleChangeEvent(this, ev);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-numeric_state\": HaNumericStateCondition;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport { html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { assert, literal, object, optional, string, union } from \"superstruct\";\nimport { createDurationData } from \"../../../../../common/datetime/create_duration_data\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/entity/ha-entity-attribute-picker\";\nimport \"../../../../../components/entity/ha-entity-picker\";\nimport \"../../../../../components/ha-duration-input\";\nimport { StateCondition } from \"../../../../../data/automation\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { forDictStruct } from \"../../structs\";\nimport {\n  ConditionElement,\n  handleChangeEvent,\n} from \"../ha-automation-condition-row\";\n\nconst stateConditionStruct = object({\n  condition: literal(\"state\"),\n  entity_id: optional(string()),\n  attribute: optional(string()),\n  state: optional(string()),\n  for: optional(union([string(), forDictStruct])),\n});\n\n@customElement(\"ha-automation-condition-state\")\nexport class HaStateCondition extends LitElement implements ConditionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public condition!: StateCondition;\n\n  public static get defaultConfig() {\n    return { entity_id: \"\", state: \"\" };\n  }\n\n  public shouldUpdate(changedProperties: PropertyValues) {\n    if (changedProperties.has(\"condition\")) {\n      try {\n        assert(this.condition, stateConditionStruct);\n      } catch (e: any) {\n        fireEvent(this, \"ui-mode-not-available\", e);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  protected render() {\n    const { entity_id, attribute, state } = this.condition;\n    const forTime = createDurationData(this.condition.for);\n\n    return html`\n      <ha-entity-picker\n        .value=${entity_id}\n        .name=${\"entity_id\"}\n        @value-changed=${this._valueChanged}\n        .hass=${this.hass}\n        allow-custom-entity\n      ></ha-entity-picker>\n      <ha-entity-attribute-picker\n        .hass=${this.hass}\n        .entityId=${entity_id}\n        .value=${attribute}\n        .name=${\"attribute\"}\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.state.attribute\"\n        )}\n        @value-changed=${this._valueChanged}\n        allow-custom-value\n      ></ha-entity-attribute-picker>\n      <paper-input\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.conditions.type.state.state\"\n        )}\n        .name=${\"state\"}\n        .value=${state}\n        @value-changed=${this._valueChanged}\n      ></paper-input>\n      <ha-duration-input\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.state.for\"\n        )}\n        .name=${\"for\"}\n        .data=${forTime}\n        @value-changed=${this._valueChanged}\n      ></ha-duration-input>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    handleChangeEvent(this, ev);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-state\": HaStateCondition;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport type { SunCondition } from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport {\n  ConditionElement,\n  handleChangeEvent,\n} from \"../ha-automation-condition-row\";\nimport \"../../../../../components/ha-radio\";\nimport \"../../../../../components/ha-formfield\";\nimport type { HaRadio } from \"../../../../../components/ha-radio\";\n\n@customElement(\"ha-automation-condition-sun\")\nexport class HaSunCondition extends LitElement implements ConditionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public condition!: SunCondition;\n\n  public static get defaultConfig() {\n    return {};\n  }\n\n  protected render() {\n    const { after, after_offset, before, before_offset } = this.condition;\n    return html`\n      <label>\n        ${this.hass.localize(\n          \"ui.panel.config.automation.editor.conditions.type.sun.before\"\n        )}\n        <ha-formfield\n          .label=${this.hass.localize(\n            \"ui.panel.config.automation.editor.conditions.type.sun.sunrise\"\n          )}\n        >\n          <ha-radio\n            name=\"before\"\n            value=\"sunrise\"\n            .checked=${before === \"sunrise\"}\n            @change=${this._radioGroupPicked}\n          ></ha-radio>\n        </ha-formfield>\n        <ha-formfield\n          .label=${this.hass.localize(\n            \"ui.panel.config.automation.editor.conditions.type.sun.sunset\"\n          )}\n        >\n          <ha-radio\n            name=\"before\"\n            value=\"sunset\"\n            .checked=${before === \"sunset\"}\n            @change=${this._radioGroupPicked}\n          ></ha-radio>\n        </ha-formfield>\n      </label>\n\n      <paper-input\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.conditions.type.sun.before_offset\"\n        )}\n        name=\"before_offset\"\n        .value=${before_offset}\n        @value-changed=${this._valueChanged}\n      ></paper-input>\n\n      <label>\n        ${this.hass.localize(\n          \"ui.panel.config.automation.editor.conditions.type.sun.after\"\n        )}\n\n        <ha-formfield\n          .label=${this.hass.localize(\n            \"ui.panel.config.automation.editor.conditions.type.sun.sunrise\"\n          )}\n        >\n          <ha-radio\n            name=\"after\"\n            value=\"sunrise\"\n            .checked=${after === \"sunrise\"}\n            @change=${this._radioGroupPicked}\n          ></ha-radio>\n        </ha-formfield>\n        <ha-formfield\n          .label=${this.hass.localize(\n            \"ui.panel.config.automation.editor.conditions.type.sun.sunset\"\n          )}\n        >\n          <ha-radio\n            name=\"after\"\n            value=\"sunset\"\n            .checked=${after === \"sunset\"}\n            @change=${this._radioGroupPicked}\n          ></ha-radio>\n        </ha-formfield>\n      </label>\n\n      <paper-input\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.conditions.type.sun.after_offset\"\n        )}\n        name=\"after_offset\"\n        .value=${after_offset}\n        @value-changed=${this._valueChanged}\n      ></paper-input>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    handleChangeEvent(this, ev);\n  }\n\n  private _radioGroupPicked(ev: CustomEvent) {\n    const key = (ev.target as HaRadio).name;\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.condition,\n        [key]: (ev.target as HaRadio).value,\n      },\n    });\n  }\n\n  static styles = css`\n    label {\n      display: flex;\n      align-items: center;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-sun\": HaSunCondition;\n  }\n}\n","import \"@polymer/paper-input/paper-textarea\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { TemplateCondition } from \"../../../../../data/automation\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { handleChangeEvent } from \"../ha-automation-condition-row\";\n\n@customElement(\"ha-automation-condition-template\")\nexport class HaTemplateCondition extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public condition!: TemplateCondition;\n\n  public static get defaultConfig() {\n    return { value_template: \"\" };\n  }\n\n  protected render() {\n    const { value_template } = this.condition;\n    return html`\n      <paper-textarea\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.conditions.type.template.value_template\"\n        )}\n        name=\"value_template\"\n        .value=${value_template}\n        @value-changed=${this._valueChanged}\n        dir=\"ltr\"\n      ></paper-textarea>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    handleChangeEvent(this, ev);\n  }\n}\n","import { Radio } from \"@material/mwc-radio\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { computeRTLDirection } from \"../../../../../common/util/compute_rtl\";\nimport \"../../../../../components/ha-formfield\";\nimport \"../../../../../components/ha-radio\";\nimport { HaSwitch } from \"../../../../../components/ha-switch\";\nimport { TimeCondition } from \"../../../../../data/automation\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport {\n  ConditionElement,\n  handleChangeEvent,\n} from \"../ha-automation-condition-row\";\nimport \"../../../../../components/ha-time-input\";\n\nconst includeDomains = [\"input_datetime\"];\n\nconst DAYS = {\n  mon: 1,\n  tue: 2,\n  wed: 3,\n  thu: 4,\n  fri: 5,\n  sat: 6,\n  sun: 7,\n};\n\ninterface WeekdayHaSwitch extends HaSwitch {\n  day: string;\n}\n\n@customElement(\"ha-automation-condition-time\")\nexport class HaTimeCondition extends LitElement implements ConditionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public condition!: TimeCondition;\n\n  @state() private _inputModeBefore?: boolean;\n\n  @state() private _inputModeAfter?: boolean;\n\n  public static get defaultConfig() {\n    return {};\n  }\n\n  protected render() {\n    const { after, before, weekday } = this.condition;\n\n    const inputModeBefore =\n      this._inputModeBefore ?? before?.startsWith(\"input_datetime.\");\n    const inputModeAfter =\n      this._inputModeAfter ?? after?.startsWith(\"input_datetime.\");\n\n    return html`\n      <ha-formfield\n        .label=${this.hass!.localize(\n          \"ui.panel.config.automation.editor.conditions.type.time.type_value\"\n        )}\n      >\n        <ha-radio\n          @change=${this._handleModeChanged}\n          name=\"mode_after\"\n          value=\"value\"\n          ?checked=${!inputModeAfter}\n        ></ha-radio>\n      </ha-formfield>\n      <ha-formfield\n        .label=${this.hass!.localize(\n          \"ui.panel.config.automation.editor.conditions.type.time.type_input\"\n        )}\n      >\n        <ha-radio\n          @change=${this._handleModeChanged}\n          name=\"mode_after\"\n          value=\"input\"\n          ?checked=${inputModeAfter}\n        ></ha-radio>\n      </ha-formfield>\n      ${inputModeAfter\n        ? html`<ha-entity-picker\n            .label=${this.hass.localize(\n              \"ui.panel.config.automation.editor.conditions.type.time.after\"\n            )}\n            .includeDomains=${includeDomains}\n            .name=${\"after\"}\n            .value=${after?.startsWith(\"input_datetime.\") ? after : \"\"}\n            @value-changed=${this._valueChanged}\n            .hass=${this.hass}\n            allow-custom-entity\n          ></ha-entity-picker>`\n        : html`<ha-time-input\n            .label=${this.hass.localize(\n              \"ui.panel.config.automation.editor.conditions.type.time.after\"\n            )}\n            .locale=${this.hass.locale}\n            .name=${\"after\"}\n            .value=${after?.startsWith(\"input_datetime.\") ? \"\" : after}\n            @value-changed=${this._valueChanged}\n          ></ha-time-input>`}\n\n      <ha-formfield\n        .label=${this.hass!.localize(\n          \"ui.panel.config.automation.editor.conditions.type.time.type_value\"\n        )}\n      >\n        <ha-radio\n          @change=${this._handleModeChanged}\n          name=\"mode_before\"\n          value=\"value\"\n          ?checked=${!inputModeBefore}\n        ></ha-radio>\n      </ha-formfield>\n      <ha-formfield\n        .label=${this.hass!.localize(\n          \"ui.panel.config.automation.editor.conditions.type.time.type_input\"\n        )}\n      >\n        <ha-radio\n          @change=${this._handleModeChanged}\n          name=\"mode_before\"\n          value=\"input\"\n          ?checked=${inputModeBefore}\n        ></ha-radio>\n      </ha-formfield>\n      ${inputModeBefore\n        ? html`<ha-entity-picker\n            .label=${this.hass.localize(\n              \"ui.panel.config.automation.editor.conditions.type.time.before\"\n            )}\n            .includeDomains=${includeDomains}\n            .name=${\"before\"}\n            .value=${before?.startsWith(\"input_datetime.\") ? before : \"\"}\n            @value-changed=${this._valueChanged}\n            .hass=${this.hass}\n            allow-custom-entity\n          ></ha-entity-picker>`\n        : html`<ha-time-input\n            .label=${this.hass.localize(\n              \"ui.panel.config.automation.editor.conditions.type.time.before\"\n            )}\n            .name=${\"before\"}\n            .locale=${this.hass.locale}\n            .value=${before?.startsWith(\"input_datetime.\") ? \"\" : before}\n            @value-changed=${this._valueChanged}\n          ></ha-time-input>`}\n      ${Object.keys(DAYS).map(\n        (day) => html`\n          <ha-formfield\n            alignEnd\n            spaceBetween\n            class=\"weekday-toggle\"\n            .label=${this.hass!.localize(\n              `ui.panel.config.automation.editor.conditions.type.time.weekdays.${day}`\n            )}\n            .dir=${computeRTLDirection(this.hass!)}\n          >\n            <ha-switch\n              .day=${day}\n              .checked=${!weekday || weekday === day || weekday.includes(day)}\n              @change=${this._dayValueChanged}\n            >\n            </ha-switch>\n          </ha-formfield>\n        `\n      )}\n    `;\n  }\n\n  private _handleModeChanged(ev: Event) {\n    const target = ev.target as Radio;\n    if (target.getAttribute(\"name\") === \"mode_after\") {\n      this._inputModeAfter = target.value === \"input\";\n    } else {\n      this._inputModeBefore = target.value === \"input\";\n    }\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    handleChangeEvent(this, ev);\n  }\n\n  private _dayValueChanged(ev: CustomEvent): void {\n    const daySwitch = ev.currentTarget as WeekdayHaSwitch;\n\n    let days: string[];\n\n    if (!this.condition.weekday) {\n      days = Object.keys(DAYS);\n    } else {\n      days = !Array.isArray(this.condition.weekday)\n        ? [this.condition.weekday]\n        : this.condition.weekday;\n    }\n\n    if (daySwitch.checked) {\n      days.push(daySwitch.day);\n    } else {\n      days = days.filter((d) => d !== daySwitch.day);\n    }\n\n    days.sort((a: string, b: string) => DAYS[a] - DAYS[b]);\n\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.condition, weekday: days },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .weekday-toggle {\n        display: flex;\n        height: 40px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-time\": HaTimeCondition;\n  }\n}\n","import \"@polymer/paper-dropdown-menu/paper-dropdown-menu-light\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { ensureArray } from \"../../../../../common/ensure-array\";\nimport {\n  AutomationConfig,\n  Trigger,\n  TriggerCondition,\n} from \"../../../../../data/automation\";\nimport { HomeAssistant } from \"../../../../../types\";\n\n@customElement(\"ha-automation-condition-trigger\")\nexport class HaTriggerCondition extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public condition!: TriggerCondition;\n\n  @state() private _triggers?: Trigger | Trigger[];\n\n  private _unsub?: UnsubscribeFunc;\n\n  public static get defaultConfig() {\n    return {\n      id: \"\",\n    };\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    const details = { callback: (config) => this._automationUpdated(config) };\n    fireEvent(this, \"subscribe-automation-config\", details);\n    this._unsub = (details as any).unsub;\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this._unsub) {\n      this._unsub();\n    }\n  }\n\n  protected render() {\n    const { id } = this.condition;\n    if (!this._triggers) {\n      return this.hass.localize(\n        \"ui.panel.config.automation.editor.conditions.type.trigger.no_triggers\"\n      );\n    }\n    return html`<paper-dropdown-menu-light\n      .label=${this.hass.localize(\n        \"ui.panel.config.automation.editor.conditions.type.trigger.id\"\n      )}\n      no-animations\n    >\n      <paper-listbox\n        slot=\"dropdown-content\"\n        .selected=${id}\n        attr-for-selected=\"data-trigger-id\"\n        @selected-item-changed=${this._triggerPicked}\n      >\n        ${ensureArray(this._triggers).map((trigger) =>\n          trigger.id\n            ? html`\n                <paper-item data-trigger-id=${trigger.id}>\n                  ${trigger.id}\n                </paper-item>\n              `\n            : \"\"\n        )}\n      </paper-listbox>\n    </paper-dropdown-menu-light>`;\n  }\n\n  private _automationUpdated(config?: AutomationConfig) {\n    this._triggers = config?.trigger;\n  }\n\n  private _triggerPicked(ev: CustomEvent) {\n    ev.stopPropagation();\n    if (!ev.detail.value) {\n      return;\n    }\n    const newTrigger = ev.detail.value.dataset.triggerId;\n    if (this.condition.id === newTrigger) {\n      return;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.condition, id: newTrigger },\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-trigger\": HaTriggerCondition;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { computeStateDomain } from \"../../../../../common/entity/compute_state_domain\";\nimport { hasLocation } from \"../../../../../common/entity/has_location\";\nimport \"../../../../../components/entity/ha-entity-picker\";\nimport { ZoneCondition } from \"../../../../../data/automation\";\nimport { PolymerChangedEvent } from \"../../../../../polymer-types\";\nimport { HomeAssistant } from \"../../../../../types\";\n\nfunction zoneAndLocationFilter(stateObj) {\n  return hasLocation(stateObj) && computeStateDomain(stateObj) !== \"zone\";\n}\n\nconst includeDomains = [\"zone\"];\n\n@customElement(\"ha-automation-condition-zone\")\nexport class HaZoneCondition extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public condition!: ZoneCondition;\n\n  public static get defaultConfig() {\n    return {\n      entity_id: \"\",\n      zone: \"\",\n    };\n  }\n\n  protected render() {\n    const { entity_id, zone } = this.condition;\n    return html`\n      <ha-entity-picker\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.conditions.type.zone.entity\"\n        )}\n        .value=${entity_id}\n        @value-changed=${this._entityPicked}\n        .hass=${this.hass}\n        allow-custom-entity\n        .entityFilter=${zoneAndLocationFilter}\n      ></ha-entity-picker>\n      <ha-entity-picker\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.conditions.type.zone.zone\"\n        )}\n        .value=${zone}\n        @value-changed=${this._zonePicked}\n        .hass=${this.hass}\n        allow-custom-entity\n        .includeDomains=${includeDomains}\n      ></ha-entity-picker>\n      <label id=\"eventlabel\">\n        ${this.hass.localize(\n          \"ui.panel.config.automation.editor.conditions.type.zone.event\"\n        )}\n      </label>\n    `;\n  }\n\n  private _entityPicked(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.condition, entity_id: ev.detail.value },\n    });\n  }\n\n  private _zonePicked(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.condition, zone: ev.detail.value },\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-zone\": HaZoneCondition;\n  }\n}\n","import { ActionDetail } from \"@material/mwc-list/mwc-list-foundation\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { mdiDotsVertical } from \"@mdi/js\";\nimport \"@material/mwc-select\";\nimport type { Select } from \"@material/mwc-select\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { dynamicElement } from \"../../../../common/dom/dynamic-element-directive\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { stringCompare } from \"../../../../common/string/compare\";\nimport { handleStructError } from \"../../../../common/structs/handle-errors\";\nimport { LocalizeFunc } from \"../../../../common/translations/localize\";\nimport \"../../../../components/ha-button-menu\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-alert\";\nimport \"../../../../components/ha-icon-button\";\nimport type { Trigger } from \"../../../../data/automation\";\nimport { showConfirmationDialog } from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport \"./types/ha-automation-trigger-device\";\nimport \"./types/ha-automation-trigger-event\";\nimport \"./types/ha-automation-trigger-geo_location\";\nimport \"./types/ha-automation-trigger-homeassistant\";\nimport \"./types/ha-automation-trigger-mqtt\";\nimport \"./types/ha-automation-trigger-numeric_state\";\nimport \"./types/ha-automation-trigger-state\";\nimport \"./types/ha-automation-trigger-sun\";\nimport \"./types/ha-automation-trigger-tag\";\nimport \"./types/ha-automation-trigger-template\";\nimport \"./types/ha-automation-trigger-time\";\nimport \"./types/ha-automation-trigger-time_pattern\";\nimport \"./types/ha-automation-trigger-webhook\";\nimport \"./types/ha-automation-trigger-zone\";\n\nconst OPTIONS = [\n  \"device\",\n  \"event\",\n  \"state\",\n  \"geo_location\",\n  \"homeassistant\",\n  \"mqtt\",\n  \"numeric_state\",\n  \"sun\",\n  \"tag\",\n  \"template\",\n  \"time\",\n  \"time_pattern\",\n  \"webhook\",\n  \"zone\",\n];\n\nexport interface TriggerElement extends LitElement {\n  trigger: Trigger;\n}\n\nexport const handleChangeEvent = (element: TriggerElement, ev: CustomEvent) => {\n  ev.stopPropagation();\n  const name = (ev.target as any)?.name;\n  if (!name) {\n    return;\n  }\n  const newVal = ev.detail.value;\n\n  if ((element.trigger[name] || \"\") === newVal) {\n    return;\n  }\n\n  let newTrigger: Trigger;\n  if (newVal === undefined || newVal === \"\") {\n    newTrigger = { ...element.trigger };\n    delete newTrigger[name];\n  } else {\n    newTrigger = { ...element.trigger, [name]: newVal };\n  }\n  fireEvent(element, \"value-changed\", { value: newTrigger });\n};\n\n@customElement(\"ha-automation-trigger-row\")\nexport default class HaAutomationTriggerRow extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public trigger!: Trigger;\n\n  @state() private _warnings?: string[];\n\n  @state() private _yamlMode = false;\n\n  private _processedTypes = memoizeOne(\n    (localize: LocalizeFunc): [string, string][] =>\n      OPTIONS.map(\n        (action) =>\n          [\n            action,\n            localize(\n              `ui.panel.config.automation.editor.triggers.type.${action}.label`\n            ),\n          ] as [string, string]\n      ).sort((a, b) => stringCompare(a[1], b[1]))\n  );\n\n  protected render() {\n    const selected = OPTIONS.indexOf(this.trigger.platform);\n    const yamlMode = this._yamlMode || selected === -1;\n\n    return html`\n      <ha-card>\n        <div class=\"card-content\">\n          <div class=\"card-menu\">\n            <ha-button-menu corner=\"BOTTOM_START\" @action=${this._handleAction}>\n              <ha-icon-button\n                slot=\"trigger\"\n                .label=${this.hass.localize(\"ui.common.menu\")}\n                .path=${mdiDotsVertical}\n              ></ha-icon-button>\n              <mwc-list-item .disabled=${selected === -1}>\n                ${yamlMode\n                  ? this.hass.localize(\n                      \"ui.panel.config.automation.editor.edit_ui\"\n                    )\n                  : this.hass.localize(\n                      \"ui.panel.config.automation.editor.edit_yaml\"\n                    )}\n              </mwc-list-item>\n              <mwc-list-item>\n                ${this.hass.localize(\n                  \"ui.panel.config.automation.editor.actions.duplicate\"\n                )}\n              </mwc-list-item>\n              <mwc-list-item class=\"warning\">\n                ${this.hass.localize(\n                  \"ui.panel.config.automation.editor.actions.delete\"\n                )}\n              </mwc-list-item>\n            </ha-button-menu>\n          </div>\n          ${this._warnings\n            ? html`<ha-alert\n                alert-type=\"warning\"\n                .title=${this.hass.localize(\n                  \"ui.errors.config.editor_not_supported\"\n                )}\n              >\n                ${this._warnings.length && this._warnings[0] !== undefined\n                  ? html` <ul>\n                      ${this._warnings.map(\n                        (warning) => html`<li>${warning}</li>`\n                      )}\n                    </ul>`\n                  : \"\"}\n                ${this.hass.localize(\"ui.errors.config.edit_in_yaml_supported\")}\n              </ha-alert>`\n            : \"\"}\n          ${yamlMode\n            ? html`\n                ${selected === -1\n                  ? html`\n                      ${this.hass.localize(\n                        \"ui.panel.config.automation.editor.triggers.unsupported_platform\",\n                        \"platform\",\n                        this.trigger.platform\n                      )}\n                    `\n                  : \"\"}\n                <h2>\n                  ${this.hass.localize(\n                    \"ui.panel.config.automation.editor.edit_yaml\"\n                  )}\n                </h2>\n                <ha-yaml-editor\n                  .defaultValue=${this.trigger}\n                  @value-changed=${this._onYamlChange}\n                ></ha-yaml-editor>\n              `\n            : html`\n                <mwc-select\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.automation.editor.triggers.type_select\"\n                  )}\n                  .value=${this.trigger.platform}\n                  naturalMenuWidth\n                  @selected=${this._typeChanged}\n                >\n                  ${this._processedTypes(this.hass.localize).map(\n                    ([opt, label]) => html`\n                      <mwc-list-item .value=${opt}>${label}</mwc-list-item>\n                    `\n                  )}\n                </mwc-select>\n\n                <paper-input\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.automation.editor.triggers.id\"\n                  )}\n                  .value=${this.trigger.id}\n                  @value-changed=${this._idChanged}\n                >\n                </paper-input>\n                <div @ui-mode-not-available=${this._handleUiModeNotAvailable}>\n                  ${dynamicElement(\n                    `ha-automation-trigger-${this.trigger.platform}`,\n                    { hass: this.hass, trigger: this.trigger }\n                  )}\n                </div>\n              `}\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private _handleUiModeNotAvailable(ev: CustomEvent) {\n    this._warnings = handleStructError(this.hass, ev.detail).warnings;\n    if (!this._yamlMode) {\n      this._yamlMode = true;\n    }\n  }\n\n  private _handleAction(ev: CustomEvent<ActionDetail>) {\n    switch (ev.detail.index) {\n      case 0:\n        this._switchYamlMode();\n        break;\n      case 1:\n        fireEvent(this, \"duplicate\");\n        break;\n      case 2:\n        this._onDelete();\n        break;\n    }\n  }\n\n  private _onDelete() {\n    showConfirmationDialog(this, {\n      text: this.hass.localize(\n        \"ui.panel.config.automation.editor.triggers.delete_confirm\"\n      ),\n      dismissText: this.hass.localize(\"ui.common.cancel\"),\n      confirmText: this.hass.localize(\"ui.common.delete\"),\n      confirm: () => {\n        fireEvent(this, \"value-changed\", { value: null });\n      },\n    });\n  }\n\n  private _typeChanged(ev: CustomEvent) {\n    const type = (ev.target as Select).value;\n\n    if (!type) {\n      return;\n    }\n\n    const elClass = customElements.get(\n      `ha-automation-trigger-${type}`\n    ) as CustomElementConstructor & {\n      defaultConfig: Omit<Trigger, \"platform\">;\n    };\n\n    if (type !== this.trigger.platform) {\n      const value = {\n        platform: type,\n        ...elClass.defaultConfig,\n      };\n      if (this.trigger.id) {\n        value.id = this.trigger.id;\n      }\n      fireEvent(this, \"value-changed\", {\n        value,\n      });\n    }\n  }\n\n  private _idChanged(ev: CustomEvent) {\n    const newId = ev.detail.value;\n    if (newId === (this.trigger.id ?? \"\")) {\n      return;\n    }\n    const value = { ...this.trigger };\n    if (!newId) {\n      delete value.id;\n    } else {\n      value.id = newId;\n    }\n    fireEvent(this, \"value-changed\", {\n      value,\n    });\n  }\n\n  private _onYamlChange(ev: CustomEvent) {\n    ev.stopPropagation();\n    if (!ev.detail.isValid) {\n      return;\n    }\n    this._warnings = undefined;\n    fireEvent(this, \"value-changed\", { value: ev.detail.value });\n  }\n\n  private _switchYamlMode() {\n    this._warnings = undefined;\n    this._yamlMode = !this._yamlMode;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .card-menu {\n          float: right;\n          z-index: 3;\n          --mdc-theme-text-primary-on-background: var(--primary-text-color);\n        }\n        .rtl .card-menu {\n          float: left;\n        }\n        mwc-list-item[disabled] {\n          --mdc-theme-text-primary-on-background: var(--disabled-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-row\": HaAutomationTriggerRow;\n  }\n}\n","import \"@material/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-card\";\nimport { Trigger } from \"../../../../data/automation\";\nimport { HomeAssistant } from \"../../../../types\";\nimport \"./ha-automation-trigger-row\";\nimport { HaDeviceTrigger } from \"./types/ha-automation-trigger-device\";\n\n@customElement(\"ha-automation-trigger\")\nexport default class HaAutomationTrigger extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public triggers!: Trigger[];\n\n  protected render() {\n    return html`\n      ${this.triggers.map(\n        (trg, idx) => html`\n          <ha-automation-trigger-row\n            .index=${idx}\n            .trigger=${trg}\n            @duplicate=${this._duplicateTrigger}\n            @value-changed=${this._triggerChanged}\n            .hass=${this.hass}\n          ></ha-automation-trigger-row>\n        `\n      )}\n      <ha-card>\n        <div class=\"card-actions add-card\">\n          <mwc-button @click=${this._addTrigger}>\n            ${this.hass.localize(\n              \"ui.panel.config.automation.editor.triggers.add\"\n            )}\n          </mwc-button>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private _addTrigger() {\n    const triggers = this.triggers.concat({\n      platform: \"device\",\n      ...HaDeviceTrigger.defaultConfig,\n    });\n\n    fireEvent(this, \"value-changed\", { value: triggers });\n  }\n\n  private _triggerChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const triggers = [...this.triggers];\n    const newValue = ev.detail.value;\n    const index = (ev.target as any).index;\n\n    if (newValue === null) {\n      triggers.splice(index, 1);\n    } else {\n      triggers[index] = newValue;\n    }\n\n    fireEvent(this, \"value-changed\", { value: triggers });\n  }\n\n  private _duplicateTrigger(ev: CustomEvent) {\n    ev.stopPropagation();\n    const index = (ev.target as any).index;\n    fireEvent(this, \"value-changed\", {\n      value: this.triggers.concat(this.triggers[index]),\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-automation-trigger-row,\n      ha-card {\n        display: block;\n        margin-top: 16px;\n      }\n      .add-card mwc-button {\n        display: block;\n        text-align: center;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger\": HaAutomationTrigger;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/device/ha-device-picker\";\nimport \"../../../../../components/device/ha-device-trigger-picker\";\nimport \"../../../../../components/ha-form/ha-form\";\nimport {\n  deviceAutomationsEqual,\n  DeviceCapabilities,\n  DeviceTrigger,\n  fetchDeviceTriggerCapabilities,\n} from \"../../../../../data/device_automation\";\nimport { HomeAssistant } from \"../../../../../types\";\n\n@customElement(\"ha-automation-trigger-device\")\nexport class HaDeviceTrigger extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Object }) public trigger!: DeviceTrigger;\n\n  @state() private _deviceId?: string;\n\n  @state() private _capabilities?: DeviceCapabilities;\n\n  private _origTrigger?: DeviceTrigger;\n\n  public static get defaultConfig() {\n    return {\n      device_id: \"\",\n      domain: \"\",\n      entity_id: \"\",\n    };\n  }\n\n  private _extraFieldsData = memoizeOne(\n    (trigger: DeviceTrigger, capabilities: DeviceCapabilities) => {\n      const extraFieldsData: Record<string, any> = {};\n      capabilities.extra_fields.forEach((item) => {\n        if (trigger[item.name] !== undefined) {\n          extraFieldsData![item.name] = trigger[item.name];\n        }\n      });\n      return extraFieldsData;\n    }\n  );\n\n  protected render() {\n    const deviceId = this._deviceId || this.trigger.device_id;\n\n    return html`\n      <ha-device-picker\n        .value=${deviceId}\n        @value-changed=${this._devicePicked}\n        .hass=${this.hass}\n        label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.device.label\"\n        )}\n      ></ha-device-picker>\n      <ha-device-trigger-picker\n        .value=${this.trigger}\n        .deviceId=${deviceId}\n        @value-changed=${this._deviceTriggerPicked}\n        .hass=${this.hass}\n        label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.device.trigger\"\n        )}\n      ></ha-device-trigger-picker>\n      ${this._capabilities?.extra_fields\n        ? html`\n            <ha-form\n              .data=${this._extraFieldsData(this.trigger, this._capabilities)}\n              .schema=${this._capabilities.extra_fields}\n              .computeLabel=${this._extraFieldsComputeLabelCallback(\n                this.hass.localize\n              )}\n              @value-changed=${this._extraFieldsChanged}\n            ></ha-form>\n          `\n        : \"\"}\n    `;\n  }\n\n  protected firstUpdated() {\n    if (!this._capabilities) {\n      this._getCapabilities();\n    }\n    if (this.trigger) {\n      this._origTrigger = this.trigger;\n    }\n  }\n\n  protected updated(changedPros) {\n    if (!changedPros.has(\"trigger\")) {\n      return;\n    }\n    const prevTrigger = changedPros.get(\"trigger\");\n    if (prevTrigger && !deviceAutomationsEqual(prevTrigger, this.trigger)) {\n      this._getCapabilities();\n    }\n  }\n\n  private async _getCapabilities() {\n    const trigger = this.trigger;\n\n    this._capabilities = trigger.domain\n      ? await fetchDeviceTriggerCapabilities(this.hass, trigger)\n      : undefined;\n  }\n\n  private _devicePicked(ev) {\n    ev.stopPropagation();\n    this._deviceId = ev.target.value;\n  }\n\n  private _deviceTriggerPicked(ev) {\n    ev.stopPropagation();\n    let trigger = ev.detail.value;\n    if (\n      this._origTrigger &&\n      deviceAutomationsEqual(this._origTrigger, trigger)\n    ) {\n      trigger = this._origTrigger;\n    }\n    if (this.trigger.id) {\n      trigger.id = this.trigger.id;\n    }\n    fireEvent(this, \"value-changed\", { value: trigger });\n  }\n\n  private _extraFieldsChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.trigger,\n        ...ev.detail.value,\n      },\n    });\n  }\n\n  private _extraFieldsComputeLabelCallback(localize) {\n    // Returns a callback for ha-form to calculate labels per schema object\n    return (schema) =>\n      localize(\n        `ui.panel.config.automation.editor.triggers.type.device.extra_fields.${schema.name}`\n      ) || schema.name;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-device\": HaDeviceTrigger;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/ha-yaml-editor\";\nimport \"../../../../../components/user/ha-users-picker\";\nimport { EventTrigger } from \"../../../../../data/automation\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport {\n  handleChangeEvent,\n  TriggerElement,\n} from \"../ha-automation-trigger-row\";\n\n@customElement(\"ha-automation-trigger-event\")\nexport class HaEventTrigger extends LitElement implements TriggerElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public trigger!: EventTrigger;\n\n  public static get defaultConfig() {\n    return { event_type: \"\" };\n  }\n\n  protected render() {\n    const { event_type, event_data, context } = this.trigger;\n    return html`\n      <paper-input\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.event.event_type\"\n        )}\n        name=\"event_type\"\n        .value=${event_type}\n        @value-changed=${this._valueChanged}\n      ></paper-input>\n      <ha-yaml-editor\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.event.event_data\"\n        )}\n        .name=${\"event_data\"}\n        .defaultValue=${event_data}\n        @value-changed=${this._dataChanged}\n      ></ha-yaml-editor>\n      <br />\n      ${this.hass.localize(\n        \"ui.panel.config.automation.editor.triggers.type.event.context_users\"\n      )}\n      <ha-users-picker\n        .pickedUserLabel=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.event.context_user_picked\"\n        )}\n        .pickUserLabel=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.event.context_user_pick\"\n        )}\n        .hass=${this.hass}\n        .value=${this._wrapUsersInArray(context?.user_id)}\n        @value-changed=${this._usersChanged}\n      ></ha-users-picker>\n    `;\n  }\n\n  private _wrapUsersInArray(user_id: string | string[] | undefined): string[] {\n    if (!user_id) {\n      return [];\n    }\n    if (typeof user_id === \"string\") {\n      return [user_id];\n    }\n    return user_id;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    handleChangeEvent(this, ev);\n  }\n\n  private _dataChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    if (!ev.detail.isValid) {\n      return;\n    }\n    handleChangeEvent(this, ev);\n  }\n\n  private _usersChanged(ev) {\n    ev.stopPropagation();\n    const value = { ...this.trigger };\n    if (!ev.detail.value.length && value.context) {\n      delete value.context.user_id;\n    } else {\n      if (!value.context) {\n        value.context = {};\n      }\n      value.context.user_id = ev.detail.value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value,\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-event\": HaEventTrigger;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/entity/ha-entity-picker\";\nimport type { HaRadio } from \"../../../../../components/ha-radio\";\nimport type { GeoLocationTrigger } from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport { handleChangeEvent } from \"../ha-automation-trigger-row\";\n\nconst includeDomains = [\"zone\"];\n\n@customElement(\"ha-automation-trigger-geo_location\")\nexport class HaGeolocationTrigger extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public trigger!: GeoLocationTrigger;\n\n  public static get defaultConfig() {\n    return {\n      source: \"\",\n      zone: \"\",\n      event: \"enter\" as GeoLocationTrigger[\"event\"],\n    };\n  }\n\n  protected render() {\n    const { source, zone, event } = this.trigger;\n\n    return html`\n      <paper-input\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.geo_location.source\"\n        )}\n        name=\"source\"\n        .value=${source}\n        @value-changed=${this._valueChanged}\n      ></paper-input>\n      <ha-entity-picker\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.geo_location.zone\"\n        )}\n        .value=${zone}\n        @value-changed=${this._zonePicked}\n        .hass=${this.hass}\n        allow-custom-entity\n        .includeDomains=${includeDomains}\n      ></ha-entity-picker>\n      <label>\n        ${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.geo_location.event\"\n        )}\n        <ha-formfield\n          .label=${this.hass.localize(\n            \"ui.panel.config.automation.editor.triggers.type.geo_location.enter\"\n          )}\n        >\n          <ha-radio\n            name=\"event\"\n            value=\"enter\"\n            .checked=${event === \"enter\"}\n            @change=${this._radioGroupPicked}\n          ></ha-radio>\n        </ha-formfield>\n        <ha-formfield\n          .label=${this.hass.localize(\n            \"ui.panel.config.automation.editor.triggers.type.geo_location.leave\"\n          )}\n        >\n          <ha-radio\n            name=\"event\"\n            value=\"leave\"\n            .checked=${event === \"leave\"}\n            @change=${this._radioGroupPicked}\n          ></ha-radio>\n        </ha-formfield>\n      </label>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    handleChangeEvent(this, ev);\n  }\n\n  private _zonePicked(ev: CustomEvent) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.trigger, zone: ev.detail.value },\n    });\n  }\n\n  private _radioGroupPicked(ev: CustomEvent) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.trigger,\n        event: (ev.target as HaRadio).value,\n      },\n    });\n  }\n\n  static styles = css`\n    label {\n      display: flex;\n      align-items: center;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-geo_location\": HaGeolocationTrigger;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport type { HaRadio } from \"../../../../../components/ha-radio\";\nimport type { HassTrigger } from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport \"../../../../../components/ha-formfield\";\nimport \"../../../../../components/ha-radio\";\n\n@customElement(\"ha-automation-trigger-homeassistant\")\nexport class HaHassTrigger extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public trigger!: HassTrigger;\n\n  public static get defaultConfig() {\n    return {\n      event: \"start\" as HassTrigger[\"event\"],\n    };\n  }\n\n  protected render() {\n    const { event } = this.trigger;\n    return html`\n      <label id=\"eventlabel\">\n        ${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.homeassistant.event\"\n        )}\n        <ha-formfield\n          .label=${this.hass.localize(\n            \"ui.panel.config.automation.editor.triggers.type.homeassistant.start\"\n          )}\n        >\n          <ha-radio\n            name=\"event\"\n            value=\"start\"\n            .checked=${event === \"start\"}\n            @change=${this._radioGroupPicked}\n          ></ha-radio>\n        </ha-formfield>\n        <ha-formfield\n          .label=${this.hass.localize(\n            \"ui.panel.config.automation.editor.triggers.type.homeassistant.shutdown\"\n          )}\n        >\n          <ha-radio\n            name=\"event\"\n            value=\"shutdown\"\n            .checked=${event === \"shutdown\"}\n            @change=${this._radioGroupPicked}\n          ></ha-radio>\n        </ha-formfield>\n      </label>\n    `;\n  }\n\n  private _radioGroupPicked(ev) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.trigger,\n        event: (ev.target as HaRadio).value,\n      },\n    });\n  }\n\n  static styles = css`\n    label {\n      display: flex;\n      align-items: center;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-homeassistant\": HaHassTrigger;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { MqttTrigger } from \"../../../../../data/automation\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport {\n  handleChangeEvent,\n  TriggerElement,\n} from \"../ha-automation-trigger-row\";\n\n@customElement(\"ha-automation-trigger-mqtt\")\nexport class HaMQTTTrigger extends LitElement implements TriggerElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public trigger!: MqttTrigger;\n\n  public static get defaultConfig() {\n    return { topic: \"\" };\n  }\n\n  protected render() {\n    const { topic, payload } = this.trigger;\n    return html`\n      <paper-input\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.mqtt.topic\"\n        )}\n        name=\"topic\"\n        .value=${topic}\n        @value-changed=${this._valueChanged}\n      ></paper-input>\n      <paper-input\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.mqtt.payload\"\n        )}\n        name=\"payload\"\n        .value=${payload}\n        @value-changed=${this._valueChanged}\n      ></paper-input>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    handleChangeEvent(this, ev);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-mqtt\": HaMQTTTrigger;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-input/paper-textarea\";\nimport { html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { createDurationData } from \"../../../../../common/datetime/create_duration_data\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { hasTemplate } from \"../../../../../common/string/has-template\";\nimport \"../../../../../components/entity/ha-entity-picker\";\nimport { NumericStateTrigger } from \"../../../../../data/automation\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { handleChangeEvent } from \"../ha-automation-trigger-row\";\nimport \"../../../../../components/ha-duration-input\";\n\n@customElement(\"ha-automation-trigger-numeric_state\")\nexport class HaNumericStateTrigger extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public trigger!: NumericStateTrigger;\n\n  public willUpdate(changedProperties: PropertyValues) {\n    if (!changedProperties.has(\"trigger\")) {\n      return;\n    }\n    // Check for templates in trigger. If found, revert to YAML mode.\n    if (this.trigger && hasTemplate(this.trigger)) {\n      fireEvent(\n        this,\n        \"ui-mode-not-available\",\n        Error(this.hass.localize(\"ui.errors.config.no_template_editor_support\"))\n      );\n    }\n  }\n\n  public static get defaultConfig() {\n    return {\n      entity_id: \"\",\n    };\n  }\n\n  public render() {\n    const { value_template, entity_id, attribute, below, above } = this.trigger;\n    const trgFor = createDurationData(this.trigger.for);\n\n    return html`\n      <ha-entity-picker\n        .value=${entity_id}\n        @value-changed=${this._valueChanged}\n        .name=${\"entity_id\"}\n        .hass=${this.hass}\n        allow-custom-entity\n      ></ha-entity-picker>\n      <ha-entity-attribute-picker\n        .hass=${this.hass}\n        .entityId=${entity_id}\n        .value=${attribute}\n        .name=${\"attribute\"}\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.state.attribute\"\n        )}\n        @value-changed=${this._valueChanged}\n        allow-custom-value\n      ></ha-entity-attribute-picker>\n      <paper-input\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.numeric_state.above\"\n        )}\n        name=\"above\"\n        .value=${above}\n        @value-changed=${this._valueChanged}\n      ></paper-input>\n      <paper-input\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.numeric_state.below\"\n        )}\n        name=\"below\"\n        .value=${below}\n        @value-changed=${this._valueChanged}\n      ></paper-input>\n      <paper-textarea\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.numeric_state.value_template\"\n        )}\n        name=\"value_template\"\n        .value=${value_template}\n        @value-changed=${this._valueChanged}\n        dir=\"ltr\"\n      ></paper-textarea>\n      <ha-duration-input\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.state.for\"\n        )}\n        .name=${\"for\"}\n        .data=${trgFor}\n        @value-changed=${this._valueChanged}\n      ></ha-duration-input>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    handleChangeEvent(this, ev);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-numeric_state\": HaNumericStateTrigger;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport { html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport {\n  assert,\n  assign,\n  literal,\n  object,\n  optional,\n  string,\n  union,\n} from \"superstruct\";\nimport { createDurationData } from \"../../../../../common/datetime/create_duration_data\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { hasTemplate } from \"../../../../../common/string/has-template\";\nimport \"../../../../../components/entity/ha-entity-attribute-picker\";\nimport \"../../../../../components/entity/ha-entity-picker\";\nimport \"../../../../../components/ha-duration-input\";\nimport { StateTrigger } from \"../../../../../data/automation\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { baseTriggerStruct, forDictStruct } from \"../../structs\";\nimport {\n  handleChangeEvent,\n  TriggerElement,\n} from \"../ha-automation-trigger-row\";\n\nconst stateTriggerStruct = assign(\n  baseTriggerStruct,\n  object({\n    platform: literal(\"state\"),\n    entity_id: optional(string()),\n    attribute: optional(string()),\n    from: optional(string()),\n    to: optional(string()),\n    for: optional(union([string(), forDictStruct])),\n  })\n);\n\n@customElement(\"ha-automation-trigger-state\")\nexport class HaStateTrigger extends LitElement implements TriggerElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public trigger!: StateTrigger;\n\n  public static get defaultConfig() {\n    return { entity_id: \"\" };\n  }\n\n  public shouldUpdate(changedProperties: PropertyValues) {\n    if (!changedProperties.has(\"trigger\")) {\n      return true;\n    }\n    if (\n      this.trigger.for &&\n      typeof this.trigger.for === \"object\" &&\n      this.trigger.for.milliseconds === 0\n    ) {\n      delete this.trigger.for.milliseconds;\n    }\n    // Check for templates in trigger. If found, revert to YAML mode.\n    if (this.trigger && hasTemplate(this.trigger)) {\n      fireEvent(\n        this,\n        \"ui-mode-not-available\",\n        Error(this.hass.localize(\"ui.errors.config.no_template_editor_support\"))\n      );\n      return false;\n    }\n    try {\n      assert(this.trigger, stateTriggerStruct);\n    } catch (e: any) {\n      fireEvent(this, \"ui-mode-not-available\", e);\n      return false;\n    }\n    return true;\n  }\n\n  protected render() {\n    const { entity_id, attribute, to, from } = this.trigger;\n    const trgFor = createDurationData(this.trigger.for);\n\n    return html`\n      <ha-entity-picker\n        .value=${entity_id}\n        @value-changed=${this._valueChanged}\n        .name=${\"entity_id\"}\n        .hass=${this.hass}\n        allow-custom-entity\n      ></ha-entity-picker>\n      <ha-entity-attribute-picker\n        .hass=${this.hass}\n        .entityId=${entity_id}\n        .value=${attribute}\n        .name=${\"attribute\"}\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.state.attribute\"\n        )}\n        @value-changed=${this._valueChanged}\n        allow-custom-value\n      ></ha-entity-attribute-picker>\n      <paper-input\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.state.from\"\n        )}\n        .name=${\"from\"}\n        .value=${from}\n        @value-changed=${this._valueChanged}\n      ></paper-input>\n      <paper-input\n        label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.state.to\"\n        )}\n        .name=${\"to\"}\n        .value=${to}\n        @value-changed=${this._valueChanged}\n      ></paper-input>\n      <ha-duration-input\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.state.for\"\n        )}\n        .name=${\"for\"}\n        .data=${trgFor}\n        @value-changed=${this._valueChanged}\n      ></ha-duration-input>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    handleChangeEvent(this, ev);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-state\": HaStateTrigger;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/ha-radio\";\nimport \"../../../../../components/ha-formfield\";\nimport type { HaRadio } from \"../../../../../components/ha-radio\";\nimport type { SunTrigger } from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport {\n  handleChangeEvent,\n  TriggerElement,\n} from \"../ha-automation-trigger-row\";\n\n@customElement(\"ha-automation-trigger-sun\")\nexport class HaSunTrigger extends LitElement implements TriggerElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public trigger!: SunTrigger;\n\n  public static get defaultConfig() {\n    return {\n      event: \"sunrise\" as SunTrigger[\"event\"],\n      offset: 0,\n    };\n  }\n\n  protected render() {\n    const { offset, event } = this.trigger;\n    return html`\n      <label>\n        ${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.sun.event\"\n        )}\n        <ha-formfield\n          .label=${this.hass.localize(\n            \"ui.panel.config.automation.editor.triggers.type.sun.sunrise\"\n          )}\n        >\n          <ha-radio\n            name=\"event\"\n            value=\"sunrise\"\n            .checked=${event === \"sunrise\"}\n            @change=${this._radioGroupPicked}\n          ></ha-radio>\n        </ha-formfield>\n        <ha-formfield\n          .label=${this.hass.localize(\n            \"ui.panel.config.automation.editor.triggers.type.sun.sunset\"\n          )}\n        >\n          <ha-radio\n            name=\"event\"\n            value=\"sunset\"\n            .checked=${event === \"sunset\"}\n            @change=${this._radioGroupPicked}\n          ></ha-radio>\n        </ha-formfield>\n      </label>\n\n      <paper-input\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.sun.offset\"\n        )}\n        name=\"offset\"\n        .value=${offset}\n        @value-changed=${this._valueChanged}\n      ></paper-input>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    handleChangeEvent(this, ev);\n  }\n\n  private _radioGroupPicked(ev) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.trigger,\n        event: (ev.target as HaRadio).value,\n      },\n    });\n  }\n\n  static styles = css`\n    label {\n      display: flex;\n      align-items: center;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-sun\": HaSunTrigger;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport { html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { TagTrigger } from \"../../../../../data/automation\";\nimport { fetchTags, Tag } from \"../../../../../data/tag\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { TriggerElement } from \"../ha-automation-trigger-row\";\nimport \"../../../../../components/ha-paper-dropdown-menu\";\nimport { caseInsensitiveStringCompare } from \"../../../../../common/string/compare\";\n\n@customElement(\"ha-automation-trigger-tag\")\nexport class HaTagTrigger extends LitElement implements TriggerElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public trigger!: TagTrigger;\n\n  @state() private _tags: Tag[] = [];\n\n  public static get defaultConfig() {\n    return { tag_id: \"\" };\n  }\n\n  protected firstUpdated(changedProperties: PropertyValues) {\n    super.firstUpdated(changedProperties);\n    this._fetchTags();\n  }\n\n  protected render() {\n    const { tag_id } = this.trigger;\n    return html`\n      <ha-paper-dropdown-menu\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.tag.label\"\n        )}\n        ?disabled=${this._tags.length === 0}\n      >\n        <paper-listbox\n          slot=\"dropdown-content\"\n          .selected=${tag_id}\n          attr-for-selected=\"tag_id\"\n          @iron-select=${this._tagChanged}\n        >\n          ${this._tags.map(\n            (tag) => html`\n              <paper-item tag_id=${tag.id} .tag=${tag}>\n                ${tag.name || tag.id}\n              </paper-item>\n            `\n          )}\n        </paper-listbox>\n      </ha-paper-dropdown-menu>\n    `;\n  }\n\n  private async _fetchTags() {\n    this._tags = await fetchTags(this.hass);\n    this._tags.sort((a, b) =>\n      caseInsensitiveStringCompare(a.name || a.id, b.name || b.id)\n    );\n  }\n\n  private _tagChanged(ev) {\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.trigger,\n        tag_id: ev.detail.item.tag.id,\n      },\n    });\n  }\n}\n","import \"@polymer/paper-input/paper-textarea\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { TemplateTrigger } from \"../../../../../data/automation\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { handleChangeEvent } from \"../ha-automation-trigger-row\";\n\n@customElement(\"ha-automation-trigger-template\")\nexport class HaTemplateTrigger extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public trigger!: TemplateTrigger;\n\n  public static get defaultConfig() {\n    return { value_template: \"\" };\n  }\n\n  protected render() {\n    const { value_template } = this.trigger;\n    return html`\n      <paper-textarea\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.template.value_template\"\n        )}\n        name=\"value_template\"\n        .value=${value_template}\n        @value-changed=${this._valueChanged}\n        dir=\"ltr\"\n      ></paper-textarea>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    handleChangeEvent(this, ev);\n  }\n}\n","import { html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../../../../components/entity/ha-entity-picker\";\nimport \"../../../../../components/ha-formfield\";\nimport \"../../../../../components/ha-radio\";\nimport { TimeTrigger } from \"../../../../../data/automation\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport {\n  handleChangeEvent,\n  TriggerElement,\n} from \"../ha-automation-trigger-row\";\nimport \"../../../../../components/ha-time-input\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\n\nconst includeDomains = [\"input_datetime\"];\n@customElement(\"ha-automation-trigger-time\")\nexport class HaTimeTrigger extends LitElement implements TriggerElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public trigger!: TimeTrigger;\n\n  @state() private _inputMode?: boolean;\n\n  public static get defaultConfig() {\n    return { at: \"\" };\n  }\n\n  public willUpdate(changedProperties: PropertyValues) {\n    if (!changedProperties.has(\"trigger\")) {\n      return;\n    }\n    // We dont support multiple times atm.\n    if (this.trigger && Array.isArray(this.trigger.at)) {\n      fireEvent(\n        this,\n        \"ui-mode-not-available\",\n        Error(this.hass.localize(\"ui.errors.config.editor_not_supported\"))\n      );\n    }\n  }\n\n  protected render() {\n    const at = this.trigger.at;\n\n    if (Array.isArray(at)) {\n      return html``;\n    }\n\n    const inputMode =\n      this._inputMode ??\n      (at?.startsWith(\"input_datetime.\") || at?.startsWith(\"sensor.\"));\n\n    return html`<ha-formfield\n        .label=${this.hass!.localize(\n          \"ui.panel.config.automation.editor.triggers.type.time.type_value\"\n        )}\n      >\n        <ha-radio\n          @change=${this._handleModeChanged}\n          name=\"mode\"\n          value=\"value\"\n          ?checked=${!inputMode}\n        ></ha-radio>\n      </ha-formfield>\n      <ha-formfield\n        .label=${this.hass!.localize(\n          \"ui.panel.config.automation.editor.triggers.type.time.type_input\"\n        )}\n      >\n        <ha-radio\n          @change=${this._handleModeChanged}\n          name=\"mode\"\n          value=\"input\"\n          ?checked=${inputMode}\n        ></ha-radio>\n      </ha-formfield>\n\n      ${inputMode\n        ? html`<ha-entity-picker\n            .label=${this.hass.localize(\n              \"ui.panel.config.automation.editor.triggers.type.time.at\"\n            )}\n            .includeDomains=${includeDomains}\n            .name=${\"at\"}\n            .value=${at?.startsWith(\"input_datetime.\") ||\n            at?.startsWith(\"sensor.\")\n              ? at\n              : \"\"}\n            @value-changed=${this._valueChanged}\n            .hass=${this.hass}\n            allow-custom-entity\n          ></ha-entity-picker>`\n        : html`<ha-time-input\n            .label=${this.hass.localize(\n              \"ui.panel.config.automation.editor.triggers.type.time.at\"\n            )}\n            .name=${\"at\"}\n            .value=${at?.startsWith(\"input_datetime.\") ||\n            at?.startsWith(\"sensor.\")\n              ? \"\"\n              : at}\n            .locale=${this.hass.locale}\n            @value-changed=${this._valueChanged}\n          ></ha-time-input>`} `;\n  }\n\n  private _handleModeChanged(ev: Event) {\n    this._inputMode = (ev.target as any).value === \"input\";\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    handleChangeEvent(this, ev);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-time\": HaTimeTrigger;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { TimePatternTrigger } from \"../../../../../data/automation\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport {\n  handleChangeEvent,\n  TriggerElement,\n} from \"../ha-automation-trigger-row\";\n\n@customElement(\"ha-automation-trigger-time_pattern\")\nexport class HaTimePatternTrigger extends LitElement implements TriggerElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public trigger!: TimePatternTrigger;\n\n  public static get defaultConfig() {\n    return {};\n  }\n\n  protected render() {\n    const { hours, minutes, seconds } = this.trigger;\n    return html`\n      <paper-input\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.time_pattern.hours\"\n        )}\n        name=\"hours\"\n        .value=${hours}\n        @value-changed=${this._valueChanged}\n      ></paper-input>\n      <paper-input\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.time_pattern.minutes\"\n        )}\n        name=\"minutes\"\n        .value=${minutes}\n        @value-changed=${this._valueChanged}\n      ></paper-input>\n      <paper-input\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.time_pattern.seconds\"\n        )}\n        name=\"seconds\"\n        .value=${seconds}\n        @value-changed=${this._valueChanged}\n      ></paper-input>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    handleChangeEvent(this, ev);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-time_pattern\": HaTimePatternTrigger;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { WebhookTrigger } from \"../../../../../data/automation\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { handleChangeEvent } from \"../ha-automation-trigger-row\";\n\n@customElement(\"ha-automation-trigger-webhook\")\nexport class HaWebhookTrigger extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public trigger!: WebhookTrigger;\n\n  public static get defaultConfig() {\n    return {\n      webhook_id: \"\",\n    };\n  }\n\n  protected render() {\n    const { webhook_id: webhookId } = this.trigger;\n    return html`\n      <paper-input\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.webhook.webhook_id\"\n        )}\n        name=\"webhook_id\"\n        .value=${webhookId}\n        @value-changed=${this._valueChanged}\n      ></paper-input>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    handleChangeEvent(this, ev);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-webhook\": HaWebhookTrigger;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { computeStateDomain } from \"../../../../../common/entity/compute_state_domain\";\nimport { hasLocation } from \"../../../../../common/entity/has_location\";\nimport \"../../../../../components/entity/ha-entity-picker\";\nimport type { ZoneTrigger } from \"../../../../../data/automation\";\nimport type { PolymerChangedEvent } from \"../../../../../polymer-types\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport \"../../../../../components/ha-radio\";\nimport \"../../../../../components/ha-formfield\";\nimport type { HaRadio } from \"../../../../../components/ha-radio\";\n\nfunction zoneAndLocationFilter(stateObj) {\n  return hasLocation(stateObj) && computeStateDomain(stateObj) !== \"zone\";\n}\n\nconst includeDomains = [\"zone\"];\n\n@customElement(\"ha-automation-trigger-zone\")\nexport class HaZoneTrigger extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public trigger!: ZoneTrigger;\n\n  public static get defaultConfig() {\n    return {\n      entity_id: \"\",\n      zone: \"\",\n      event: \"enter\" as ZoneTrigger[\"event\"],\n    };\n  }\n\n  protected render() {\n    const { entity_id, zone, event } = this.trigger;\n    return html`\n      <ha-entity-picker\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.zone.entity\"\n        )}\n        .value=${entity_id}\n        @value-changed=${this._entityPicked}\n        .hass=${this.hass}\n        allow-custom-entity\n        .entityFilter=${zoneAndLocationFilter}\n      ></ha-entity-picker>\n      <ha-entity-picker\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.zone.zone\"\n        )}\n        .value=${zone}\n        @value-changed=${this._zonePicked}\n        .hass=${this.hass}\n        allow-custom-entity\n        .includeDomains=${includeDomains}\n      ></ha-entity-picker>\n\n      <label>\n        ${this.hass.localize(\n          \"ui.panel.config.automation.editor.triggers.type.zone.event\"\n        )}\n        <ha-formfield\n          .label=${this.hass.localize(\n            \"ui.panel.config.automation.editor.triggers.type.zone.enter\"\n          )}\n        >\n          <ha-radio\n            name=\"event\"\n            value=\"enter\"\n            .checked=${event === \"enter\"}\n            @change=${this._radioGroupPicked}\n          ></ha-radio>\n        </ha-formfield>\n        <ha-formfield\n          .label=${this.hass.localize(\n            \"ui.panel.config.automation.editor.triggers.type.zone.leave\"\n          )}\n        >\n          <ha-radio\n            name=\"event\"\n            value=\"leave\"\n            .checked=${event === \"leave\"}\n            @change=${this._radioGroupPicked}\n          ></ha-radio>\n        </ha-formfield>\n      </label>\n    `;\n  }\n\n  private _entityPicked(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.trigger, entity_id: ev.detail.value },\n    });\n  }\n\n  private _zonePicked(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: { ...this.trigger, zone: ev.detail.value },\n    });\n  }\n\n  private _radioGroupPicked(ev: CustomEvent) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.trigger,\n        event: (ev.target as HaRadio).value,\n      },\n    });\n  }\n\n  static styles = css`\n    label {\n      display: flex;\n      align-items: center;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-trigger-zone\": HaZoneTrigger;\n  }\n}\n"],"names":[],"sourceRoot":""}