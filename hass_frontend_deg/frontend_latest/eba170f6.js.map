{"version":3,"file":"eba170f6.js","mappings":";;;;;;;;;;;;;;;;AA+GA;;;;;;;;;;;ACLA;;;;;;;;;;;;;;ACrBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACwIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACgDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC4MA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5IA","sources":["webpack://home-assistant-frontend/./node_modules/@polymer/paper-dropdown-menu/paper-dropdown-menu.js","webpack://home-assistant-frontend/./node_modules/@polymer/paper-item/paper-item.js","webpack://home-assistant-frontend/./node_modules/@polymer/paper-listbox/paper-listbox.js","webpack://home-assistant-frontend/./node_modules/@vaadin/vaadin-date-picker/theme/material/vaadin-date-picker-overlay-styles.js","webpack://home-assistant-frontend/./node_modules/@vaadin/vaadin-button/theme/material/vaadin-button-styles.js","webpack://home-assistant-frontend/./node_modules/@vaadin/vaadin-button/src/vaadin-button.js","webpack://home-assistant-frontend/./node_modules/@vaadin/vaadin-date-picker/theme/material/vaadin-date-picker-overlay-content-styles.js","webpack://home-assistant-frontend/./node_modules/@vaadin/vaadin-date-picker/theme/material/vaadin-month-calendar-styles.js","webpack://home-assistant-frontend/./node_modules/@vaadin/vaadin-date-picker/src/vaadin-month-calendar.js","webpack://home-assistant-frontend/./node_modules/@vaadin/vaadin-date-picker/src/vaadin-infinite-scroller.js","webpack://home-assistant-frontend/./node_modules/@vaadin/vaadin-date-picker/src/vaadin-date-picker-styles.js","webpack://home-assistant-frontend/./node_modules/@vaadin/vaadin-date-picker/src/vaadin-date-picker-overlay-content.js","webpack://home-assistant-frontend/./node_modules/@vaadin/vaadin-date-picker/src/vaadin-date-picker-light.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js';\nimport '@polymer/iron-icon/iron-icon.js';\nimport '@polymer/paper-input/paper-input.js';\nimport '@polymer/paper-menu-button/paper-menu-button.js';\nimport '@polymer/paper-ripple/paper-ripple.js';\nimport '@polymer/paper-styles/default-theme.js';\nimport './paper-dropdown-menu-icons.js';\nimport './paper-dropdown-menu-shared-styles.js';\n\nimport {IronButtonState} from '@polymer/iron-behaviors/iron-button-state.js';\nimport {IronControlState} from '@polymer/iron-behaviors/iron-control-state.js';\nimport {IronFormElementBehavior} from '@polymer/iron-form-element-behavior/iron-form-element-behavior.js';\nimport {IronValidatableBehavior} from '@polymer/iron-validatable-behavior/iron-validatable-behavior.js';\nimport {LegacyElementMixin} from '@polymer/polymer/lib/legacy/legacy-element-mixin.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport * as gestures from '@polymer/polymer/lib/utils/gestures.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nimport {wrap} from '@polymer/polymer/lib/utils/wrap.js';\n\n// LegacyElementMixin dedupes and this is the base class for elements created\n// with the `Polymer` function, so this is only a cache lookup.\n// https://github.com/Polymer/polymer/blob/640bc80ac7177b761d46b2fa9c455c318f2b85c6/lib/legacy/class.js#L533-L534\nconst LegacyPolymerElementBase = LegacyElementMixin(HTMLElement);\n\n/**\nMaterial design: [Dropdown\nmenus](https://www.google.com/design/spec/components/buttons.html#buttons-dropdown-buttons)\n\n`paper-dropdown-menu` is similar to a native browser select element.\n`paper-dropdown-menu` works with selectable content. The currently selected\nitem is displayed in the control. If no item is selected, the `label` is\ndisplayed instead.\n\nExample:\n\n    <paper-dropdown-menu label=\"Your favourite pastry\">\n      <paper-listbox slot=\"dropdown-content\">\n        <paper-item>Croissant</paper-item>\n        <paper-item>Donut</paper-item>\n        <paper-item>Financier</paper-item>\n        <paper-item>Madeleine</paper-item>\n      </paper-listbox>\n    </paper-dropdown-menu>\n\nThis example renders a dropdown menu with 4 options.\n\nThe child element with the slot `dropdown-content` is used as the dropdown\nmenu. This can be a [`paper-listbox`](paper-listbox), or any other or\nelement that acts like an [`iron-selector`](iron-selector).\n\nSpecifically, the menu child must fire an\n[`iron-select`](iron-selector#event-iron-select) event when one of its\nchildren is selected, and an\n[`iron-deselect`](iron-selector#event-iron-deselect) event when a child is\ndeselected. The selected or deselected item must be passed as the event's\n`detail.item` property.\n\nApplications can listen for the `iron-select` and `iron-deselect` events\nto react when options are selected and deselected.\n\n### Styling\n\nThe following custom properties and mixins are also available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-dropdown-menu` | A mixin that is applied to the element host | `{}`\n`--paper-dropdown-menu-disabled` | A mixin that is applied to the element host when disabled | `{}`\n`--paper-dropdown-menu-ripple` | A mixin that is applied to the internal ripple | `{}`\n`--paper-dropdown-menu-button` | A mixin that is applied to the internal menu button | `{}`\n`--paper-dropdown-menu-input` | A mixin that is applied to the internal paper input | `{}`\n`--paper-dropdown-menu-icon` | A mixin that is applied to the internal icon | `{}`\n\nYou can also use any of the `paper-input-container` and `paper-menu-button`\nstyle mixins and custom properties to style the internal input and menu button\nrespectively.\n\n@element paper-dropdown-menu\n@demo demo/index.html\n*/\nPolymer({\n  /** @override */\n  _template: html`\n    <style include=\"paper-dropdown-menu-shared-styles\"></style>\n\n    <paper-menu-button id=\"menuButton\" vertical-align=\"[[verticalAlign]]\" horizontal-align=\"[[horizontalAlign]]\" dynamic-align=\"[[dynamicAlign]]\" vertical-offset=\"[[_computeMenuVerticalOffset(noLabelFloat, verticalOffset)]]\" disabled=\"[[disabled]]\" no-animations=\"[[noAnimations]]\" on-iron-select=\"_onIronSelect\" on-iron-deselect=\"_onIronDeselect\" opened=\"{{opened}}\" close-on-activate allow-outside-scroll=\"[[allowOutsideScroll]]\" restore-focus-on-close=\"[[restoreFocusOnClose]]\" expand-sizing-target-for-scrollbars=\"[[expandSizingTargetForScrollbars]]\">\n      <!-- support hybrid mode: user might be using paper-menu-button 1.x which distributes via <content> -->\n      <div class=\"dropdown-trigger\" slot=\"dropdown-trigger\">\n        <paper-ripple></paper-ripple>\n        <!-- paper-input has type=\"text\" for a11y, do not remove -->\n        <paper-input id=\"input\" type=\"text\" invalid=\"[[invalid]]\" readonly disabled=\"[[disabled]]\" value=\"[[value]]\" placeholder=\"[[placeholder]]\" error-message=\"[[errorMessage]]\" always-float-label=\"[[alwaysFloatLabel]]\" no-label-float=\"[[noLabelFloat]]\" label=\"[[label]]\" input-role=\"button\" input-aria-haspopup=\"listbox\" autocomplete=\"off\">\n          <!-- support hybrid mode: user might be using paper-input 1.x which distributes via <content> -->\n          <iron-icon icon=\"paper-dropdown-menu:arrow-drop-down\" suffix slot=\"suffix\"></iron-icon>\n        </paper-input>\n      </div>\n      <slot id=\"content\" name=\"dropdown-content\" slot=\"dropdown-content\"></slot>\n    </paper-menu-button>\n`,\n\n  is: 'paper-dropdown-menu',\n\n  behaviors: [\n    IronButtonState,\n    IronControlState,\n    IronFormElementBehavior,\n    IronValidatableBehavior\n  ],\n\n  properties: {\n    /**\n     * The derived \"label\" of the currently selected item. This value\n     * is the `label` property on the selected item if set, or else the\n     * trimmed text content of the selected item.\n     */\n    selectedItemLabel: {type: String, notify: true, readOnly: true},\n\n    /**\n     * The last selected item. An item is selected if the dropdown menu has\n     * a child with slot `dropdown-content`, and that child triggers an\n     * `iron-select` event with the selected `item` in the `detail`.\n     *\n     * @type {?Object}\n     */\n    selectedItem: {type: Object, notify: true, readOnly: true},\n\n    /**\n     * The value for this element that will be used when submitting in\n     * a form. It reflects the value of `selectedItemLabel`. If set directly,\n     * it will not update the `selectedItemLabel` value.\n     */\n    value: {\n      type: String,\n      notify: true,\n    },\n\n    /**\n     * The label for the dropdown.\n     */\n    label: {type: String},\n\n    /**\n     * The placeholder for the dropdown.\n     */\n    placeholder: {type: String},\n\n    /**\n     * The error message to display when invalid.\n     */\n    errorMessage: {type: String},\n\n    /**\n     * True if the dropdown is open. Otherwise, false.\n     */\n    opened:\n        {type: Boolean, notify: true, value: false, observer: '_openedChanged'},\n\n    /**\n     * By default, the dropdown will constrain scrolling on the page\n     * to itself when opened.\n     * Set to true in order to prevent scroll from being constrained\n     * to the dropdown when it opens.\n     */\n    allowOutsideScroll: {type: Boolean, value: false},\n\n    /**\n     * Set to true to disable the floating label. Bind this to the\n     * `<paper-input-container>`'s `noLabelFloat` property.\n     */\n    noLabelFloat: {type: Boolean, value: false, reflectToAttribute: true},\n\n    /**\n     * Set to true to always float the label. Bind this to the\n     * `<paper-input-container>`'s `alwaysFloatLabel` property.\n     */\n    alwaysFloatLabel: {type: Boolean, value: false},\n\n    /**\n     * Set to true to disable animations when opening and closing the\n     * dropdown.\n     */\n    noAnimations: {type: Boolean, value: false},\n\n    /**\n     * The orientation against which to align the menu dropdown\n     * horizontally relative to the dropdown trigger.\n     */\n    horizontalAlign: {type: String, value: 'right'},\n\n    /**\n     * The orientation against which to align the menu dropdown\n     * vertically relative to the dropdown trigger.\n     */\n    verticalAlign: {type: String, value: 'top'},\n\n    /**\n     * Overrides the vertical offset computed in\n     * _computeMenuVerticalOffset.\n     */\n    verticalOffset: Number,\n\n    /**\n     * If true, the `horizontalAlign` and `verticalAlign` properties will\n     * be considered preferences instead of strict requirements when\n     * positioning the dropdown and may be changed if doing so reduces\n     * the area of the dropdown falling outside of `fitInto`.\n     */\n    dynamicAlign: {type: Boolean},\n\n    /**\n     * Whether focus should be restored to the dropdown when the menu closes.\n     */\n    restoreFocusOnClose: {type: Boolean, value: true},\n\n    /**\n     * If true and scrollbars are added to the dropdown after it is positioned,\n     * the size of the added scrollbars will be added to its `maxWidth` and\n     * `maxHeight`.\n     */\n    expandSizingTargetForScrollbars: {type: Boolean, value: false},\n  },\n\n  listeners: {'tap': '_onTap'},\n\n  /**\n   * @type {!Object}\n   */\n  keyBindings: {'up down': 'open', 'esc': 'close'},\n\n  observers: ['_selectedItemChanged(selectedItem)'],\n\n  /**\n   * Override `_attachDom` so that we can pass `delegatesFocus`. The overridden\n   * implementation of `_attachDom` specifically skips the steps performed here\n   * if the node already hosts a shadow root:\n   * https://github.com/Polymer/polymer/blob/640bc80ac7177b761d46b2fa9c455c318f2b85c6/lib/mixins/element-mixin.js#L691-L694\n   * @override\n   */\n  _attachDom(dom) {\n    const wrappedThis = wrap(this);\n    wrappedThis.attachShadow({\n      mode: 'open',\n      delegatesFocus: true,\n      shadyUpgradeFragment: dom,\n    });\n    wrappedThis.shadowRoot.appendChild(dom);\n    return LegacyPolymerElementBase.prototype._attachDom.call(this, dom);\n  },\n\n  /** @override */\n  focus() {\n    // When using Shady DOM and in browsers that don't support\n    // `delegatesFocus`, attempting to focus this element with the browser's\n    // native `HTMLElement#focus` will cause focus to be lost because this\n    // element isn't focusable in those situations. To work around this, the\n    // element in the shadow root that this element intends to delegate focus\n    // to is manually focused instead.\n    this.$.input._focusableElement.focus();\n  },\n\n  /** @override */\n  attached: function() {\n    // NOTE(cdata): Due to timing, a preselected value in a `IronSelectable`\n    // child will cause an `iron-select` event to fire while the element is\n    // still in a `DocumentFragment`. This has the effect of causing\n    // handlers not to fire. So, we double check this value on attached:\n    var contentElement = this.contentElement;\n    if (contentElement && contentElement.selectedItem) {\n      this._setSelectedItem(contentElement.selectedItem);\n    }\n  },\n\n  /**\n   * The content element that is contained by the dropdown menu, if any.\n   */\n  get contentElement() {\n    // Polymer 2.x returns slot.assignedNodes which can contain text nodes.\n    var nodes = dom(this.$.content).getDistributedNodes();\n    for (var i = 0, l = nodes.length; i < l; i++) {\n      if (nodes[i].nodeType === Node.ELEMENT_NODE) {\n        return nodes[i];\n      }\n    }\n  },\n\n  /**\n   * Show the dropdown content.\n   */\n  open: function() {\n    this.$.menuButton.open();\n  },\n\n  /**\n   * Hide the dropdown content.\n   */\n  close: function() {\n    this.$.menuButton.close();\n  },\n\n  /**\n   * A handler that is called when `iron-select` is fired.\n   *\n   * @param {CustomEvent} event An `iron-select` event.\n   */\n  _onIronSelect: function(event) {\n    this._setSelectedItem(event.detail.item);\n  },\n\n  /**\n   * A handler that is called when `iron-deselect` is fired.\n   *\n   * @param {CustomEvent} event An `iron-deselect` event.\n   */\n  _onIronDeselect: function(event) {\n    this._setSelectedItem(null);\n  },\n\n  /**\n   * A handler that is called when the dropdown is tapped.\n   *\n   * @param {CustomEvent} event A tap event.\n   */\n  _onTap: function(event) {\n    if (gestures.findOriginalTarget(event) === this) {\n      this.open();\n    }\n  },\n\n  /**\n   * Compute the label for the dropdown given a selected item.\n   *\n   * @param {Element} selectedItem A selected Element item, with an\n   * optional `label` property.\n   */\n  _selectedItemChanged: function(selectedItem) {\n    var value = '';\n    if (!selectedItem) {\n      value = '';\n    } else {\n      value = selectedItem.label || selectedItem.getAttribute('label') ||\n          selectedItem.textContent.trim();\n    }\n\n    this.value = value;\n    this._setSelectedItemLabel(value);\n  },\n\n  /**\n   * Compute the vertical offset of the menu based on the value of\n   * `noLabelFloat`.\n   *\n   * @param {boolean} noLabelFloat True if the label should not float\n   * @param {number=} opt_verticalOffset Optional offset from the user\n   * above the input, otherwise false.\n   */\n  _computeMenuVerticalOffset: function(noLabelFloat, opt_verticalOffset) {\n    // Override offset if it's passed from the user.\n    if (opt_verticalOffset) {\n      return opt_verticalOffset;\n    }\n\n    // NOTE(cdata): These numbers are somewhat magical because they are\n    // derived from the metrics of elements internal to `paper-input`'s\n    // template. The metrics will change depending on whether or not the\n    // input has a floating label.\n    return noLabelFloat ? -4 : 8;\n  },\n\n  /**\n   * Returns false if the element is required and does not have a selection,\n   * and true otherwise.\n   * @param {*=} _value Ignored.\n   * @return {boolean} true if `required` is false, or if `required` is true\n   * and the element has a valid selection.\n   */\n  _getValidity: function(_value) {\n    return this.disabled || !this.required || (this.required && !!this.value);\n  },\n\n  _openedChanged: function() {\n    var openState = this.opened ? 'true' : 'false';\n    var e = this.contentElement;\n    if (e) {\n      e.setAttribute('aria-expanded', openState);\n    }\n  }\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport './paper-item-shared-styles.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {PaperItemBehavior} from './paper-item-behavior.js';\n\n/**\nMaterial design:\n[Lists](https://www.google.com/design/spec/components/lists.html)\n\n`<paper-item>` is an interactive list item. By default, it is a horizontal\nflexbox.\n\n    <paper-item>Item</paper-item>\n\nUse this element with `<paper-item-body>` to make Material Design styled\ntwo-line and three-line items.\n\n    <paper-item>\n      <paper-item-body two-line>\n        <div>Show your status</div>\n        <div secondary>Your status is visible to everyone</div>\n      </paper-item-body>\n      <iron-icon icon=\"warning\"></iron-icon>\n    </paper-item>\n\nTo use `paper-item` as a link, wrap it in an anchor tag. Since `paper-item` will\nalready receive focus, you may want to prevent the anchor tag from receiving\nfocus as well by setting its tabindex to -1.\n\n    <a href=\"https://www.polymer-project.org/\" tabindex=\"-1\">\n      <paper-item raised>Polymer Project</paper-item>\n    </a>\n\nIf you are concerned about performance and want to use `paper-item` in a\n`paper-listbox` with many items, you can just use a native `button` with the\n`paper-item` class applied (provided you have correctly included the shared\nstyles):\n\n    <style is=\"custom-style\" include=\"paper-item-shared-styles\"></style>\n\n    <paper-listbox>\n      <button class=\"paper-item\" role=\"option\">Inbox</button>\n      <button class=\"paper-item\" role=\"option\">Starred</button>\n      <button class=\"paper-item\" role=\"option\">Sent mail</button>\n    </paper-listbox>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-min-height` | Minimum height of the item | `48px`\n`--paper-item` | Mixin applied to the item | `{}`\n`--paper-item-selected-weight` | The font weight of a selected item | `bold`\n`--paper-item-selected` | Mixin applied to selected paper-items | `{}`\n`--paper-item-disabled-color` | The color for disabled paper-items | `--disabled-text-color`\n`--paper-item-disabled` | Mixin applied to disabled paper-items | `{}`\n`--paper-item-focused` | Mixin applied to focused paper-items | `{}`\n`--paper-item-focused-before` | Mixin applied to :before focused paper-items | `{}`\n\n### Accessibility\n\nThis element has `role=\"listitem\"` by default. Depending on usage, it may be\nmore appropriate to set `role=\"menuitem\"`, `role=\"menuitemcheckbox\"` or\n`role=\"menuitemradio\"`.\n\n    <paper-item role=\"menuitemcheckbox\">\n      <paper-item-body>\n        Show your status\n      </paper-item-body>\n      <paper-checkbox></paper-checkbox>\n    </paper-item>\n\n@group Paper Elements\n@element paper-item\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style include=\"paper-item-shared-styles\">\n      :host {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n        @apply --paper-font-subhead;\n\n        @apply --paper-item;\n      }\n    </style>\n    <slot></slot>\n`,\n\n  is: 'paper-item',\n  behaviors: [PaperItemBehavior]\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/paper-styles/default-theme.js';\n\nimport {IronMenuBehavior} from '@polymer/iron-menu-behavior/iron-menu-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\nMaterial design:\n[Menus](https://www.google.com/design/spec/components/menus.html)\n\n`<paper-listbox>` implements an accessible listbox control with Material Design\nstyling. The focused item is highlighted, and the selected item has bolded text.\n\n    <paper-listbox>\n      <paper-item>Item 1</paper-item>\n      <paper-item>Item 2</paper-item>\n    </paper-listbox>\n\nAn initial selection can be specified with the `selected` attribute.\n\n    <paper-listbox selected=\"0\">\n      <paper-item>Item 1</paper-item>\n      <paper-item>Item 2</paper-item>\n    </paper-listbox>\n\nMake a multi-select listbox with the `multi` attribute. Items in a multi-select\nlistbox can be deselected, and multiple item can be selected.\n\n    <paper-listbox multi>\n      <paper-item>Item 1</paper-item>\n      <paper-item>Item 2</paper-item>\n    </paper-listbox>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-listbox-background-color`   | Menu background color |\n`--primary-background-color`\n`--paper-listbox-color`              | Menu foreground color |\n`--primary-text-color`\n`--paper-listbox`                    | Mixin applied to the listbox | `{}`\n\n### Accessibility\n\n`<paper-listbox>` has `role=\"listbox\"` by default. A multi-select listbox will\nalso have `aria-multiselectable` set. It implements key bindings to navigate\nthrough the listbox with the up and down arrow keys, esc to exit the listbox,\nand enter to activate a listbox item. Typing the first letter of a listbox item\nwill also focus it.\n\n@group Paper Elements\n@element paper-listbox\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n        padding: 8px 0;\n\n        background: var(--paper-listbox-background-color, var(--primary-background-color));\n        color: var(--paper-listbox-color, var(--primary-text-color));\n\n        @apply --paper-listbox;\n      }\n    </style>\n\n    <slot></slot>\n`,\n\n  is: 'paper-listbox',\n  behaviors: [IronMenuBehavior],\n\n  /** @private */\n  hostAttributes: {role: 'listbox'}\n});\n","import { registerStyles, css } from '@vaadin/vaadin-themable-mixin/register-styles.js';\nimport '@vaadin/vaadin-material-styles/mixins/overlay.js';\n\nregisterStyles(\n  'vaadin-date-picker-overlay',\n  css`\n    :host([fullscreen]) {\n      top: 0 !important;\n      right: 0 !important;\n      bottom: var(--vaadin-overlay-viewport-bottom) !important;\n      left: 0 !important;\n      align-items: stretch;\n      justify-content: stretch;\n    }\n\n    [part='overlay'] {\n      overflow: hidden;\n      -webkit-overflow-scrolling: auto;\n    }\n\n    :host(:not([fullscreen])) [part='overlay'] {\n      width: 360px;\n      max-height: 500px;\n      border-radius: 0 4px 4px;\n    }\n\n    :host(:not([fullscreen])[right-aligned]) [part='overlay'] {\n      border-radius: 4px 0 4px 4px;\n    }\n\n    :host(:not([fullscreen])[bottom-aligned]) [part='overlay'] {\n      border-radius: 4px;\n    }\n\n    :host(:not([fullscreen])[show-week-numbers]) [part='overlay'] {\n      width: 396px;\n    }\n\n    [part='content'] {\n      padding: 0;\n    }\n  `,\n  { include: ['material-overlay'], moduleId: 'material-date-picker-overlay' }\n);\n","import { registerStyles, css } from '@vaadin/vaadin-themable-mixin/register-styles.js';\nimport '@vaadin/vaadin-material-styles/color.js';\nimport '@vaadin/vaadin-material-styles/shadow.js';\nimport '@vaadin/vaadin-material-styles/typography.js';\n\nregisterStyles(\n  'vaadin-button',\n  css`\n    :host {\n      padding: 8px;\n      min-width: 64px;\n      box-sizing: border-box;\n      display: inline-flex;\n      align-items: baseline;\n      justify-content: center;\n      border-radius: 4px;\n      color: var(--material-primary-text-color);\n      font-family: var(--material-font-family);\n      text-transform: uppercase;\n      font-size: var(--material-button-font-size);\n      line-height: 20px;\n      font-weight: 500;\n      letter-spacing: 0.05em;\n      white-space: nowrap;\n      overflow: hidden;\n      transition: box-shadow 0.2s;\n      -webkit-tap-highlight-color: transparent;\n      -webkit-font-smoothing: antialiased;\n      -moz-osx-font-smoothing: grayscale;\n    }\n\n    @-moz-document url-prefix() {\n      :host {\n        vertical-align: -13px;\n      }\n    }\n\n    :host::before,\n    :host::after {\n      content: '';\n      pointer-events: none;\n      position: absolute;\n      border-radius: inherit;\n      opacity: 0;\n      background-color: currentColor;\n    }\n\n    :host::before {\n      width: 100%;\n      height: 100%;\n      top: 0;\n      left: 0;\n      transition: opacity 0.5s;\n    }\n\n    :host::after {\n      border-radius: 50%;\n      width: 320px;\n      height: 320px;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      transition: all 0.9s;\n    }\n\n    [part='label'] ::slotted(*) {\n      vertical-align: middle;\n    }\n\n    :host(:hover)::before,\n    :host([focus-ring])::before {\n      opacity: 0.08;\n      transition-duration: 0.2s;\n    }\n\n    :host([active])::before {\n      opacity: 0.16;\n      transition: opacity 0.4s;\n    }\n\n    :host([active])::after {\n      transform: translate(-50%, -50%) scale(0.0000001); /* animation works weirdly with scale(0) */\n      opacity: 0.1;\n      transition: 0s;\n    }\n\n    :host(:hover:not([active]))::after {\n      transform: translate(-50%, -50%) scale(1);\n      opacity: 0;\n    }\n\n    :host([disabled]) {\n      pointer-events: none;\n      color: var(--material-disabled-text-color);\n    }\n\n    /* Contained and outline variants */\n    :host([theme~='contained']),\n    :host([theme~='outlined']) {\n      padding: 8px 16px;\n    }\n\n    :host([theme~='outlined']) {\n      box-shadow: inset 0 0 0 1px var(--_material-button-outline-color, rgba(0, 0, 0, 0.2));\n    }\n\n    :host([theme~='contained']:not([disabled])) {\n      background-color: var(--material-primary-color);\n      color: var(--material-primary-contrast-color);\n      box-shadow: var(--material-shadow-elevation-2dp);\n    }\n\n    :host([theme~='contained'][disabled]) {\n      background-color: var(--material-secondary-background-color);\n    }\n\n    :host([theme~='contained']:hover) {\n      box-shadow: var(--material-shadow-elevation-4dp);\n    }\n\n    :host([theme~='contained'][active]) {\n      box-shadow: var(--material-shadow-elevation-8dp);\n    }\n\n    /* Icon alignment */\n\n    [part] ::slotted(vaadin-icon),\n    [part] ::slotted(iron-icon) {\n      display: block;\n      width: 18px;\n      height: 18px;\n    }\n\n    [part='prefix'] ::slotted(vaadin-icon),\n    [part='prefix'] ::slotted(iron-icon) {\n      margin-right: 8px;\n      margin-left: -4px;\n    }\n\n    [part='suffix'] ::slotted(vaadin-icon),\n    [part='suffix'] ::slotted(iron-icon) {\n      margin-left: 8px;\n      margin-right: -4px;\n    }\n\n    /* RTL specific styles */\n\n    :host([dir='rtl'])::before {\n      left: auto;\n      right: 0;\n    }\n\n    :host([dir='rtl'])::after {\n      left: auto;\n      right: 50%;\n      transform: translate(50%, -50%);\n    }\n\n    :host([active][dir='rtl'])::after {\n      transform: translate(50%, -50%) scale(0.0000001);\n    }\n\n    :host(:hover:not([active])[dir='rtl'])::after {\n      transform: translate(50%, -50%) scale(1);\n    }\n\n    :host([dir='rtl']) [part='prefix'] ::slotted(vaadin-icon),\n    :host([dir='rtl']) [part='prefix'] ::slotted(iron-icon) {\n      margin-right: -4px;\n      margin-left: 8px;\n    }\n\n    :host([dir='rtl']) [part='suffix'] ::slotted(vaadin-icon),\n    :host([dir='rtl']) [part='suffix'] ::slotted(iron-icon) {\n      margin-left: -4px;\n      margin-right: 8px;\n    }\n  `,\n  { moduleId: 'material-button' }\n);\n","/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { PolymerElement, html } from '@polymer/polymer/polymer-element.js';\nimport { GestureEventListeners } from '@polymer/polymer/lib/mixins/gesture-event-listeners.js';\nimport { addListener } from '@polymer/polymer/lib/utils/gestures.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { ControlStateMixin } from '@vaadin/vaadin-control-state-mixin/vaadin-control-state-mixin.js';\nimport { ElementMixin } from '@vaadin/vaadin-element-mixin/vaadin-element-mixin.js';\n\n/**\n * `<vaadin-button>` is a Web Component providing an accessible and customizable button.\n *\n * ```html\n * <vaadin-button>\n * </vaadin-button>\n * ```\n *\n * ```js\n * document.querySelector('vaadin-button').addEventListener('click', () => alert('Hello World!'));\n * ```\n *\n * ### Styling\n *\n * The following shadow DOM parts are exposed for styling:\n *\n * Part name | Description\n * ----------------|----------------\n * `label` | The label (text) inside the button\n * `prefix` | A slot for e.g. an icon before the label\n * `suffix` | A slot for e.g. an icon after the label\n *\n *\n * The following attributes are exposed for styling:\n *\n * Attribute | Description\n * --------- | -----------\n * `active` | Set when the button is pressed down, either with mouse, touch or the keyboard.\n * `disabled` | Set when the button is disabled.\n * `focus-ring` | Set when the button is focused using the keyboard.\n * `focused` | Set when the button is focused.\n *\n * See [Styling Components](https://vaadin.com/docs/latest/ds/customization/styling-components) documentation.\n *\n * @extends HTMLElement\n * @mixes ElementMixin\n * @mixes ControlStateMixin\n * @mixes ThemableMixin\n * @mixes GestureEventListeners\n */\nclass ButtonElement extends ElementMixin(ControlStateMixin(ThemableMixin(GestureEventListeners(PolymerElement)))) {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: inline-block;\n          position: relative;\n          outline: none;\n          white-space: nowrap;\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n\n        /* Ensure the button is always aligned on the baseline */\n        .vaadin-button-container::before {\n          content: '\\\\2003';\n          display: inline-block;\n          width: 0;\n        }\n\n        .vaadin-button-container {\n          display: inline-flex;\n          align-items: center;\n          justify-content: center;\n          text-align: center;\n          width: 100%;\n          height: 100%;\n          min-height: inherit;\n          text-shadow: inherit;\n          -webkit-user-select: none;\n          -moz-user-select: none;\n          user-select: none;\n        }\n\n        [part='prefix'],\n        [part='suffix'] {\n          flex: none;\n        }\n\n        [part='label'] {\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n\n        #button {\n          position: absolute;\n          top: 0;\n          left: 0;\n          right: 0;\n          width: 100%;\n          height: 100%;\n          opacity: 0;\n          cursor: inherit;\n        }\n      </style>\n      <div class=\"vaadin-button-container\">\n        <div part=\"prefix\">\n          <slot name=\"prefix\"></slot>\n        </div>\n        <div part=\"label\">\n          <slot></slot>\n        </div>\n        <div part=\"suffix\">\n          <slot name=\"suffix\"></slot>\n        </div>\n      </div>\n      <button id=\"button\" type=\"button\"></button>\n    `;\n  }\n\n  static get is() {\n    return 'vaadin-button';\n  }\n\n  static get version() {\n    return '21.0.2';\n  }\n\n  ready() {\n    super.ready();\n\n    // Leaving default role in the native button, makes navigation announcement\n    // being different when using focus navigation (tab) versus using normal\n    // navigation (arrows). The first way announces the label on a button\n    // since the focus is moved programmatically, and the second on a group.\n    this.setAttribute('role', 'button');\n    this.$.button.setAttribute('role', 'presentation');\n\n    this._addActiveListeners();\n  }\n\n  /**\n   * @protected\n   */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    // `active` state is preserved when the element is disconnected between keydown and keyup events.\n    // reproducible in `<vaadin-date-picker>` when closing on `Cancel` or `Today` click.\n    this.toggleAttribute('active', false);\n  }\n\n  /** @private */\n  _addActiveListeners() {\n    addListener(this, 'down', () => !this.disabled && this.setAttribute('active', ''));\n    addListener(this, 'up', () => this.removeAttribute('active'));\n    this.addEventListener(\n      'keydown',\n      (e) => !this.disabled && [13, 32].indexOf(e.keyCode) >= 0 && this.setAttribute('active', '')\n    );\n    this.addEventListener('keyup', () => this.removeAttribute('active'));\n    this.addEventListener('blur', () => this.removeAttribute('active'));\n  }\n\n  /**\n   * @protected\n   * @return {Element}\n   */\n  get focusElement() {\n    return this.$.button;\n  }\n}\n\ncustomElements.define(ButtonElement.is, ButtonElement);\n\nexport { ButtonElement };\n","import { registerStyles, css } from '@vaadin/vaadin-themable-mixin/register-styles.js';\nimport '@vaadin/vaadin-material-styles/color.js';\nimport '@vaadin/vaadin-material-styles/font-icons.js';\nimport '@vaadin/vaadin-material-styles/typography.js';\nimport '@vaadin/vaadin-material-styles/shadow.js';\nimport '@vaadin/vaadin-button/theme/material/vaadin-button.js';\n\nregisterStyles(\n  'vaadin-date-picker-overlay-content',\n  css`\n    :host {\n      font-family: var(--material-font-family);\n      font-size: var(--material-body-font-size);\n      -webkit-text-size-adjust: 100%;\n      line-height: 1.4;\n\n      /* FIXME(platosha): fix the core styles and remove this override. */\n      background: transparent;\n    }\n\n    :host([fullscreen]) {\n      position: absolute;\n    }\n\n    /* Fullscreen Toolbar */\n\n    [part='overlay-header'] {\n      display: flex;\n      align-items: baseline;\n      position: relative;\n      z-index: 2;\n      color: var(--material-body-text-color);\n      background: var(--material-secondary-background-color);\n      border-bottom: 2px solid var(--material-primary-color);\n      padding: 8px;\n      box-shadow: var(--material-shadow-elevation-4dp);\n    }\n\n    /* FIXME(platosha): fix the core styles and remove this override. */\n    [part='overlay-header']:not([desktop]) {\n      padding-bottom: 8px;\n    }\n\n    [part='label'] {\n      padding: 0 8px;\n      flex: auto;\n    }\n\n    [part='clear-button'],\n    [part='toggle-button'] {\n      font-family: 'material-icons';\n      font-size: var(--material-icon-font-size);\n      line-height: 24px;\n      width: 24px;\n      height: 24px;\n      text-align: center;\n    }\n\n    [part='clear-button'],\n    [part='toggle-button'],\n    [part='years-toggle-button'] {\n      padding: 8px;\n      color: var(--material-secondary-text-color);\n    }\n\n    [part='clear-button']:hover,\n    [part='toggle-button']:hover,\n    [part='years-toggle-button']:hover {\n      color: inherit;\n    }\n\n    [part='clear-button']::before {\n      content: var(--material-icons-clear);\n    }\n\n    [part='toggle-button']::before {\n      content: var(--material-icons-calendar);\n    }\n\n    [part='years-toggle-button'] {\n      position: static;\n      padding: 4px 8px;\n      font-size: var(--material-body-font-size);\n      font-weight: 500;\n      line-height: 24px;\n      letter-spacing: 0.05em;\n      color: var(--material-secondary-text-color);\n    }\n\n    [part='years-toggle-button']::before {\n      content: '';\n      display: none;\n    }\n\n    [part='years-toggle-button']::after {\n      content: var(--material-icons-play);\n      display: inline-block;\n      width: 24px;\n      font-family: 'material-icons';\n      font-size: var(--material-icon-font-size);\n      line-height: 24px;\n      text-align: center;\n      transition: transform 100ms cubic-bezier(0.4, 0, 0.2, 1);\n    }\n\n    :host([years-visible]) [part='years-toggle-button']::after {\n      transform: rotate(90deg);\n    }\n\n    /* Month scroller */\n\n    [part='months'] {\n      --vaadin-infinite-scroller-item-height: 320px;\n      text-align: center;\n    }\n\n    /* Year scroller */\n\n    [part='years'] {\n      z-index: 1;\n      background: var(--material-secondary-text-color);\n      color: var(--material-background-color);\n      text-align: center;\n    }\n\n    [part='years']::before {\n      z-index: 2;\n      border: 0;\n      width: 8px;\n      height: 8px;\n      transform: translateX(-50%) rotate(-45deg);\n      background: var(--material-background-color);\n    }\n\n    :host([years-visible]) [part='years']::after {\n      top: calc(20px + 16px);\n      height: calc(100% - 20px - 16px);\n    }\n\n    [part='year-number'] {\n      font-size: var(--material-small-font-size);\n      line-height: 10px; /* NOTE(platosha): chosen to align years to months */\n    }\n\n    [part='year-separator'] {\n      background-color: currentColor;\n      width: 4px;\n      height: 4px;\n      border-radius: 50%;\n      margin: calc(0.5 * var(--vaadin-infinite-scroller-item-height, 80px) - 0.5 * 10px - 0.5 * 4px) auto;\n    }\n\n    /* Bottom Bar */\n\n    [part='toolbar'] {\n      display: flex;\n      justify-content: flex-end;\n      padding: 8px 4px;\n      border-top: 1px solid var(--material-divider-color);\n    }\n\n    [part='cancel-button'] {\n      order: 1;\n    }\n\n    [part='today-button'] {\n      order: 2;\n    }\n\n    [part='today-button'],\n    [part='cancel-button'] {\n      margin: 0 4px;\n    }\n  `,\n  { moduleId: 'material-date-picker-overlay-content' }\n);\n","import { registerStyles, css } from '@vaadin/vaadin-themable-mixin/register-styles.js';\nimport '@vaadin/vaadin-material-styles/color.js';\nimport '@vaadin/vaadin-material-styles/typography.js';\n\nregisterStyles(\n  'vaadin-month-calendar',\n  css`\n    :host {\n      color: var(--material-body-text-color);\n      padding: 0 calc(50% / 8 - 0.5em + 8px);\n    }\n\n    :host([show-week-numbers]) {\n      padding: 0 calc(50% / 9 - 0.5em + 8px);\n    }\n\n    [part='month-header'] {\n      font-size: var(--material-h6-font-size);\n      line-height: 1;\n      padding-top: 20px;\n      margin-bottom: 8px;\n    }\n\n    [part='week-number'],\n    [part='weekday'] {\n      font-size: var(--material-caption-font-size);\n      line-height: 44px;\n      height: 40px;\n      color: var(--material-secondary-text-color);\n    }\n\n    :host([disabled]),\n    :host([disabled]) [part='week-number'],\n    :host([disabled]) [part='weekday'] {\n      color: var(--material-disabled-text-color);\n    }\n\n    [part='date'] {\n      position: relative;\n      font-size: var(--material-body-font-size);\n      line-height: 42px;\n      height: 40px;\n      cursor: default;\n    }\n\n    [part='date']::after {\n      content: '';\n      position: absolute;\n      z-index: -4;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      width: 38px;\n      height: 38px;\n      box-sizing: border-box;\n      border-radius: 50%;\n      border: 2px solid transparent;\n    }\n\n    /* Today */\n\n    [part='date'][today] {\n      color: var(--material-primary-text-color);\n    }\n\n    /* Hover */\n\n    [part='date']:not([disabled]):hover::after {\n      background-color: var(--material-secondary-background-color);\n      border-color: var(--material-secondary-background-color);\n      z-index: -3;\n    }\n\n    /* Hide for touch devices */\n    @media (hover: none) {\n      [part='date']:not([disabled]):hover::after {\n        background-color: transparent;\n        border-color: transparent;\n        z-index: -4;\n      }\n    }\n\n    /* Selected */\n\n    [part='date'][selected] {\n      font-weight: 500;\n    }\n\n    [part='date']:not([disabled])[selected]::after,\n    [part='date'][selected]::after {\n      background-color: transparent;\n      border-color: currentColor;\n      z-index: -2;\n    }\n\n    /* Focused */\n\n    [part='date']:not([disabled])[focused],\n    [part='date']:not([disabled]):active {\n      color: var(--material-primary-contrast-color);\n    }\n\n    [part='date']:not([disabled])[focused]::after,\n    [part='date']:not([disabled]):active::after {\n      opacity: 0.7;\n      background-color: var(--material-primary-color);\n      border-color: var(--material-primary-color);\n      z-index: -1;\n    }\n\n    [part='date'][disabled] {\n      color: var(--material-disabled-text-color);\n    }\n\n    :host([focused]) [part='date']:not([disabled])[focused]::after {\n      opacity: 1;\n    }\n  `,\n  { moduleId: 'material-date-picker-month-calendar' }\n);\n","/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { PolymerElement, html } from '@polymer/polymer/polymer-element.js';\nimport '@polymer/polymer/lib/elements/dom-repeat.js';\nimport { GestureEventListeners } from '@polymer/polymer/lib/mixins/gesture-event-listeners.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { dateAllowed, dateEquals, getISOWeekNumber } from './vaadin-date-picker-helper.js';\n\n/**\n * @extends HTMLElement\n * @private\n */\nclass MonthCalendarElement extends ThemableMixin(GestureEventListeners(PolymerElement)) {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n        }\n\n        [part='weekdays'],\n        #days {\n          display: flex;\n          flex-wrap: wrap;\n          flex-grow: 1;\n        }\n\n        #days-container,\n        #weekdays-container {\n          display: flex;\n        }\n\n        [part='week-numbers'] {\n          display: flex;\n          flex-direction: column;\n          justify-content: space-between;\n          flex-shrink: 0;\n        }\n\n        [part='week-numbers'][hidden],\n        [part='weekday'][hidden] {\n          display: none;\n        }\n\n        [part='weekday'],\n        [part='date'] {\n          /* Would use calc(100% / 7) but it doesn't work nice on IE */\n          width: 14.285714286%;\n        }\n\n        [part='weekday']:empty,\n        [part='week-numbers'] {\n          width: 12.5%;\n          flex-shrink: 0;\n        }\n      </style>\n\n      <div part=\"month-header\" role=\"heading\">[[_getTitle(month, i18n.monthNames)]]</div>\n      <div id=\"monthGrid\" on-tap=\"_handleTap\" on-touchend=\"_preventDefault\" on-touchstart=\"_onMonthGridTouchStart\">\n        <div id=\"weekdays-container\">\n          <div hidden$=\"[[!_showWeekSeparator(showWeekNumbers, i18n.firstDayOfWeek)]]\" part=\"weekday\"></div>\n          <div part=\"weekdays\">\n            <template\n              is=\"dom-repeat\"\n              items=\"[[_getWeekDayNames(i18n.weekdays, i18n.weekdaysShort, showWeekNumbers, i18n.firstDayOfWeek)]]\"\n            >\n              <div part=\"weekday\" role=\"heading\" aria-label$=\"[[item.weekDay]]\">[[item.weekDayShort]]</div>\n            </template>\n          </div>\n        </div>\n        <div id=\"days-container\">\n          <div part=\"week-numbers\" hidden$=\"[[!_showWeekSeparator(showWeekNumbers, i18n.firstDayOfWeek)]]\">\n            <template is=\"dom-repeat\" items=\"[[_getWeekNumbers(_days)]]\">\n              <div part=\"week-number\" role=\"heading\" aria-label$=\"[[i18n.week]] [[item]]\">[[item]]</div>\n            </template>\n          </div>\n          <div id=\"days\">\n            <template is=\"dom-repeat\" items=\"[[_days]]\">\n              <!-- prettier-ignore -->\n              <div\n                part=\"date\"\n                today$=\"[[_isToday(item)]]\"\n                selected$=\"[[_dateEquals(item, selectedDate)]]\"\n                focused$=\"[[_dateEquals(item, focusedDate)]]\"\n                date=\"[[item]]\"\n                disabled$=\"[[!_dateAllowed(item, minDate, maxDate)]]\"\n                role$=\"[[_getRole(item)]]\"\n                aria-label$=\"[[_getAriaLabel(item)]]\"\n                aria-disabled$=\"[[_getAriaDisabled(item, minDate, maxDate)]]\">[[_getDate(item)]]</div>\n            </template>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  static get is() {\n    return 'vaadin-month-calendar';\n  }\n\n  static get properties() {\n    return {\n      /**\n       * A `Date` object defining the month to be displayed. Only year and\n       * month properties are actually used.\n       */\n      month: {\n        type: Date,\n        value: new Date()\n      },\n\n      /**\n       * A `Date` object for the currently selected date.\n       */\n      selectedDate: {\n        type: Date,\n        notify: true\n      },\n\n      /**\n       * A `Date` object for the currently focused date.\n       */\n      focusedDate: Date,\n\n      showWeekNumbers: {\n        type: Boolean,\n        value: false\n      },\n\n      i18n: {\n        type: Object\n      },\n\n      /**\n       * Flag stating whether taps on the component should be ignored.\n       */\n      ignoreTaps: Boolean,\n\n      _notTapping: Boolean,\n\n      /**\n       * The earliest date that can be selected. All earlier dates will be disabled.\n       */\n      minDate: {\n        type: Date,\n        value: null\n      },\n\n      /**\n       * The latest date that can be selected. All later dates will be disabled.\n       */\n      maxDate: {\n        type: Date,\n        value: null\n      },\n\n      _days: {\n        type: Array,\n        computed: '_getDays(month, i18n.firstDayOfWeek, minDate, maxDate)'\n      },\n\n      disabled: {\n        type: Boolean,\n        reflectToAttribute: true,\n        computed: '_isDisabled(month, minDate, maxDate)'\n      }\n    };\n  }\n\n  static get observers() {\n    return ['_showWeekNumbersChanged(showWeekNumbers, i18n.firstDayOfWeek)'];\n  }\n\n  _dateEquals(date1, date2) {\n    return dateEquals(date1, date2);\n  }\n\n  _dateAllowed(date, min, max) {\n    return dateAllowed(date, min, max);\n  }\n\n  /* Returns true if all the dates in the month are out of the allowed range */\n  _isDisabled(month, minDate, maxDate) {\n    // First day of the month\n    var firstDate = new Date(0, 0);\n    firstDate.setFullYear(month.getFullYear());\n    firstDate.setMonth(month.getMonth());\n    firstDate.setDate(1);\n\n    // Last day of the month\n    var lastDate = new Date(0, 0);\n    lastDate.setFullYear(month.getFullYear());\n    lastDate.setMonth(month.getMonth() + 1);\n    lastDate.setDate(0);\n\n    if (\n      minDate &&\n      maxDate &&\n      minDate.getMonth() === maxDate.getMonth() &&\n      minDate.getMonth() === month.getMonth() &&\n      maxDate.getDate() - minDate.getDate() >= 0\n    ) {\n      return false;\n    }\n\n    return !this._dateAllowed(firstDate, minDate, maxDate) && !this._dateAllowed(lastDate, minDate, maxDate);\n  }\n\n  _getTitle(month, monthNames) {\n    if (month === undefined || monthNames === undefined) {\n      return;\n    }\n    return this.i18n.formatTitle(monthNames[month.getMonth()], month.getFullYear());\n  }\n\n  _onMonthGridTouchStart() {\n    this._notTapping = false;\n    setTimeout(() => (this._notTapping = true), 300);\n  }\n\n  _dateAdd(date, delta) {\n    date.setDate(date.getDate() + delta);\n  }\n\n  _applyFirstDayOfWeek(weekDayNames, firstDayOfWeek) {\n    if (weekDayNames === undefined || firstDayOfWeek === undefined) {\n      return;\n    }\n\n    return weekDayNames.slice(firstDayOfWeek).concat(weekDayNames.slice(0, firstDayOfWeek));\n  }\n\n  _getWeekDayNames(weekDayNames, weekDayNamesShort, showWeekNumbers, firstDayOfWeek) {\n    if (\n      weekDayNames === undefined ||\n      weekDayNamesShort === undefined ||\n      showWeekNumbers === undefined ||\n      firstDayOfWeek === undefined\n    ) {\n      return;\n    }\n    weekDayNames = this._applyFirstDayOfWeek(weekDayNames, firstDayOfWeek);\n    weekDayNamesShort = this._applyFirstDayOfWeek(weekDayNamesShort, firstDayOfWeek);\n    weekDayNames = weekDayNames.map((day, index) => {\n      return {\n        weekDay: day,\n        weekDayShort: weekDayNamesShort[index]\n      };\n    });\n\n    return weekDayNames;\n  }\n\n  _getDate(date) {\n    return date ? date.getDate() : '';\n  }\n\n  _showWeekNumbersChanged(showWeekNumbers, firstDayOfWeek) {\n    if (showWeekNumbers && firstDayOfWeek === 1) {\n      this.setAttribute('week-numbers', '');\n    } else {\n      this.removeAttribute('week-numbers');\n    }\n  }\n\n  _showWeekSeparator(showWeekNumbers, firstDayOfWeek) {\n    // Currently only supported for locales that start the week on Monday.\n    return showWeekNumbers && firstDayOfWeek === 1;\n  }\n\n  _isToday(date) {\n    return this._dateEquals(new Date(), date);\n  }\n\n  _getDays(month, firstDayOfWeek) {\n    if (month === undefined || firstDayOfWeek === undefined) {\n      return;\n    }\n    // First day of the month (at midnight).\n    var date = new Date(0, 0);\n    date.setFullYear(month.getFullYear());\n    date.setMonth(month.getMonth());\n    date.setDate(1);\n\n    // Rewind to first day of the week.\n    while (date.getDay() !== firstDayOfWeek) {\n      this._dateAdd(date, -1);\n    }\n\n    var days = [];\n    var startMonth = date.getMonth();\n    var targetMonth = month.getMonth();\n    while (date.getMonth() === targetMonth || date.getMonth() === startMonth) {\n      days.push(date.getMonth() === targetMonth ? new Date(date.getTime()) : null);\n\n      // Advance to next day.\n      this._dateAdd(date, 1);\n    }\n    return days;\n  }\n\n  _getWeekNumber(date, days) {\n    if (date === undefined || days === undefined) {\n      return;\n    }\n\n    if (!date) {\n      // Get the first non-null date from the days array.\n      date = days.reduce((acc, d) => {\n        return !acc && d ? d : acc;\n      });\n    }\n\n    return getISOWeekNumber(date);\n  }\n\n  _getWeekNumbers(dates) {\n    return dates\n      .map((date) => this._getWeekNumber(date, dates))\n      .filter((week, index, arr) => arr.indexOf(week) === index);\n  }\n\n  _handleTap(e) {\n    if (!this.ignoreTaps && !this._notTapping && e.target.date && !e.target.hasAttribute('disabled')) {\n      this.selectedDate = e.target.date;\n      this.dispatchEvent(new CustomEvent('date-tap', { bubbles: true, composed: true }));\n    }\n  }\n\n  _preventDefault(e) {\n    e.preventDefault();\n  }\n\n  _getRole(date) {\n    return date ? 'button' : 'presentation';\n  }\n\n  _getAriaLabel(date) {\n    if (!date) {\n      return '';\n    }\n\n    var ariaLabel =\n      this._getDate(date) +\n      ' ' +\n      this.i18n.monthNames[date.getMonth()] +\n      ' ' +\n      date.getFullYear() +\n      ', ' +\n      this.i18n.weekdays[date.getDay()];\n\n    if (this._isToday(date)) {\n      ariaLabel += ', ' + this.i18n.today;\n    }\n\n    return ariaLabel;\n  }\n\n  _getAriaDisabled(date, min, max) {\n    if (date === undefined || min === undefined || max === undefined) {\n      return;\n    }\n    return this._dateAllowed(date, min, max) ? 'false' : 'true';\n  }\n}\n\ncustomElements.define(MonthCalendarElement.is, MonthCalendarElement);\n","/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { PolymerElement, html } from '@polymer/polymer/polymer-element.js';\nimport { timeOut } from '@polymer/polymer/lib/utils/async.js';\nimport { Debouncer } from '@polymer/polymer/lib/utils/debounce.js';\nimport { templatize } from '@polymer/polymer/lib/utils/templatize.js';\nimport { afterNextRender } from '@polymer/polymer/lib/utils/render-status.js';\n\n/**\n * @extends HTMLElement\n * @private\n */\nclass InfiniteScrollerElement extends PolymerElement {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n          overflow: hidden;\n          height: 500px;\n        }\n\n        #scroller {\n          position: relative;\n          height: 100%;\n          overflow: auto;\n          outline: none;\n          margin-right: -40px;\n          -webkit-overflow-scrolling: touch;\n          overflow-x: hidden;\n        }\n\n        #scroller.notouchscroll {\n          -webkit-overflow-scrolling: auto;\n        }\n\n        #scroller::-webkit-scrollbar {\n          display: none;\n        }\n\n        .buffer {\n          position: absolute;\n          width: var(--vaadin-infinite-scroller-buffer-width, 100%);\n          box-sizing: border-box;\n          padding-right: 40px;\n          top: var(--vaadin-infinite-scroller-buffer-offset, 0);\n          animation: fadein 0.2s;\n        }\n\n        @keyframes fadein {\n          from {\n            opacity: 0;\n          }\n          to {\n            opacity: 1;\n          }\n        }\n      </style>\n\n      <div id=\"scroller\" on-scroll=\"_scroll\">\n        <div class=\"buffer\"></div>\n        <div class=\"buffer\"></div>\n        <div id=\"fullHeight\"></div>\n      </div>\n    `;\n  }\n\n  static get is() {\n    return 'vaadin-infinite-scroller';\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Count of individual items in each buffer.\n       * The scroller has 2 buffers altogether so bufferSize of 20\n       * will result in 40 buffered DOM items in total.\n       * Changing after initialization not supported.\n       */\n      bufferSize: {\n        type: Number,\n        value: 20\n      },\n\n      /**\n       * The amount of initial scroll top. Needed in order for the\n       * user to be able to scroll backwards.\n       */\n      _initialScroll: {\n        value: 500000\n      },\n\n      /**\n       * The index/position mapped at _initialScroll point.\n       */\n      _initialIndex: {\n        value: 0\n      },\n\n      _buffers: Array,\n\n      _preventScrollEvent: Boolean,\n\n      _mayHaveMomentum: Boolean,\n\n      _initialized: Boolean,\n\n      active: {\n        type: Boolean,\n        observer: '_activated'\n      }\n    };\n  }\n\n  ready() {\n    super.ready();\n\n    this._buffers = Array.prototype.slice.call(this.root.querySelectorAll('.buffer'));\n\n    this.$.fullHeight.style.height = this._initialScroll * 2 + 'px';\n\n    const tpl = this.querySelector('template');\n    this._TemplateClass = templatize(tpl, this, {\n      forwardHostProp: function (prop, value) {\n        if (prop !== 'index') {\n          this._buffers.forEach((buffer) => {\n            [].forEach.call(buffer.children, (insertionPoint) => {\n              insertionPoint._itemWrapper.instance[prop] = value;\n            });\n          });\n        }\n      }\n    });\n\n    // Firefox interprets elements with overflow:auto as focusable\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1069739\n    var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\n    if (isFirefox) {\n      this.$.scroller.tabIndex = -1;\n    }\n  }\n\n  _activated(active) {\n    if (active && !this._initialized) {\n      this._createPool();\n      this._initialized = true;\n    }\n  }\n\n  _finishInit() {\n    if (!this._initDone) {\n      // Once the first set of items start fading in, stamp the rest\n      this._buffers.forEach((buffer) => {\n        [].forEach.call(buffer.children, (insertionPoint) => this._ensureStampedInstance(insertionPoint._itemWrapper));\n      }, this);\n\n      if (!this._buffers[0].translateY) {\n        this._reset();\n      }\n\n      this._initDone = true;\n    }\n  }\n\n  _translateBuffer(up) {\n    const index = up ? 1 : 0;\n    this._buffers[index].translateY = this._buffers[index ? 0 : 1].translateY + this._bufferHeight * (index ? -1 : 1);\n    this._buffers[index].style.transform = 'translate3d(0, ' + this._buffers[index].translateY + 'px, 0)';\n    this._buffers[index].updated = false;\n    this._buffers.reverse();\n  }\n\n  _scroll() {\n    if (this._scrollDisabled) {\n      return;\n    }\n\n    const scrollTop = this.$.scroller.scrollTop;\n    if (scrollTop < this._bufferHeight || scrollTop > this._initialScroll * 2 - this._bufferHeight) {\n      // Scrolled near the end/beginning of the scrollable area -> reset.\n      this._initialIndex = ~~this.position;\n      this._reset();\n    }\n\n    // Check if we scrolled enough to translate the buffer positions.\n    const bufferOffset = this.root.querySelector('.buffer').offsetTop;\n    const upperThresholdReached = scrollTop > this._buffers[1].translateY + this.itemHeight + bufferOffset;\n    const lowerThresholdReached = scrollTop < this._buffers[0].translateY + this.itemHeight + bufferOffset;\n\n    if (upperThresholdReached || lowerThresholdReached) {\n      this._translateBuffer(lowerThresholdReached);\n      this._updateClones();\n    }\n\n    if (!this._preventScrollEvent) {\n      this.dispatchEvent(new CustomEvent('custom-scroll', { bubbles: false, composed: true }));\n      this._mayHaveMomentum = true;\n    }\n    this._preventScrollEvent = false;\n\n    this._debouncerScrollFinish = Debouncer.debounce(this._debouncerScrollFinish, timeOut.after(200), () => {\n      const scrollerRect = this.$.scroller.getBoundingClientRect();\n      if (!this._isVisible(this._buffers[0], scrollerRect) && !this._isVisible(this._buffers[1], scrollerRect)) {\n        this.position = this.position; // eslint-disable-line no-self-assign\n      }\n    });\n  }\n\n  /**\n   * Current scroller position as index. Can be a fractional number.\n   *\n   * @type {Number}\n   */\n  set position(index) {\n    this._preventScrollEvent = true;\n    if (index > this._firstIndex && index < this._firstIndex + this.bufferSize * 2) {\n      this.$.scroller.scrollTop = this.itemHeight * (index - this._firstIndex) + this._buffers[0].translateY;\n    } else {\n      this._initialIndex = ~~index;\n      this._reset();\n      this._scrollDisabled = true;\n      this.$.scroller.scrollTop += (index % 1) * this.itemHeight;\n      this._scrollDisabled = false;\n    }\n\n    if (this._mayHaveMomentum) {\n      // Stop the possible iOS Safari momentum with -webkit-overflow-scrolling: auto;\n      this.$.scroller.classList.add('notouchscroll');\n      this._mayHaveMomentum = false;\n\n      setTimeout(() => {\n        // Restore -webkit-overflow-scrolling: touch; after a small delay.\n        this.$.scroller.classList.remove('notouchscroll');\n      }, 10);\n    }\n  }\n\n  /**\n   * @private\n   */\n  get position() {\n    return (this.$.scroller.scrollTop - this._buffers[0].translateY) / this.itemHeight + this._firstIndex;\n  }\n\n  get itemHeight() {\n    if (!this._itemHeightVal) {\n      const itemHeight = getComputedStyle(this).getPropertyValue('--vaadin-infinite-scroller-item-height');\n      // Use background-position temp inline style for unit conversion\n      const tmpStyleProp = 'background-position';\n      this.$.fullHeight.style.setProperty(tmpStyleProp, itemHeight);\n      const itemHeightPx = getComputedStyle(this.$.fullHeight).getPropertyValue(tmpStyleProp);\n      this.$.fullHeight.style.removeProperty(tmpStyleProp);\n      this._itemHeightVal = parseFloat(itemHeightPx);\n    }\n\n    return this._itemHeightVal;\n  }\n\n  get _bufferHeight() {\n    return this.itemHeight * this.bufferSize;\n  }\n\n  _reset() {\n    this._scrollDisabled = true;\n    this.$.scroller.scrollTop = this._initialScroll;\n    this._buffers[0].translateY = this._initialScroll - this._bufferHeight;\n    this._buffers[1].translateY = this._initialScroll;\n    this._buffers.forEach((buffer) => {\n      buffer.style.transform = 'translate3d(0, ' + buffer.translateY + 'px, 0)';\n    });\n    this._buffers[0].updated = this._buffers[1].updated = false;\n    this._updateClones(true);\n\n    this._debouncerUpdateClones = Debouncer.debounce(this._debouncerUpdateClones, timeOut.after(200), () => {\n      this._buffers[0].updated = this._buffers[1].updated = false;\n      this._updateClones();\n    });\n\n    this._scrollDisabled = false;\n  }\n\n  _createPool() {\n    const container = this.getBoundingClientRect();\n    this._buffers.forEach((buffer) => {\n      for (let i = 0; i < this.bufferSize; i++) {\n        const itemWrapper = document.createElement('div');\n        itemWrapper.style.height = this.itemHeight + 'px';\n        itemWrapper.instance = {};\n\n        const contentId = (InfiniteScrollerElement._contentIndex = InfiniteScrollerElement._contentIndex + 1 || 0);\n        const slotName = 'vaadin-infinite-scroller-item-content-' + contentId;\n\n        const insertionPoint = document.createElement('slot');\n        insertionPoint.setAttribute('name', slotName);\n        insertionPoint._itemWrapper = itemWrapper;\n        buffer.appendChild(insertionPoint);\n\n        itemWrapper.setAttribute('slot', slotName);\n        this.appendChild(itemWrapper);\n\n        setTimeout(() => {\n          // Only stamp the visible instances first\n          if (this._isVisible(itemWrapper, container)) {\n            this._ensureStampedInstance(itemWrapper);\n          }\n        }, 1); // Wait for first reset\n      }\n    }, this);\n\n    setTimeout(() => {\n      afterNextRender(this, this._finishInit.bind(this));\n    }, 1);\n  }\n\n  _ensureStampedInstance(itemWrapper) {\n    if (itemWrapper.firstElementChild) {\n      return;\n    }\n\n    var tmpInstance = itemWrapper.instance;\n\n    itemWrapper.instance = new this._TemplateClass({});\n    itemWrapper.appendChild(itemWrapper.instance.root);\n\n    Object.keys(tmpInstance).forEach((prop) => {\n      itemWrapper.instance.set(prop, tmpInstance[prop]);\n    });\n  }\n\n  _updateClones(viewPortOnly) {\n    this._firstIndex = ~~((this._buffers[0].translateY - this._initialScroll) / this.itemHeight) + this._initialIndex;\n\n    var scrollerRect = viewPortOnly ? this.$.scroller.getBoundingClientRect() : undefined;\n    this._buffers.forEach((buffer, bufferIndex) => {\n      if (!buffer.updated) {\n        var firstIndex = this._firstIndex + this.bufferSize * bufferIndex;\n\n        [].forEach.call(buffer.children, (insertionPoint, index) => {\n          const itemWrapper = insertionPoint._itemWrapper;\n          if (!viewPortOnly || this._isVisible(itemWrapper, scrollerRect)) {\n            itemWrapper.instance.index = firstIndex + index;\n          }\n        });\n        buffer.updated = true;\n      }\n    }, this);\n  }\n\n  _isVisible(element, container) {\n    var rect = element.getBoundingClientRect();\n    return rect.bottom > container.top && rect.top < container.bottom;\n  }\n}\n\ncustomElements.define(InfiniteScrollerElement.is, InfiniteScrollerElement);\n","/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { registerStyles, css } from '@vaadin/vaadin-themable-mixin/register-styles.js';\n\nregisterStyles(\n  'vaadin-date-picker-overlay',\n  css`\n    :host {\n      align-items: flex-start;\n      justify-content: flex-start;\n    }\n\n    :host([bottom-aligned]) {\n      justify-content: flex-end;\n    }\n\n    :host([right-aligned]) {\n      align-items: flex-end;\n    }\n\n    :host([dir='rtl']) {\n      align-items: flex-end;\n    }\n\n    :host([dir='rtl'][right-aligned]) {\n      align-items: flex-start;\n    }\n\n    [part='overlay'] {\n      display: flex;\n      flex: auto;\n    }\n\n    [part~='content'] {\n      flex: auto;\n    }\n  `,\n  { moduleId: 'vaadin-date-picker-overlay-styles' }\n);\n","/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { PolymerElement, html } from '@polymer/polymer/polymer-element.js';\nimport { GestureEventListeners } from '@polymer/polymer/lib/mixins/gesture-event-listeners.js';\nimport { addListener, setTouchAction } from '@polymer/polymer/lib/utils/gestures.js';\nimport { Debouncer } from '@polymer/polymer/lib/utils/debounce.js';\nimport { timeOut } from '@polymer/polymer/lib/utils/async.js';\nimport { IronA11yKeysBehavior } from '@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js';\nimport { IronA11yAnnouncer } from '@polymer/iron-a11y-announcer/iron-a11y-announcer.js';\nimport '@polymer/iron-media-query/iron-media-query.js';\nimport '@vaadin/vaadin-button/src/vaadin-button.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { DirMixin } from '@vaadin/vaadin-element-mixin/vaadin-dir-mixin.js';\nimport './vaadin-month-calendar.js';\nimport './vaadin-infinite-scroller.js';\nimport { dateEquals, getClosestDate, getISOWeekNumber, extractDateParts } from './vaadin-date-picker-helper.js';\nimport './vaadin-date-picker-styles.js';\n\n/**\n * @extends HTMLElement\n * @private\n */\nclass DatePickerOverlayContentElement extends ThemableMixin(DirMixin(GestureEventListeners(PolymerElement))) {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: flex;\n          flex-direction: column;\n          height: 100%;\n          width: 100%;\n          outline: none;\n          background: #fff;\n        }\n\n        [part='overlay-header'] {\n          display: flex;\n          flex-shrink: 0;\n          flex-wrap: nowrap;\n          align-items: center;\n        }\n\n        :host(:not([fullscreen])) [part='overlay-header'] {\n          display: none;\n        }\n\n        [part='label'] {\n          flex-grow: 1;\n        }\n\n        [part='clear-button']:not([showclear]) {\n          display: none;\n        }\n\n        [part='years-toggle-button'] {\n          display: flex;\n        }\n\n        [part='years-toggle-button'][desktop] {\n          display: none;\n        }\n\n        :host(:not([years-visible])) [part='years-toggle-button']::before {\n          transform: rotate(180deg);\n        }\n\n        #scrollers {\n          display: flex;\n          height: 100%;\n          width: 100%;\n          position: relative;\n          overflow: hidden;\n        }\n\n        [part='months'],\n        [part='years'] {\n          height: 100%;\n        }\n\n        [part='months'] {\n          --vaadin-infinite-scroller-item-height: 270px;\n          position: absolute;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n        }\n\n        #scrollers[desktop] [part='months'] {\n          right: 50px;\n          transform: none !important;\n        }\n\n        [part='years'] {\n          --vaadin-infinite-scroller-item-height: 80px;\n          width: 50px;\n          position: absolute;\n          right: 0;\n          transform: translateX(100%);\n          -webkit-tap-highlight-color: transparent;\n          -webkit-user-select: none;\n          -moz-user-select: none;\n          user-select: none;\n          /* Center the year scroller position. */\n          --vaadin-infinite-scroller-buffer-offset: 50%;\n        }\n\n        #scrollers[desktop] [part='years'] {\n          position: absolute;\n          transform: none !important;\n        }\n\n        [part='years']::before {\n          content: '';\n          display: block;\n          background: transparent;\n          width: 0;\n          height: 0;\n          position: absolute;\n          left: 0;\n          top: 50%;\n          transform: translateY(-50%);\n          border-width: 6px;\n          border-style: solid;\n          border-color: transparent;\n          border-left-color: #000;\n        }\n\n        :host(.animate) [part='months'],\n        :host(.animate) [part='years'] {\n          transition: all 200ms;\n        }\n\n        [part='toolbar'] {\n          display: flex;\n          justify-content: space-between;\n          z-index: 2;\n          flex-shrink: 0;\n        }\n\n        [part~='overlay-header']:not([desktop]) {\n          padding-bottom: 40px;\n        }\n\n        [part~='years-toggle-button'] {\n          position: absolute;\n          top: auto;\n          right: 8px;\n          bottom: 0;\n          z-index: 1;\n          padding: 8px;\n        }\n\n        #announcer {\n          display: inline-block;\n          position: fixed;\n          clip: rect(0, 0, 0, 0);\n          clip-path: inset(100%);\n        }\n      </style>\n\n      <div id=\"announcer\" role=\"alert\" aria-live=\"polite\">[[i18n.calendar]]</div>\n\n      <div part=\"overlay-header\" on-touchend=\"_preventDefault\" desktop$=\"[[_desktopMode]]\" aria-hidden=\"true\">\n        <div part=\"label\">[[_formatDisplayed(selectedDate, i18n.formatDate, label)]]</div>\n        <div part=\"clear-button\" on-tap=\"_clear\" showclear$=\"[[_showClear(selectedDate)]]\"></div>\n        <div part=\"toggle-button\" on-tap=\"_cancel\"></div>\n\n        <div part=\"years-toggle-button\" desktop$=\"[[_desktopMode]]\" on-tap=\"_toggleYearScroller\" aria-hidden=\"true\">\n          [[_yearAfterXMonths(_visibleMonthIndex)]]\n        </div>\n      </div>\n\n      <div id=\"scrollers\" desktop$=\"[[_desktopMode]]\" on-track=\"_track\">\n        <vaadin-infinite-scroller\n          id=\"monthScroller\"\n          on-custom-scroll=\"_onMonthScroll\"\n          on-touchstart=\"_onMonthScrollTouchStart\"\n          buffer-size=\"3\"\n          active=\"[[initialPosition]]\"\n          part=\"months\"\n        >\n          <template>\n            <vaadin-month-calendar\n              i18n=\"[[i18n]]\"\n              month=\"[[_dateAfterXMonths(index)]]\"\n              selected-date=\"{{selectedDate}}\"\n              focused-date=\"[[focusedDate]]\"\n              ignore-taps=\"[[_ignoreTaps]]\"\n              show-week-numbers=\"[[showWeekNumbers]]\"\n              min-date=\"[[minDate]]\"\n              max-date=\"[[maxDate]]\"\n              focused$=\"[[_focused]]\"\n              part=\"month\"\n              theme$=\"[[theme]]\"\n            >\n            </vaadin-month-calendar>\n          </template>\n        </vaadin-infinite-scroller>\n        <vaadin-infinite-scroller\n          id=\"yearScroller\"\n          on-tap=\"_onYearTap\"\n          on-custom-scroll=\"_onYearScroll\"\n          on-touchstart=\"_onYearScrollTouchStart\"\n          buffer-size=\"12\"\n          active=\"[[initialPosition]]\"\n          part=\"years\"\n        >\n          <template>\n            <div\n              part=\"year-number\"\n              role=\"button\"\n              current$=\"[[_isCurrentYear(index)]]\"\n              selected$=\"[[_isSelectedYear(index, selectedDate)]]\"\n            >\n              [[_yearAfterXYears(index)]]\n            </div>\n            <div part=\"year-separator\" aria-hidden=\"true\"></div>\n          </template>\n        </vaadin-infinite-scroller>\n      </div>\n\n      <div on-touchend=\"_preventDefault\" role=\"toolbar\" part=\"toolbar\">\n        <vaadin-button\n          id=\"todayButton\"\n          part=\"today-button\"\n          theme=\"tertiary\"\n          disabled=\"[[!_isTodayAllowed(minDate, maxDate)]]\"\n          on-tap=\"_onTodayTap\"\n        >\n          [[i18n.today]]\n        </vaadin-button>\n        <vaadin-button id=\"cancelButton\" part=\"cancel-button\" theme=\"tertiary\" on-tap=\"_cancel\">\n          [[i18n.cancel]]\n        </vaadin-button>\n      </div>\n      <iron-media-query query=\"(min-width: 375px)\" query-matches=\"{{_desktopMode}}\"></iron-media-query>\n    `;\n  }\n\n  static get is() {\n    return 'vaadin-date-picker-overlay-content';\n  }\n\n  static get properties() {\n    return {\n      /**\n       * The value for this element.\n       */\n      selectedDate: {\n        type: Date,\n        notify: true\n      },\n\n      /**\n       * Date value which is focused using keyboard.\n       */\n      focusedDate: {\n        type: Date,\n        notify: true,\n        observer: '_focusedDateChanged'\n      },\n\n      _focusedMonthDate: Number,\n\n      /**\n       * Date which should be visible when there is no value selected.\n       */\n      initialPosition: {\n        type: Date,\n        observer: '_initialPositionChanged'\n      },\n\n      _originDate: {\n        value: new Date()\n      },\n\n      _visibleMonthIndex: Number,\n\n      _desktopMode: Boolean,\n\n      _translateX: {\n        observer: '_translateXChanged'\n      },\n\n      _yearScrollerWidth: {\n        value: 50\n      },\n\n      i18n: {\n        type: Object\n      },\n\n      showWeekNumbers: {\n        type: Boolean\n      },\n\n      _ignoreTaps: Boolean,\n\n      _notTapping: Boolean,\n\n      /**\n       * The earliest date that can be selected. All earlier dates will be disabled.\n       */\n      minDate: Date,\n\n      /**\n       * The latest date that can be selected. All later dates will be disabled.\n       */\n      maxDate: Date,\n\n      _focused: Boolean,\n\n      /**\n       * Input label\n       */\n      label: String\n    };\n  }\n\n  get __isRTL() {\n    return this.getAttribute('dir') === 'rtl';\n  }\n\n  ready() {\n    super.ready();\n    this.setAttribute('tabindex', 0);\n    this.addEventListener('keydown', this._onKeydown.bind(this));\n    addListener(this, 'tap', this._stopPropagation);\n    this.addEventListener('focus', this._onOverlayFocus.bind(this));\n    this.addEventListener('blur', this._onOverlayBlur.bind(this));\n  }\n\n  /**\n   * Fired when the scroller reaches the target scrolling position.\n   * @event scroll-animation-finished\n   * @param {Number} detail.position new position\n   * @param {Number} detail.oldPosition old position\n   */\n\n  connectedCallback() {\n    super.connectedCallback();\n    this._closeYearScroller();\n    this._toggleAnimateClass(true);\n    setTouchAction(this.$.scrollers, 'pan-y');\n    IronA11yAnnouncer.requestAvailability();\n  }\n\n  announceFocusedDate() {\n    var focusedDate = this._currentlyFocusedDate();\n    var announce = [];\n    if (dateEquals(focusedDate, new Date())) {\n      announce.push(this.i18n.today);\n    }\n    announce = announce.concat([\n      this.i18n.weekdays[focusedDate.getDay()],\n      focusedDate.getDate(),\n      this.i18n.monthNames[focusedDate.getMonth()],\n      focusedDate.getFullYear()\n    ]);\n    if (this.showWeekNumbers && this.i18n.firstDayOfWeek === 1) {\n      announce.push(this.i18n.week);\n      announce.push(getISOWeekNumber(focusedDate));\n    }\n    this.dispatchEvent(\n      new CustomEvent('iron-announce', {\n        bubbles: true,\n        composed: true,\n        detail: {\n          text: announce.join(' ')\n        }\n      })\n    );\n    return;\n  }\n\n  /**\n   * Focuses the cancel button\n   */\n  focusCancel() {\n    this.$.cancelButton.focus();\n  }\n\n  /**\n   * Scrolls the list to the given Date.\n   */\n  scrollToDate(date, animate) {\n    this._scrollToPosition(this._differenceInMonths(date, this._originDate), animate);\n  }\n\n  _focusedDateChanged(focusedDate) {\n    this.revealDate(focusedDate);\n  }\n\n  _isCurrentYear(yearsFromNow) {\n    return yearsFromNow === 0;\n  }\n\n  _isSelectedYear(yearsFromNow, selectedDate) {\n    if (selectedDate) {\n      return selectedDate.getFullYear() === this._originDate.getFullYear() + yearsFromNow;\n    }\n  }\n\n  /**\n   * Scrolls the month and year scrollers enough to reveal the given date.\n   */\n  revealDate(date) {\n    if (date) {\n      var diff = this._differenceInMonths(date, this._originDate);\n      var scrolledAboveViewport = this.$.monthScroller.position > diff;\n\n      var visibleItems = this.$.monthScroller.clientHeight / this.$.monthScroller.itemHeight;\n      var scrolledBelowViewport = this.$.monthScroller.position + visibleItems - 1 < diff;\n\n      if (scrolledAboveViewport) {\n        this._scrollToPosition(diff, true);\n      } else if (scrolledBelowViewport) {\n        this._scrollToPosition(diff - visibleItems + 1, true);\n      }\n    }\n  }\n\n  _onOverlayFocus() {\n    this._focused = true;\n  }\n\n  _onOverlayBlur() {\n    this._focused = false;\n  }\n\n  _initialPositionChanged(initialPosition) {\n    this.scrollToDate(initialPosition);\n  }\n\n  _repositionYearScroller() {\n    this._visibleMonthIndex = Math.floor(this.$.monthScroller.position);\n    this.$.yearScroller.position = (this.$.monthScroller.position + this._originDate.getMonth()) / 12;\n  }\n\n  _repositionMonthScroller() {\n    this.$.monthScroller.position = this.$.yearScroller.position * 12 - this._originDate.getMonth();\n    this._visibleMonthIndex = Math.floor(this.$.monthScroller.position);\n  }\n\n  _onMonthScroll() {\n    this._repositionYearScroller();\n    this._doIgnoreTaps();\n  }\n\n  _onYearScroll() {\n    this._repositionMonthScroller();\n    this._doIgnoreTaps();\n  }\n\n  _onYearScrollTouchStart() {\n    this._notTapping = false;\n    setTimeout(() => (this._notTapping = true), 300);\n\n    this._repositionMonthScroller();\n  }\n\n  _onMonthScrollTouchStart() {\n    this._repositionYearScroller();\n  }\n\n  _doIgnoreTaps() {\n    this._ignoreTaps = true;\n    this._debouncer = Debouncer.debounce(this._debouncer, timeOut.after(300), () => (this._ignoreTaps = false));\n  }\n\n  _formatDisplayed(date, formatDate, label) {\n    if (date) {\n      return formatDate(extractDateParts(date));\n    } else {\n      return label;\n    }\n  }\n\n  _onTodayTap() {\n    var today = new Date();\n\n    if (Math.abs(this.$.monthScroller.position - this._differenceInMonths(today, this._originDate)) < 0.001) {\n      // Select today only if the month scroller is positioned approximately\n      // at the beginning of the current month\n      this.selectedDate = today;\n      this._close();\n    } else {\n      this._scrollToCurrentMonth();\n    }\n  }\n\n  _scrollToCurrentMonth() {\n    if (this.focusedDate) {\n      this.focusedDate = new Date();\n    }\n\n    this.scrollToDate(new Date(), true);\n  }\n\n  _showClear(selectedDate) {\n    return !!selectedDate;\n  }\n\n  _onYearTap(e) {\n    if (!this._ignoreTaps && !this._notTapping) {\n      var scrollDelta =\n        e.detail.y - (this.$.yearScroller.getBoundingClientRect().top + this.$.yearScroller.clientHeight / 2);\n      var yearDelta = scrollDelta / this.$.yearScroller.itemHeight;\n      this._scrollToPosition(this.$.monthScroller.position + yearDelta * 12, true);\n    }\n  }\n\n  _scrollToPosition(targetPosition, animate) {\n    if (this._targetPosition !== undefined) {\n      this._targetPosition = targetPosition;\n      return;\n    }\n\n    if (!animate) {\n      this.$.monthScroller.position = targetPosition;\n      this._targetPosition = undefined;\n      this._repositionYearScroller();\n      return;\n    }\n\n    this._targetPosition = targetPosition;\n\n    // http://gizma.com/easing/\n    var easingFunction = (t, b, c, d) => {\n      t /= d / 2;\n      if (t < 1) {\n        return (c / 2) * t * t + b;\n      }\n      t--;\n      return (-c / 2) * (t * (t - 2) - 1) + b;\n    };\n\n    var duration = animate ? 300 : 0;\n    var start = 0;\n    var initialPosition = this.$.monthScroller.position;\n\n    var smoothScroll = (timestamp) => {\n      start = start || timestamp;\n      var currentTime = timestamp - start;\n\n      if (currentTime < duration) {\n        var currentPos = easingFunction(currentTime, initialPosition, this._targetPosition - initialPosition, duration);\n        this.$.monthScroller.position = currentPos;\n        window.requestAnimationFrame(smoothScroll);\n      } else {\n        this.dispatchEvent(\n          new CustomEvent('scroll-animation-finished', {\n            bubbles: true,\n            composed: true,\n            detail: {\n              position: this._targetPosition,\n              oldPosition: initialPosition\n            }\n          })\n        );\n\n        this.$.monthScroller.position = this._targetPosition;\n        this._targetPosition = undefined;\n      }\n\n      setTimeout(this._repositionYearScroller.bind(this), 1);\n    };\n\n    // Start the animation.\n    window.requestAnimationFrame(smoothScroll);\n  }\n\n  _limit(value, range) {\n    return Math.min(range.max, Math.max(range.min, value));\n  }\n\n  _handleTrack(e) {\n    // Check if horizontal movement threshold (dx) not exceeded or\n    // scrolling fast vertically (ddy).\n    if (Math.abs(e.detail.dx) < 10 || Math.abs(e.detail.ddy) > 10) {\n      return;\n    }\n\n    // If we're flinging quickly -> start animating already.\n    if (Math.abs(e.detail.ddx) > this._yearScrollerWidth / 3) {\n      this._toggleAnimateClass(true);\n    }\n\n    var newTranslateX = this._translateX + e.detail.ddx;\n    this._translateX = this._limit(newTranslateX, {\n      min: 0,\n      max: this._yearScrollerWidth\n    });\n  }\n\n  _track(e) {\n    if (this._desktopMode) {\n      // No need to track for swipe gestures on desktop.\n      return;\n    }\n\n    switch (e.detail.state) {\n      case 'start':\n        this._toggleAnimateClass(false);\n        break;\n\n      case 'track':\n        this._handleTrack(e);\n        break;\n\n      case 'end':\n        this._toggleAnimateClass(true);\n        if (this._translateX >= this._yearScrollerWidth / 2) {\n          this._closeYearScroller();\n        } else {\n          this._openYearScroller();\n        }\n        break;\n    }\n  }\n\n  _toggleAnimateClass(enable) {\n    if (enable) {\n      this.classList.add('animate');\n    } else {\n      this.classList.remove('animate');\n    }\n  }\n\n  _toggleYearScroller() {\n    this._isYearScrollerVisible() ? this._closeYearScroller() : this._openYearScroller();\n  }\n\n  _openYearScroller() {\n    this._translateX = 0;\n    this.setAttribute('years-visible', '');\n  }\n\n  _closeYearScroller() {\n    this.removeAttribute('years-visible');\n    this._translateX = this._yearScrollerWidth;\n  }\n\n  _isYearScrollerVisible() {\n    return this._translateX < this._yearScrollerWidth / 2;\n  }\n\n  _translateXChanged(x) {\n    if (!this._desktopMode) {\n      this.$.monthScroller.style.transform = 'translateX(' + (x - this._yearScrollerWidth) + 'px)';\n      this.$.yearScroller.style.transform = 'translateX(' + x + 'px)';\n    }\n  }\n\n  _yearAfterXYears(index) {\n    var result = new Date(this._originDate);\n    result.setFullYear(parseInt(index) + this._originDate.getFullYear());\n    return result.getFullYear();\n  }\n\n  _yearAfterXMonths(months) {\n    return this._dateAfterXMonths(months).getFullYear();\n  }\n\n  _dateAfterXMonths(months) {\n    var result = new Date(this._originDate);\n    result.setDate(1);\n    result.setMonth(parseInt(months) + this._originDate.getMonth());\n    return result;\n  }\n\n  _differenceInMonths(date1, date2) {\n    var months = (date1.getFullYear() - date2.getFullYear()) * 12;\n    return months - date2.getMonth() + date1.getMonth();\n  }\n\n  _differenceInYears(date1, date2) {\n    return this._differenceInMonths(date1, date2) / 12;\n  }\n\n  _clear() {\n    this.selectedDate = '';\n  }\n\n  _close() {\n    const overlayContent = this.getRootNode().host;\n    const overlay = overlayContent ? overlayContent.getRootNode().host : null;\n    if (overlay) {\n      overlay.opened = false;\n    }\n\n    this.dispatchEvent(new CustomEvent('close', { bubbles: true, composed: true }));\n  }\n\n  _cancel() {\n    this.focusedDate = this.selectedDate;\n    this._close();\n  }\n\n  _preventDefault(e) {\n    e.preventDefault();\n  }\n\n  /**\n   * Keyboard Navigation\n   */\n  _eventKey(e) {\n    var keys = ['down', 'up', 'right', 'left', 'enter', 'space', 'home', 'end', 'pageup', 'pagedown', 'tab', 'esc'];\n\n    for (var i = 0; i < keys.length; i++) {\n      var k = keys[i];\n      if (IronA11yKeysBehavior.keyboardEventMatchesKeys(e, k)) {\n        return k;\n      }\n    }\n  }\n\n  _onKeydown(e) {\n    var focus = this._currentlyFocusedDate();\n\n    // Cannot use (today/cancel).focused flag because vaadin-text-field removes it\n    // previously in the keydown event.\n    const isToday = e.composedPath().indexOf(this.$.todayButton) >= 0;\n    const isCancel = e.composedPath().indexOf(this.$.cancelButton) >= 0;\n    const isScroller = !isToday && !isCancel;\n\n    var eventKey = this._eventKey(e);\n    if (eventKey === 'tab') {\n      // We handle tabs here and don't want to bubble up.\n      e.stopPropagation();\n\n      const isFullscreen = this.hasAttribute('fullscreen');\n      const isShift = e.shiftKey;\n\n      if (isFullscreen) {\n        e.preventDefault();\n      } else if ((isShift && isScroller) || (!isShift && isCancel)) {\n        // Return focus back to the input field\n        e.preventDefault();\n        this.dispatchEvent(new CustomEvent('focus-input', { bubbles: true, composed: true }));\n      } else if (isShift && isToday) {\n        // Browser returns focus back to the scrollable area. We need to set\n        // the focused flag, and move the scroll to focused date.\n        this._focused = true;\n        setTimeout(() => this.revealDate(this.focusedDate), 1);\n      } else {\n        // Browser moves the focus out of the scroller, hence focused flag must\n        // set to false.\n        this._focused = false;\n      }\n    } else if (eventKey) {\n      e.preventDefault();\n      e.stopPropagation();\n      switch (eventKey) {\n        case 'down':\n          this._moveFocusByDays(7);\n          this.focus();\n          break;\n        case 'up':\n          this._moveFocusByDays(-7);\n          this.focus();\n          break;\n        case 'right':\n          if (isScroller) {\n            this._moveFocusByDays(this.__isRTL ? -1 : 1);\n          }\n          break;\n        case 'left':\n          if (isScroller) {\n            this._moveFocusByDays(this.__isRTL ? 1 : -1);\n          }\n          break;\n        case 'enter':\n          if (isScroller || isCancel) {\n            this._close();\n          } else if (isToday) {\n            this._onTodayTap();\n          }\n          break;\n        case 'space':\n          if (isCancel) {\n            this._close();\n          } else if (isToday) {\n            this._onTodayTap();\n          } else {\n            var focusedDate = this.focusedDate;\n            if (dateEquals(focusedDate, this.selectedDate)) {\n              this.selectedDate = '';\n              this.focusedDate = focusedDate;\n            } else {\n              this.selectedDate = focusedDate;\n            }\n          }\n          break;\n        case 'home':\n          this._moveFocusInsideMonth(focus, 'minDate');\n          break;\n        case 'end':\n          this._moveFocusInsideMonth(focus, 'maxDate');\n          break;\n        case 'pagedown':\n          this._moveFocusByMonths(e.shiftKey ? 12 : 1);\n          break;\n        case 'pageup':\n          this._moveFocusByMonths(e.shiftKey ? -12 : -1);\n          break;\n        case 'esc':\n          this._cancel();\n          break;\n      }\n    }\n  }\n\n  _currentlyFocusedDate() {\n    return this.focusedDate || this.selectedDate || this.initialPosition || new Date();\n  }\n\n  _focusDate(dateToFocus) {\n    this.focusedDate = dateToFocus;\n    this._focusedMonthDate = dateToFocus.getDate();\n  }\n\n  _focusClosestDate(focus) {\n    this._focusDate(getClosestDate(focus, [this.minDate, this.maxDate]));\n  }\n\n  _moveFocusByDays(days) {\n    var focus = this._currentlyFocusedDate();\n    var dateToFocus = new Date(0, 0);\n    dateToFocus.setFullYear(focus.getFullYear());\n    dateToFocus.setMonth(focus.getMonth());\n    dateToFocus.setDate(focus.getDate() + days);\n\n    if (this._dateAllowed(dateToFocus, this.minDate, this.maxDate)) {\n      this._focusDate(dateToFocus);\n    } else {\n      if (this._dateAllowed(focus, this.minDate, this.maxDate)) {\n        // Move to min or max date\n        if (days > 0) {\n          // down or right\n          this._focusDate(this.maxDate);\n        } else {\n          // up or left\n          this._focusDate(this.minDate);\n        }\n      } else {\n        // Move to closest allowed date\n        this._focusClosestDate(focus);\n      }\n    }\n  }\n\n  _moveFocusByMonths(months) {\n    var focus = this._currentlyFocusedDate();\n    var dateToFocus = new Date(0, 0);\n    dateToFocus.setFullYear(focus.getFullYear());\n    dateToFocus.setMonth(focus.getMonth() + months);\n\n    var targetMonth = dateToFocus.getMonth();\n\n    dateToFocus.setDate(this._focusedMonthDate || (this._focusedMonthDate = focus.getDate()));\n    if (dateToFocus.getMonth() !== targetMonth) {\n      dateToFocus.setDate(0);\n    }\n\n    if (this._dateAllowed(dateToFocus, this.minDate, this.maxDate)) {\n      this.focusedDate = dateToFocus;\n    } else {\n      if (this._dateAllowed(focus, this.minDate, this.maxDate)) {\n        // Move to min or max date\n        if (months > 0) {\n          // pagedown\n          this._focusDate(this.maxDate);\n        } else {\n          // pageup\n          this._focusDate(this.minDate);\n        }\n      } else {\n        // Move to closest allowed date\n        this._focusClosestDate(focus);\n      }\n    }\n  }\n\n  _moveFocusInsideMonth(focusedDate, property) {\n    var dateToFocus = new Date(0, 0);\n    dateToFocus.setFullYear(focusedDate.getFullYear());\n\n    if (property === 'minDate') {\n      dateToFocus.setMonth(focusedDate.getMonth());\n      dateToFocus.setDate(1);\n    } else {\n      dateToFocus.setMonth(focusedDate.getMonth() + 1);\n      dateToFocus.setDate(0);\n    }\n\n    if (this._dateAllowed(dateToFocus, this.minDate, this.maxDate)) {\n      this._focusDate(dateToFocus);\n    } else {\n      if (this._dateAllowed(focusedDate, this.minDate, this.maxDate)) {\n        // Move to minDate or maxDate\n        this._focusDate(this[property]);\n      } else {\n        // Move to closest allowed date\n        this._focusClosestDate(focusedDate);\n      }\n    }\n  }\n\n  _dateAllowed(date, min, max) {\n    return (!min || date >= min) && (!max || date <= max);\n  }\n\n  _isTodayAllowed(min, max) {\n    var today = new Date();\n    var todayMidnight = new Date(0, 0);\n    todayMidnight.setFullYear(today.getFullYear());\n    todayMidnight.setMonth(today.getMonth());\n    todayMidnight.setDate(today.getDate());\n    return this._dateAllowed(todayMidnight, min, max);\n  }\n\n  _stopPropagation(e) {\n    e.stopPropagation();\n  }\n}\n\ncustomElements.define(DatePickerOverlayContentElement.is, DatePickerOverlayContentElement);\n","/**\n * @license\n * Copyright (c) 2021 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { PolymerElement, html } from '@polymer/polymer/polymer-element.js';\nimport { dashToCamelCase } from '@polymer/polymer/lib/utils/case-map.js';\nimport '@polymer/iron-media-query/iron-media-query.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport './vaadin-date-picker-overlay.js';\nimport './vaadin-date-picker-overlay-content.js';\nimport { DatePickerMixin } from './vaadin-date-picker-mixin.js';\n\n/**\n * `<vaadin-date-picker-light>` is a customizable version of the `<vaadin-date-picker>` providing\n * only the scrollable month calendar view and leaving the input field definition to the user.\n *\n * To create a custom input field, you need to add a child element which has a two-way\n * data-bindable property representing the input value. The property name is expected\n * to be `bindValue` by default. See the example below for a simplest possible example\n * using an `<input>` element.\n *\n * ```html\n * <vaadin-date-picker-light attr-for-value=\"value\">\n *   <input class=\"input\">\n * </vaadin-date-picker-light>\n * ```\n *\n * ### Styling\n *\n * The following shadow DOM parts are available for styling:\n *\n * Part name | Description | Theme for Element\n * ----------------|----------------|----------------\n * `overlay-content` | The overlay element | vaadin-date-picker-light\n *\n * See [Styling Components](https://vaadin.com/docs/latest/ds/customization/styling-components) documentation.\n *\n * In addition to `<vaadin-date-picker-light>` itself, the following\n * internal components are themable:\n *\n * - `<vaadin-date-picker-overlay>`\n * - `<vaadin-date-picker-overlay-content>`\n * - `<vaadin-month-calendar>`\n *\n * Note: the `theme` attribute value set on `<vaadin-date-picker-light>`\n * is propagated to the internal themable components listed above.\n *\n * @fires {Event} change - Fired when the user commits a value change.\n * @fires {CustomEvent} opened-changed - Fired when the `opened` property changes.\n * @fires {CustomEvent} value-changed - Fired when the `value` property changes.\n *\n * @extends HTMLElement\n * @mixes ThemableMixin\n * @mixes DatePickerMixin\n */\nclass DatePickerLightElement extends ThemableMixin(DatePickerMixin(PolymerElement)) {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: inline-block;\n        }\n\n        :host([opened]) {\n          pointer-events: auto;\n        }\n      </style>\n      <slot></slot>\n\n      <vaadin-date-picker-overlay\n        id=\"overlay\"\n        fullscreen$=\"[[_fullscreen]]\"\n        opened=\"{{opened}}\"\n        on-vaadin-overlay-open=\"_onOverlayOpened\"\n        on-vaadin-overlay-close=\"_onOverlayClosed\"\n        theme$=\"[[__getOverlayTheme(theme, _overlayInitialized)]]\"\n      >\n        <template>\n          <vaadin-date-picker-overlay-content\n            id=\"overlay-content\"\n            i18n=\"[[i18n]]\"\n            fullscreen$=\"[[_fullscreen]]\"\n            label=\"[[label]]\"\n            selected-date=\"{{_selectedDate}}\"\n            slot=\"dropdown-content\"\n            focused-date=\"{{_focusedDate}}\"\n            show-week-numbers=\"[[showWeekNumbers]]\"\n            min-date=\"[[_minDate]]\"\n            max-date=\"[[_maxDate]]\"\n            on-date-tap=\"_close\"\n            role=\"dialog\"\n            part=\"overlay-content\"\n            theme$=\"[[__getOverlayTheme(theme, _overlayInitialized)]]\"\n          >\n          </vaadin-date-picker-overlay-content>\n        </template>\n      </vaadin-date-picker-overlay>\n\n      <iron-media-query query=\"[[_fullscreenMediaQuery]]\" query-matches=\"{{_fullscreen}}\"> </iron-media-query>\n    `;\n  }\n\n  static get is() {\n    return 'vaadin-date-picker-light';\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Name of the two-way data-bindable property representing the\n       * value of the custom input field.\n       * @attr {string} attr-for-value\n       * @type {string}\n       */\n      attrForValue: {\n        type: String,\n        value: 'bind-value'\n      },\n\n      /**\n       * @type {boolean}\n       * @protected\n       */\n      _overlayInitialized: {\n        type: Boolean,\n        value: true\n      }\n    };\n  }\n\n  /**\n   * @return {HTMLElement}\n   * @protected\n   */\n  _input() {\n    // Using the same selector than in combo-box.\n    // TODO: revisit this to decide the selector and document conveniently.\n    return this.querySelector('vaadin-text-field,iron-input,paper-input,.paper-input-input,.input');\n  }\n\n  set _inputValue(value) {\n    if (this._inputElement) {\n      this._inputElement[dashToCamelCase(this.attrForValue)] = value;\n    }\n  }\n\n  /** @return {string | undefined} */\n  get _inputValue() {\n    return this._inputElement && this._inputElement[dashToCamelCase(this.attrForValue)];\n  }\n}\n\ncustomElements.define(DatePickerLightElement.is, DatePickerLightElement);\n\nexport { DatePickerLightElement };\n"],"names":[],"sourceRoot":""}