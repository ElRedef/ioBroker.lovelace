{"version":3,"file":"672bb1d0.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAoEA;;AApEA;;;;;;;;ACGA;;;;ACSA;AACA;;;;;;;AAZA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;ACEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC6FA;AC/EA;;AAEA;;;AAGA;;;;;AAKA;;;;AAIA;AACA;AACA;;;;;;;AAzBA;;;ACwBA;;;AAKA;AAGA;;;;AAMA;;AAIA;AACA;;;;AAIA;AAEA;;;AAKA;AACA;;;;;AAKA;;;AAKA;AACA;;;AAGA;;;;AAKA;;AAGA;AAEA;AACA;AACA;;;;;;;;;;;;;;;AA5EA;ACDA;;AAEA;;;AAGA;;;AAGA;AACA;;;;ACTA;;AAEA;;;AAGA;;;AAGA;AACA;;;;;ACcA;;;AAKA;;;;;;;AASA;;AAIA;AAQA;;AAEA;;;AAOA;AACA;AACA;;AAEA;;AArBA;AAEA;;;;;AA0BA;AACA;;;;;;;;;;;;;;;;;AAhEA;ACHA;AACA;;AAGA;AACA;;AAEA;AAEA;AAGA;AAEA;;;;;;;;;;;;;ACwCA;AACA;;AAEA;;;;;AAKA;;AAEA;AAGA;;;;AAMA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;AAEA;;AAEA;;;AAKA;;AAIA;AACA;;;AAKA;;AAGA;AACA;;;AAIA;;AAGA;AACA;;AAEA;AAEA;;AAGA;AACA;;;AAIA;;AAGA;AACA;AACA;;AAEA;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;;;AAKA;;AAKA;;AAEA;;;AAIA;AACA;;;;AAIA;AACA;AACA;;;;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAnKA;ACZA;;AAEA;;;AAGA;;;AAGA;;AAIA;;;;AAIA;AACA;;;;AAIA;;AAIA;AAKA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACIA;ACxCA;;AAEA;;;AAGA;;;AAGA;;AAIA;;;;AAIA;AACA;;;AAGA;AAUA;AACA;AACA;AACA;;;;;;;;ACPA;;AAEA;;;AAGA;;AAIA;;;;AAOA;;;;AAIA;;AAEA;;;;AAIA;;AAEA;;AAEA;;;;AAMA;;AAGA;;;AAKA;;;AAGA;;;;AAIA;;;AAKA;;;AAGA;;;;;AAKA;;;AAKA;;;AAGA;;;;AAIA;;AAGA;;AAGA;AAGA;AACA;;;AAGA;;AAEA;AAGA;AACA;;AAEA;AAEA;AACA;AAEA;AAEA;AA3HA;;;;;;;;;;;;;;;;;;;;;;;;AAAA;ACNA;;AAEA;;;AAGA;;;AAGA;;AAIA;;;;AAIA;AACA;;;AAGA;;AAUA;AACA;;;;;;;;;;;;ACvBA;;;;;;;;;;;;;;;;;;;;;;;;ACaA;ACIA;;;AAGA;AACA;;AAIA;;;AAMA;;;AAWA;;;AAgBA;AAEA;AAGA;;AAGA;AACA;AACA;;AAEA;;;AAGA;;;;;;;;;AAvEA;ACFA;;AAEA;;;AAGA;;;AAGA;AACA;;;;ACrBA;;AAEA;;;AAGA;;;AAGA;AACA","sources":["webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/components/ha-formfield.ts","webpack://home-assistant-frontend/./src/components/ha-settings-row.ts","webpack://home-assistant-frontend/./src/components/ha-switch.ts","webpack://home-assistant-frontend/./src/layouts/ha-app-layout.js","webpack://home-assistant-frontend/./src/panels/profile/ha-advanced-mode-row.ts","webpack://home-assistant-frontend/./src/panels/profile/ha-change-password-card.ts","webpack://home-assistant-frontend/./src/panels/profile/ha-enable-shortcuts-row.ts","webpack://home-assistant-frontend/./src/panels/profile/ha-force-narrow-row.ts","webpack://home-assistant-frontend/./src/panels/profile/ha-long-lived-access-tokens-card.ts","webpack://home-assistant-frontend/./src/panels/profile/ha-mfa-modules-card.ts","webpack://home-assistant-frontend/./src/panels/profile/ha-panel-profile.ts","webpack://home-assistant-frontend/./src/panels/profile/ha-pick-dashboard-row.ts","webpack://home-assistant-frontend/./src/panels/profile/ha-pick-language-row.js","webpack://home-assistant-frontend/./src/panels/profile/ha-pick-number-format-row.ts","webpack://home-assistant-frontend/./src/panels/profile/ha-pick-theme-row.ts","webpack://home-assistant-frontend/./src/panels/profile/ha-pick-time-format-row.ts","webpack://home-assistant-frontend/./src/components/ha-push-notifications-toggle.js","webpack://home-assistant-frontend/./src/panels/profile/ha-push-notifications-row.js","webpack://home-assistant-frontend/./src/panels/profile/ha-refresh-tokens-card.ts","webpack://home-assistant-frontend/./src/panels/profile/ha-set-suspend-row.ts","webpack://home-assistant-frontend/./src/panels/profile/ha-set-vibrate-row.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public outlined = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        border-radius: var(--ha-card-border-radius, 4px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { Formfield } from \"@material/mwc-formfield\";\nimport { css, CSSResultGroup } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n@customElement(\"ha-formfield\")\n// @ts-expect-error\nexport class HaFormfield extends Formfield {\n  protected _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      switch (input.tagName) {\n        case \"HA-CHECKBOX\":\n        case \"HA-RADIO\":\n          (input as any).checked = !(input as any).checked;\n          fireEvent(input, \"change\");\n          break;\n        default:\n          input.click();\n          break;\n      }\n    }\n  }\n\n  protected static get styles(): CSSResultGroup {\n    return [\n      Formfield.styles,\n      css`\n        :host(:not([alignEnd])) ::slotted(ha-switch) {\n          margin-right: 10px;\n        }\n        :host([dir=\"rtl\"]:not([alignEnd])) ::slotted(ha-switch) {\n          margin-left: 10px;\n          margin-right: auto;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-formfield\": HaFormfield;\n  }\n}\n","import \"@polymer/paper-item/paper-item-body\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-settings-row\")\nexport class HaSettingsRow extends LitElement {\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @property({ type: Boolean, attribute: \"three-line\" })\n  public threeLine = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"prefix-wrap\">\n        <slot name=\"prefix\"></slot>\n        <paper-item-body\n          ?two-line=${!this.threeLine}\n          ?three-line=${this.threeLine}\n        >\n          <slot name=\"heading\"></slot>\n          <div secondary><slot name=\"description\"></slot></div>\n        </paper-item-body>\n      </div>\n      <slot></slot>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n        padding: 0 16px;\n        align-content: normal;\n        align-self: auto;\n        align-items: center;\n      }\n      paper-item-body {\n        padding: 8px 16px 8px 0;\n      }\n      paper-item-body[two-line] {\n        min-height: calc(\n          var(--paper-item-body-two-line-min-height, 72px) - 16px\n        );\n        flex: 1;\n      }\n      :host([narrow]) {\n        align-items: normal;\n        flex-direction: column;\n        border-top: 1px solid var(--divider-color);\n        padding-bottom: 8px;\n      }\n      ::slotted(ha-switch) {\n        padding: 16px 0;\n      }\n      div[secondary] {\n        white-space: normal;\n      }\n      .prefix-wrap {\n        display: contents;\n      }\n      :host([narrow]) .prefix-wrap {\n        display: flex;\n        align-items: center;\n      }\n    `;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-settings-row\": HaSettingsRow;\n  }\n}\n","import { Switch } from \"@material/mwc-switch/deprecated\";\nimport { css, CSSResultGroup } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { forwardHaptic } from \"../data/haptics\";\n\n@customElement(\"ha-switch\")\n// @ts-expect-error\nexport class HaSwitch extends Switch {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.style.setProperty(\n      \"--mdc-theme-secondary\",\n      \"var(--switch-checked-color)\"\n    );\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      Switch.styles,\n      css`\n        .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n          background-color: var(--switch-checked-button-color);\n          border-color: var(--switch-checked-button-color);\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__track {\n          background-color: var(--switch-checked-track-color);\n          border-color: var(--switch-checked-track-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n          background-color: var(--switch-unchecked-button-color);\n          border-color: var(--switch-unchecked-button-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n          background-color: var(--switch-unchecked-track-color);\n          border-color: var(--switch-unchecked-track-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","/* eslint-plugin-disable lit */\n/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\nThis code is copied from app-header-layout.\n'fullbleed' support is removed as Home Assisstant doesn't use it.\ntransform: translate(0) is added.\n*/\n/*\n  FIXME(polymer-modulizer): the above comments were extracted\n  from HTML and may be out of place here. Review them and\n  then delete this comment!\n*/\nimport \"@polymer/app-layout/app-header-layout/app-header-layout\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport \"@polymer/polymer/polymer-element\";\n\nclass HaAppLayout extends customElements.get(\"app-header-layout\") {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n          /**\n         * Force app-header-layout to have its own stacking context so that its parent can\n         * control the stacking of it relative to other elements (e.g. app-drawer-layout).\n         * This could be done using \\`isolation: isolate\\`, but that's not well supported\n         * across browsers.\n         */\n          position: relative;\n          z-index: 0;\n        }\n\n        #wrapper ::slotted([slot=\"header\"]) {\n          @apply --layout-fixed-top;\n          z-index: 1;\n        }\n\n        #wrapper.initializing ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) {\n          height: 100%;\n        }\n\n        :host([has-scrolling-region]) #wrapper ::slotted([slot=\"header\"]) {\n          position: absolute;\n        }\n\n        :host([has-scrolling-region])\n          #wrapper.initializing\n          ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) #wrapper #contentContainer {\n          @apply --layout-fit;\n          overflow-y: auto;\n          -webkit-overflow-scrolling: touch;\n        }\n\n        :host([has-scrolling-region]) #wrapper.initializing #contentContainer {\n          position: relative;\n        }\n\n        #contentContainer {\n          /* Create a stacking context here so that all children appear below the header. */\n          position: relative;\n          z-index: 0;\n          /* Using 'transform' will cause 'position: fixed' elements to behave like\n           'position: absolute' relative to this element. */\n          transform: translate(0);\n          margin-left: env(safe-area-inset-left);\n          margin-right: env(safe-area-inset-right);\n        }\n\n        @media print {\n          :host([has-scrolling-region]) #wrapper #contentContainer {\n            overflow-y: visible;\n          }\n        }\n      </style>\n\n      <div id=\"wrapper\" class=\"initializing\">\n        <slot id=\"headerSlot\" name=\"header\"></slot>\n\n        <div id=\"contentContainer\"><slot></slot></div>\n        <slot id=\"fab\" name=\"fab\"></slot>\n      </div>\n    `;\n  }\n}\ncustomElements.define(\"ha-app-layout\", HaAppLayout);\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../../components/ha-card\";\nimport \"../../components/ha-settings-row\";\nimport \"../../components/ha-switch\";\nimport {\n  CoreFrontendUserData,\n  getOptimisticFrontendUserDataCollection,\n} from \"../../data/frontend\";\nimport { HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-advanced-mode-row\")\nclass AdvancedModeRow extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public narrow!: boolean;\n\n  @property() public coreUserData?: CoreFrontendUserData;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-settings-row .narrow=${this.narrow}>\n        <span slot=\"heading\">\n          ${this.hass.localize(\"ui.panel.profile.advanced_mode.title\")}\n        </span>\n        <span slot=\"description\">\n          ${this.hass.localize(\"ui.panel.profile.advanced_mode.description\")}\n          <a\n            href=\"https://www.home-assistant.io/blog/2019/07/17/release-96/#advanced-mode\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            >${this.hass.localize(\"ui.panel.profile.advanced_mode.link_promo\")}\n          </a>\n        </span>\n        <ha-switch\n          .checked=${this.coreUserData && this.coreUserData.showAdvanced}\n          .disabled=${this.coreUserData === undefined}\n          @change=${this._advancedToggled}\n        ></ha-switch>\n      </ha-settings-row>\n    `;\n  }\n\n  private async _advancedToggled(ev) {\n    getOptimisticFrontendUserDataCollection(this.hass.connection, \"core\").save({\n      ...this.coreUserData,\n      showAdvanced: ev.currentTarget.checked,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      a {\n        color: var(--primary-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-advanced-mode-row\": AdvancedModeRow;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../components/ha-card\";\nimport \"../../components/ha-circular-progress\";\nimport { haStyle } from \"../../resources/styles\";\nimport type { HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-change-password-card\")\nclass HaChangePasswordCard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _loading = false;\n\n  @state() private _statusMsg?: string;\n\n  @state() private _errorMsg?: string;\n\n  @state() private _currentPassword?: string;\n\n  @state() private _password?: string;\n\n  @state() private _passwordConfirm?: string;\n\n  protected render(): TemplateResult {\n    return html`\n      <div>\n        <ha-card\n          .header=${this.hass.localize(\n            \"ui.panel.profile.change_password.header\"\n          )}\n        >\n          <div class=\"card-content\">\n            ${this._errorMsg\n              ? html` <div class=\"error\">${this._errorMsg}</div> `\n              : \"\"}\n            ${this._statusMsg\n              ? html` <div class=\"status\">${this._statusMsg}</div> `\n              : \"\"}\n\n            <paper-input\n              id=\"currentPassword\"\n              .label=${this.hass.localize(\n                \"ui.panel.profile.change_password.current_password\"\n              )}\n              type=\"password\"\n              .value=${this._currentPassword}\n              @value-changed=${this._currentPasswordChanged}\n              required\n            ></paper-input>\n\n            ${this._currentPassword\n              ? html` <paper-input\n                    .label=${this.hass.localize(\n                      \"ui.panel.profile.change_password.new_password\"\n                    )}\n                    name=\"password\"\n                    type=\"password\"\n                    .value=${this._password}\n                    @value-changed=${this._newPasswordChanged}\n                    required\n                    auto-validate\n                  ></paper-input>\n                  <paper-input\n                    .label=${this.hass.localize(\n                      \"ui.panel.profile.change_password.confirm_new_password\"\n                    )}\n                    name=\"passwordConfirm\"\n                    type=\"password\"\n                    .value=${this._passwordConfirm}\n                    @value-changed=${this._newPasswordConfirmChanged}\n                    required\n                    auto-validate\n                  ></paper-input>`\n              : \"\"}\n          </div>\n\n          <div class=\"card-actions\">\n            ${this._loading\n              ? html`<div>\n                  <ha-circular-progress active></ha-circular-progress>\n                </div>`\n              : html`<mwc-button\n                  @click=${this._changePassword}\n                  .disabled=${!this._passwordConfirm}\n                  >${this.hass.localize(\n                    \"ui.panel.profile.change_password.submit\"\n                  )}</mwc-button\n                >`}\n          </div>\n        </ha-card>\n      </div>\n    `;\n  }\n\n  private _currentPasswordChanged(ev: CustomEvent) {\n    this._currentPassword = ev.detail.value;\n  }\n\n  private _newPasswordChanged(ev: CustomEvent) {\n    this._password = ev.detail.value;\n  }\n\n  private _newPasswordConfirmChanged(ev: CustomEvent) {\n    this._passwordConfirm = ev.detail.value;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    this.addEventListener(\"keypress\", (ev) => {\n      this._statusMsg = undefined;\n      if (ev.keyCode === 13) {\n        this._changePassword();\n      }\n    });\n  }\n\n  private async _changePassword() {\n    this._statusMsg = undefined;\n    if (!this._currentPassword || !this._password || !this._passwordConfirm) {\n      return;\n    }\n\n    if (this._password !== this._passwordConfirm) {\n      this._errorMsg = this.hass.localize(\n        \"ui.panel.profile.change_password.error_new_mismatch\"\n      );\n      return;\n    }\n\n    if (this._currentPassword === this._password) {\n      this._errorMsg = this.hass.localize(\n        \"ui.panel.profile.change_password.error_new_is_old\"\n      );\n      return;\n    }\n\n    this._loading = true;\n    this._errorMsg = undefined;\n\n    try {\n      await this.hass.callWS({\n        type: \"config/auth_provider/homeassistant/change_password\",\n        current_password: this._currentPassword,\n        new_password: this._password,\n      });\n    } catch (err: any) {\n      this._errorMsg = err.message;\n      return;\n    } finally {\n      this._loading = false;\n    }\n\n    this._statusMsg = this.hass.localize(\n      \"ui.panel.profile.change_password.success\"\n    );\n    this._currentPassword = undefined;\n    this._password = undefined;\n    this._passwordConfirm = undefined;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .error {\n          color: var(--error-color);\n        }\n        .status {\n          color: var(--primary-color);\n        }\n        #currentPassword {\n          margin-top: -8px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-change-password-card\": HaChangePasswordCard;\n  }\n}\n","import { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-settings-row\";\nimport \"../../components/ha-switch\";\nimport type { HaSwitch } from \"../../components/ha-switch\";\nimport type { HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-enable-shortcuts-row\")\nclass HaEnableShortcutsRow extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public narrow!: boolean;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-settings-row .narrow=${this.narrow}>\n        <span slot=\"heading\">\n          ${this.hass.localize(\"ui.panel.profile.enable_shortcuts.header\")}\n        </span>\n        <span slot=\"description\">\n          ${this.hass.localize(\"ui.panel.profile.enable_shortcuts.description\")}\n        </span>\n        <ha-switch\n          .checked=${this.hass.enableShortcuts}\n          @change=${this._checkedChanged}\n        ></ha-switch>\n      </ha-settings-row>\n    `;\n  }\n\n  private async _checkedChanged(ev: Event) {\n    const enabled = (ev.target as HaSwitch).checked;\n    if (enabled === this.hass.enableShortcuts) {\n      return;\n    }\n\n    fireEvent(this, \"hass-enable-shortcuts\", enabled);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-enable-shortcuts-row\": HaEnableShortcutsRow;\n  }\n}\n","import { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-settings-row\";\nimport \"../../components/ha-switch\";\nimport type { HaSwitch } from \"../../components/ha-switch\";\nimport type { HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-force-narrow-row\")\nclass HaForcedNarrowRow extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public narrow!: boolean;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-settings-row .narrow=${this.narrow}>\n        <span slot=\"heading\">\n          ${this.hass.localize(\"ui.panel.profile.force_narrow.header\")}\n        </span>\n        <span slot=\"description\">\n          ${this.hass.localize(\"ui.panel.profile.force_narrow.description\")}\n        </span>\n        <ha-switch\n          .checked=${this.hass.dockedSidebar === \"always_hidden\"}\n          @change=${this._checkedChanged}\n        ></ha-switch>\n      </ha-settings-row>\n    `;\n  }\n\n  private async _checkedChanged(ev: Event) {\n    const newValue = (ev.target as HaSwitch).checked;\n    if (newValue === (this.hass.dockedSidebar === \"always_hidden\")) {\n      return;\n    }\n    fireEvent(this, \"hass-dock-sidebar\", {\n      dock: newValue ? \"always_hidden\" : \"auto\",\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-force-narrow-row\": HaForcedNarrowRow;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { mdiDelete } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { relativeTime } from \"../../common/datetime/relative_time\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-card\";\nimport \"../../components/ha-settings-row\";\nimport \"../../components/ha-icon-button\";\nimport { RefreshToken } from \"../../data/refresh_token\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n  showPromptDialog,\n} from \"../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../resources/styles\";\nimport \"../../styles/polymer-ha-style\";\nimport { HomeAssistant } from \"../../types\";\nimport { showLongLivedAccessTokenDialog } from \"./show-long-lived-access-token-dialog\";\n\n@customElement(\"ha-long-lived-access-tokens-card\")\nclass HaLongLivedTokens extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public refreshTokens?: RefreshToken[];\n\n  private _accessTokens = memoizeOne(\n    (refreshTokens: RefreshToken[]): RefreshToken[] =>\n      refreshTokens\n        ?.filter((token) => token.type === \"long_lived_access_token\")\n        .reverse()\n  );\n\n  protected render(): TemplateResult {\n    const accessTokens = this._accessTokens(this.refreshTokens!);\n\n    return html`\n      <ha-card\n        .header=${this.hass.localize(\n          \"ui.panel.profile.long_lived_access_tokens.header\"\n        )}\n      >\n        <div class=\"card-content\">\n          ${this.hass.localize(\n            \"ui.panel.profile.long_lived_access_tokens.description\"\n          )}\n\n          <a\n            href=\"https://developers.home-assistant.io/docs/en/auth_api.html#making-authenticated-requests\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            ${this.hass.localize(\n              \"ui.panel.profile.long_lived_access_tokens.learn_auth_requests\"\n            )}\n          </a>\n          ${!accessTokens?.length\n            ? html`<p>\n                ${this.hass.localize(\n                  \"ui.panel.profile.long_lived_access_tokens.empty_state\"\n                )}\n              </p>`\n            : accessTokens!.map(\n                (token) => html`<ha-settings-row two-line>\n                  <span slot=\"heading\">${token.client_name}</span>\n                  <div slot=\"description\">\n                    ${this.hass.localize(\n                      \"ui.panel.profile.long_lived_access_tokens.created\",\n                      \"date\",\n                      relativeTime(new Date(token.created_at), this.hass.locale)\n                    )}\n                  </div>\n                  <ha-icon-button\n                    .token=${token}\n                    .disabled=${token.is_current}\n                    .label=${this.hass.localize(\"ui.common.delete\")}\n                    .path=${mdiDelete}\n                    @click=${this._deleteToken}\n                  ></ha-icon-button>\n                </ha-settings-row>`\n              )}\n        </div>\n\n        <div class=\"card-actions\">\n          <mwc-button @click=${this._createToken}>\n            ${this.hass.localize(\n              \"ui.panel.profile.long_lived_access_tokens.create\"\n            )}\n          </mwc-button>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private async _createToken(): Promise<void> {\n    const name = await showPromptDialog(this, {\n      text: this.hass.localize(\n        \"ui.panel.profile.long_lived_access_tokens.prompt_name\"\n      ),\n      inputLabel: this.hass.localize(\n        \"ui.panel.profile.long_lived_access_tokens.name\"\n      ),\n    });\n\n    if (!name) {\n      return;\n    }\n\n    try {\n      const token = await this.hass.callWS<string>({\n        type: \"auth/long_lived_access_token\",\n        lifespan: 3650,\n        client_name: name,\n      });\n\n      showLongLivedAccessTokenDialog(this, { token, name });\n\n      fireEvent(this, \"hass-refresh-tokens\");\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.profile.long_lived_access_tokens.create_failed\"\n        ),\n        text: err.message,\n      });\n    }\n  }\n\n  private async _deleteToken(ev: Event): Promise<void> {\n    const token = (ev.currentTarget as any).token;\n    if (\n      !(await showConfirmationDialog(this, {\n        text: this.hass.localize(\n          \"ui.panel.profile.long_lived_access_tokens.confirm_delete\",\n          \"name\",\n          token.client_name\n        ),\n      }))\n    ) {\n      return;\n    }\n    try {\n      await this.hass.callWS({\n        type: \"auth/delete_refresh_token\",\n        refresh_token_id: token.id,\n      });\n      fireEvent(this, \"hass-refresh-tokens\");\n    } catch (err: any) {\n      await showAlertDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.profile.long_lived_access_tokens.delete_failed\"\n        ),\n        text: err.message,\n      });\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-settings-row {\n          padding: 0;\n        }\n        a {\n          color: var(--primary-color);\n        }\n        mwc-button {\n          --mdc-theme-primary: var(--primary-color);\n        }\n        ha-icon-button {\n          color: var(--primary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-long-lived-access-tokens-card\": HaLongLivedTokens;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-card\";\nimport { showConfirmationDialog } from \"../../dialogs/generic/show-dialog-box\";\nimport { HomeAssistant, MFAModule } from \"../../types\";\nimport { showMfaModuleSetupFlowDialog } from \"./show-ha-mfa-module-setup-flow-dialog\";\n\n@customElement(\"ha-mfa-modules-card\")\nclass HaMfaModulesCard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public mfaModules!: MFAModule[];\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-card .header=${this.hass.localize(\"ui.panel.profile.mfa.header\")}>\n        ${this.mfaModules.map(\n          (module) => html`<paper-item>\n            <paper-item-body two-line=\"\">\n              <div>${module.name}</div>\n              <div secondary>${module.id}</div>\n            </paper-item-body>\n            ${module.enabled\n              ? html`<mwc-button .module=${module} @click=${this._disable}\n                  >${this.hass.localize(\n                    \"ui.panel.profile.mfa.disable\"\n                  )}</mwc-button\n                >`\n              : html`<mwc-button .module=${module} @click=${this._enable}\n                  >${this.hass.localize(\n                    \"ui.panel.profile.mfa.enable\"\n                  )}</mwc-button\n                >`}\n          </paper-item>`\n        )}\n      </ha-card>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      mwc-button {\n        margin-right: -0.57em;\n      }\n    `;\n  }\n\n  private _enable(ev) {\n    showMfaModuleSetupFlowDialog(this, {\n      mfaModuleId: ev.currentTarget.module.id,\n      dialogClosedCallback: () => this._refreshCurrentUser(),\n    });\n  }\n\n  private async _disable(ev) {\n    const mfamodule = ev.currentTarget.module;\n    if (\n      !(await showConfirmationDialog(this, {\n        text: this.hass.localize(\n          \"ui.panel.profile.mfa.confirm_disable\",\n          \"name\",\n          mfamodule.name\n        ),\n      }))\n    ) {\n      return;\n    }\n\n    const mfaModuleId = mfamodule.id;\n\n    this.hass\n      .callWS({\n        type: \"auth/depose_mfa\",\n        mfa_module_id: mfaModuleId,\n      })\n      .then(() => {\n        this._refreshCurrentUser();\n      });\n  }\n\n  private _refreshCurrentUser() {\n    fireEvent(this, \"hass-refresh-current-user\");\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-mfa-modules-card\": HaMfaModulesCard;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-card\";\nimport \"../../components/ha-menu-button\";\nimport { isExternal } from \"../../data/external\";\nimport {\n  CoreFrontendUserData,\n  getOptimisticFrontendUserDataCollection,\n} from \"../../data/frontend\";\nimport { RefreshToken } from \"../../data/refresh_token\";\nimport { showConfirmationDialog } from \"../../dialogs/generic/show-dialog-box\";\nimport \"../../layouts/ha-app-layout\";\nimport { haStyle } from \"../../resources/styles\";\nimport { HomeAssistant } from \"../../types\";\nimport \"./ha-advanced-mode-row\";\nimport \"./ha-change-password-card\";\nimport \"./ha-enable-shortcuts-row\";\nimport \"./ha-force-narrow-row\";\nimport \"./ha-long-lived-access-tokens-card\";\nimport \"./ha-mfa-modules-card\";\nimport \"./ha-pick-dashboard-row\";\nimport \"./ha-pick-language-row\";\nimport \"./ha-pick-number-format-row\";\nimport \"./ha-pick-theme-row\";\nimport \"./ha-pick-time-format-row\";\nimport \"./ha-push-notifications-row\";\nimport \"./ha-refresh-tokens-card\";\nimport \"./ha-set-suspend-row\";\nimport \"./ha-set-vibrate-row\";\n\nclass HaPanelProfile extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @state() private _refreshTokens?: RefreshToken[];\n\n  @state() private _coreUserData?: CoreFrontendUserData | null;\n\n  private _unsubCoreData?: UnsubscribeFunc;\n\n  public connectedCallback() {\n    super.connectedCallback();\n    this._refreshRefreshTokens();\n    this._unsubCoreData = getOptimisticFrontendUserDataCollection(\n      this.hass.connection,\n      \"core\"\n    ).subscribe((coreUserData) => {\n      this._coreUserData = coreUserData;\n    });\n  }\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this._unsubCoreData) {\n      this._unsubCoreData();\n      this._unsubCoreData = undefined;\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-app-layout>\n        <app-header slot=\"header\" fixed>\n          <app-toolbar>\n            <ha-menu-button\n              .hass=${this.hass}\n              .narrow=${this.narrow}\n            ></ha-menu-button>\n            <div main-title>${this.hass.localize(\"panel.profile\")}</div>\n          </app-toolbar>\n        </app-header>\n\n        <div class=\"content\">\n          <ha-card .header=${this.hass.user!.name}>\n            <div class=\"card-content\">\n              ${this.hass.localize(\"ui.panel.profile.current_user\", {\n                fullName: this.hass.user!.name,\n              })}\n              ${this.hass.user!.is_owner\n                ? this.hass.localize(\"ui.panel.profile.is_owner\")\n                : \"\"}\n            </div>\n\n            <ha-pick-language-row\n              .narrow=${this.narrow}\n              .hass=${this.hass}\n            ></ha-pick-language-row>\n            <ha-pick-number-format-row\n              .narrow=${this.narrow}\n              .hass=${this.hass}\n            ></ha-pick-number-format-row>\n            <ha-pick-time-format-row\n              .narrow=${this.narrow}\n              .hass=${this.hass}\n            ></ha-pick-time-format-row>\n            <ha-pick-theme-row\n              .narrow=${this.narrow}\n              .hass=${this.hass}\n            ></ha-pick-theme-row>\n            <ha-pick-dashboard-row\n              .narrow=${this.narrow}\n              .hass=${this.hass}\n            ></ha-pick-dashboard-row>\n            <ha-settings-row .narrow=${this.narrow}>\n              <span slot=\"heading\">\n                ${this.hass.localize(\n                  \"ui.panel.profile.customize_sidebar.header\"\n                )}\n              </span>\n              <span slot=\"description\">\n                ${this.hass.localize(\n                  \"ui.panel.profile.customize_sidebar.description\"\n                )}\n              </span>\n              <mwc-button @click=${this._customizeSidebar}>\n                ${this.hass.localize(\n                  \"ui.panel.profile.customize_sidebar.button\"\n                )}\n              </mwc-button>\n            </ha-settings-row>\n            ${this.hass.dockedSidebar !== \"auto\" || !this.narrow\n              ? html`\n                  <ha-force-narrow-row\n                    .narrow=${this.narrow}\n                    .hass=${this.hass}\n                  ></ha-force-narrow-row>\n                `\n              : \"\"}\n            ${\"vibrate\" in navigator\n              ? html`\n                  <ha-set-vibrate-row\n                    .narrow=${this.narrow}\n                    .hass=${this.hass}\n                  ></ha-set-vibrate-row>\n                `\n              : \"\"}\n            ${!isExternal\n              ? html`\n                  <ha-push-notifications-row\n                    .narrow=${this.narrow}\n                    .hass=${this.hass}\n                  ></ha-push-notifications-row>\n                `\n              : \"\"}\n            ${this.hass.user!.is_admin\n              ? html`\n                  <ha-advanced-mode-row\n                    .hass=${this.hass}\n                    .narrow=${this.narrow}\n                    .coreUserData=${this._coreUserData}\n                  ></ha-advanced-mode-row>\n                `\n              : \"\"}\n            <ha-set-suspend-row\n              .narrow=${this.narrow}\n              .hass=${this.hass}\n            ></ha-set-suspend-row>\n            <ha-enable-shortcuts-row\n              .narrow=${this.narrow}\n              .hass=${this.hass}\n            ></ha-enable-shortcuts-row>\n            <div class=\"card-actions\">\n              <mwc-button class=\"warning\" @click=${this._handleLogOut}>\n                ${this.hass.localize(\"ui.panel.profile.logout\")}\n              </mwc-button>\n            </div>\n          </ha-card>\n\n          ${this.hass.user!.credentials.some(\n            (cred) => cred.auth_provider_type === \"homeassistant\"\n          )\n            ? html`\n                <ha-change-password-card\n                  .hass=${this.hass}\n                ></ha-change-password-card>\n              `\n            : \"\"}\n\n          <ha-mfa-modules-card\n            .hass=${this.hass}\n            .mfaModules=${this.hass.user!.mfa_modules}\n          ></ha-mfa-modules-card>\n\n          <ha-refresh-tokens-card\n            .hass=${this.hass}\n            .refreshTokens=${this._refreshTokens}\n            @hass-refresh-tokens=${this._refreshRefreshTokens}\n          ></ha-refresh-tokens-card>\n\n          <ha-long-lived-access-tokens-card\n            .hass=${this.hass}\n            .refreshTokens=${this._refreshTokens}\n            @hass-refresh-tokens=${this._refreshRefreshTokens}\n          ></ha-long-lived-access-tokens-card>\n        </div>\n      </ha-app-layout>\n    `;\n  }\n\n  private _customizeSidebar() {\n    fireEvent(this, \"hass-edit-sidebar\", { editMode: true });\n  }\n\n  private async _refreshRefreshTokens() {\n    this._refreshTokens = await this.hass.callWS({\n      type: \"auth/refresh_tokens\",\n    });\n  }\n\n  private _handleLogOut() {\n    showConfirmationDialog(this, {\n      title: this.hass.localize(\"ui.panel.profile.logout_title\"),\n      text: this.hass.localize(\"ui.panel.profile.logout_text\"),\n      confirmText: this.hass.localize(\"ui.panel.profile.logout\"),\n      confirm: () => fireEvent(this, \"hass-logout\"),\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          -ms-user-select: initial;\n          -webkit-user-select: initial;\n          -moz-user-select: initial;\n        }\n\n        .content {\n          display: block;\n          max-width: 600px;\n          margin: 0 auto;\n          padding-bottom: env(safe-area-inset-bottom);\n        }\n\n        .content > * {\n          display: block;\n          margin: 24px 0;\n        }\n\n        .promo-advanced {\n          text-align: center;\n          color: var(--secondary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ncustomElements.define(\"ha-panel-profile\", HaPanelProfile);\n","import \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport { html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../components/ha-paper-dropdown-menu\";\nimport \"../../components/ha-settings-row\";\nimport { fetchDashboards, LovelaceDashboard } from \"../../data/lovelace\";\nimport { setDefaultPanel } from \"../../data/panel\";\nimport { HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-pick-dashboard-row\")\nclass HaPickDashboardRow extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public narrow!: boolean;\n\n  @state() private _dashboards: LovelaceDashboard[] = [];\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    this._getDashboards();\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-settings-row .narrow=${this.narrow}>\n        <span slot=\"heading\">\n          ${this.hass.localize(\"ui.panel.profile.dashboard.header\")}\n        </span>\n        <span slot=\"description\">\n          ${this.hass.localize(\"ui.panel.profile.dashboard.description\")}\n        </span>\n        <ha-paper-dropdown-menu\n          .label=${this.hass.localize(\n            \"ui.panel.profile.dashboard.dropdown_label\"\n          )}\n          dynamic-align\n          .disabled=${!this._dashboards.length}\n        >\n          <paper-listbox\n            slot=\"dropdown-content\"\n            .selected=${this.hass.defaultPanel}\n            @iron-select=${this._dashboardChanged}\n            attr-for-selected=\"url-path\"\n          >\n            <paper-item url-path=\"lovelace\"\n              >${this.hass.localize(\n                \"ui.panel.profile.dashboard.default_dashboard_label\"\n              )}</paper-item\n            >\n            ${this._dashboards.map((dashboard) => {\n              if (!this.hass.user!.is_admin && dashboard.require_admin) {\n                return \"\";\n              }\n              return html`\n                <paper-item url-path=${dashboard.url_path}\n                  >${dashboard.title}</paper-item\n                >\n              `;\n            })}\n          </paper-listbox>\n        </ha-paper-dropdown-menu>\n      </ha-settings-row>\n    `;\n  }\n\n  private async _getDashboards() {\n    this._dashboards = await fetchDashboards(this.hass);\n  }\n\n  private _dashboardChanged(ev: CustomEvent) {\n    const urlPath = ev.detail.item.getAttribute(\"url-path\");\n    if (!urlPath || urlPath === this.hass.defaultPanel) {\n      return;\n    }\n    setDefaultPanel(this, urlPath);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-pick-dashboard-row\": HaPickDashboardRow;\n  }\n}\n","import \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport \"../../components/ha-paper-dropdown-menu\";\nimport \"../../components/ha-settings-row\";\nimport { EventsMixin } from \"../../mixins/events-mixin\";\nimport LocalizeMixin from \"../../mixins/localize-mixin\";\n\n/*\n * @appliesMixin LocalizeMixin\n * @appliesMixin EventsMixin\n */\nclass HaPickLanguageRow extends LocalizeMixin(EventsMixin(PolymerElement)) {\n  static get template() {\n    return html`\n      <style>\n        a {\n          color: var(--primary-color);\n        }\n        paper-item {\n          direction: ltr;\n        }\n        paper-item[is-rtl] {\n          direction: rtl;\n        }\n      </style>\n      <ha-settings-row narrow=\"[[narrow]]\">\n        <span slot=\"heading\"\n          >[[localize('ui.panel.profile.language.header')]]</span\n        >\n        <span slot=\"description\">\n          <a\n            href=\"https://developers.home-assistant.io/docs/en/internationalization_translation.html\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            >[[localize('ui.panel.profile.language.link_promo')]]</a\n          >\n        </span>\n        <ha-paper-dropdown-menu\n          label=\"[[localize('ui.panel.profile.language.dropdown_label')]]\"\n          dynamic-align=\"\"\n        >\n          <paper-listbox\n            slot=\"dropdown-content\"\n            attr-for-selected=\"language-tag\"\n            selected=\"{{languageSelection}}\"\n          >\n            <template is=\"dom-repeat\" items=\"[[languages]]\">\n              <paper-item language-tag$=\"[[item.key]]\" is-rtl$=\"[[item.isRTL]]\">\n                [[item.nativeName]]\n              </paper-item>\n            </template>\n          </paper-listbox>\n        </ha-paper-dropdown-menu>\n      </ha-settings-row>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      narrow: Boolean,\n      languageSelection: {\n        type: String,\n        observer: \"languageSelectionChanged\",\n      },\n      languages: {\n        type: Array,\n        computed: \"computeLanguages(hass)\",\n      },\n    };\n  }\n\n  static get observers() {\n    return [\"setLanguageSelection(language)\"];\n  }\n\n  computeLanguages(hass) {\n    if (!hass || !hass.translationMetadata) {\n      return [];\n    }\n    const translations = hass.translationMetadata.translations;\n    return Object.keys(translations).map((key) => ({\n      key,\n      ...translations[key],\n    }));\n  }\n\n  setLanguageSelection(language) {\n    this.languageSelection = language;\n  }\n\n  languageSelectionChanged(newVal) {\n    // Only fire event if language was changed. This prevents select updates when\n    // responding to hass changes.\n    if (newVal !== this.hass.language) {\n      this.fire(\"hass-language-select\", newVal);\n    }\n  }\n\n  ready() {\n    super.ready();\n    if (this.hass && this.hass.locale && this.hass.locale.language) {\n      this.setLanguageSelection(this.hass.locale.language);\n    }\n  }\n}\n\ncustomElements.define(\"ha-pick-language-row\", HaPickLanguageRow);\n","import \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { formatNumber } from \"../../common/number/format_number\";\nimport \"../../components/ha-card\";\nimport \"../../components/ha-paper-dropdown-menu\";\nimport \"../../components/ha-settings-row\";\nimport { NumberFormat } from \"../../data/translation\";\nimport { HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-pick-number-format-row\")\nclass NumberFormatRow extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public narrow!: boolean;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-settings-row .narrow=${this.narrow}>\n        <span slot=\"heading\">\n          ${this.hass.localize(\"ui.panel.profile.number_format.header\")}\n        </span>\n        <span slot=\"description\">\n          ${this.hass.localize(\"ui.panel.profile.number_format.description\")}\n        </span>\n        <ha-paper-dropdown-menu\n          label=${this.hass.localize(\n            \"ui.panel.profile.number_format.dropdown_label\"\n          )}\n          dynamic-align\n          .disabled=${this.hass.locale === undefined}\n        >\n          <paper-listbox\n            slot=\"dropdown-content\"\n            .selected=${this.hass.locale.number_format}\n            @iron-select=${this._handleFormatSelection}\n            attr-for-selected=\"format\"\n          >\n            ${Object.values(NumberFormat).map((format) => {\n              const formattedNumber = formatNumber(1234567.89, {\n                ...this.hass.locale,\n                number_format: format,\n              });\n              const value = this.hass.localize(\n                `ui.panel.profile.number_format.formats.${format}`\n              );\n              const twoLine = value.slice(value.length - 2) !== \"89\"; // Display explicit number formats on one line\n              return html`\n                <paper-item .format=${format} .label=${value}>\n                  <paper-item-body ?two-line=${twoLine}>\n                    <div>${value}</div>\n                    ${twoLine\n                      ? html`<div secondary>${formattedNumber}</div>`\n                      : \"\"}\n                  </paper-item-body>\n                </paper-item>\n              `;\n            })}\n          </paper-listbox>\n        </ha-paper-dropdown-menu>\n      </ha-settings-row>\n    `;\n  }\n\n  private async _handleFormatSelection(ev: CustomEvent) {\n    fireEvent(this, \"hass-number-format-select\", ev.detail.item.format);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-pick-number-format-row\": NumberFormatRow;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-formfield\";\nimport \"../../components/ha-paper-dropdown-menu\";\nimport \"../../components/ha-radio\";\nimport type { HaRadio } from \"../../components/ha-radio\";\nimport \"../../components/ha-settings-row\";\nimport {\n  DEFAULT_PRIMARY_COLOR,\n  DEFAULT_ACCENT_COLOR,\n} from \"../../resources/ha-style\";\nimport { HomeAssistant } from \"../../types\";\nimport { documentationUrl } from \"../../util/documentation-url\";\n\n@customElement(\"ha-pick-theme-row\")\nexport class HaPickThemeRow extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @state() _themeNames: string[] = [];\n\n  protected render(): TemplateResult {\n    const hasThemes =\n      this.hass.themes.themes && Object.keys(this.hass.themes.themes).length;\n    const curTheme = this.hass.selectedTheme?.theme\n      ? this.hass.selectedTheme?.theme\n      : this.hass.themes.darkMode\n      ? this.hass.themes.default_dark_theme || this.hass.themes.default_theme\n      : this.hass.themes.default_theme;\n\n    const themeSettings = this.hass.selectedTheme;\n\n    return html`\n      <ha-settings-row .narrow=${this.narrow}>\n        <span slot=\"heading\"\n          >${this.hass.localize(\"ui.panel.profile.themes.header\")}</span\n        >\n        <span slot=\"description\">\n          ${!hasThemes\n            ? this.hass.localize(\"ui.panel.profile.themes.error_no_theme\")\n            : \"\"}\n          <a\n            href=${documentationUrl(\n              this.hass,\n              \"/integrations/frontend/#defining-themes\"\n            )}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            ${this.hass.localize(\"ui.panel.profile.themes.link_promo\")}\n          </a>\n        </span>\n        <ha-paper-dropdown-menu\n          .label=${this.hass.localize(\"ui.panel.profile.themes.dropdown_label\")}\n          dynamic-align\n          .disabled=${!hasThemes}\n        >\n          <paper-listbox\n            slot=\"dropdown-content\"\n            .selected=${this.hass.selectedTheme?.theme || \"Backend-selected\"}\n            attr-for-selected=\"theme\"\n            @iron-select=${this._handleThemeSelection}\n          >\n            ${this._themeNames.map(\n              (theme) => html`<paper-item .theme=${theme}>${theme}</paper-item>`\n            )}\n          </paper-listbox>\n        </ha-paper-dropdown-menu>\n      </ha-settings-row>\n      ${curTheme === \"default\" || this._supportsModeSelection(curTheme)\n        ? html` <div class=\"inputs\">\n            <ha-formfield\n              .label=${this.hass.localize(\n                \"ui.panel.profile.themes.dark_mode.auto\"\n              )}\n            >\n              <ha-radio\n                @change=${this._handleDarkMode}\n                name=\"dark_mode\"\n                value=\"auto\"\n                ?checked=${themeSettings?.dark === undefined}\n              ></ha-radio>\n            </ha-formfield>\n            <ha-formfield\n              .label=${this.hass.localize(\n                \"ui.panel.profile.themes.dark_mode.light\"\n              )}\n            >\n              <ha-radio\n                @change=${this._handleDarkMode}\n                name=\"dark_mode\"\n                value=\"light\"\n                ?checked=${themeSettings?.dark === false}\n              >\n              </ha-radio>\n            </ha-formfield>\n            <ha-formfield\n              .label=${this.hass.localize(\n                \"ui.panel.profile.themes.dark_mode.dark\"\n              )}\n            >\n              <ha-radio\n                @change=${this._handleDarkMode}\n                name=\"dark_mode\"\n                value=\"dark\"\n                ?checked=${themeSettings?.dark === true}\n              >\n              </ha-radio>\n            </ha-formfield>\n            ${curTheme === \"default\"\n              ? html` <div class=\"color-pickers\">\n                  <paper-input\n                    .value=${themeSettings?.primaryColor ||\n                    DEFAULT_PRIMARY_COLOR}\n                    type=\"color\"\n                    .label=${this.hass.localize(\n                      \"ui.panel.profile.themes.primary_color\"\n                    )}\n                    .name=${\"primaryColor\"}\n                    @change=${this._handleColorChange}\n                  ></paper-input>\n                  <paper-input\n                    .value=${themeSettings?.accentColor || DEFAULT_ACCENT_COLOR}\n                    type=\"color\"\n                    .label=${this.hass.localize(\n                      \"ui.panel.profile.themes.accent_color\"\n                    )}\n                    .name=${\"accentColor\"}\n                    @change=${this._handleColorChange}\n                  ></paper-input>\n                  ${themeSettings?.primaryColor || themeSettings?.accentColor\n                    ? html` <mwc-button @click=${this._resetColors}>\n                        ${this.hass.localize(\"ui.panel.profile.themes.reset\")}\n                      </mwc-button>`\n                    : \"\"}\n                </div>`\n              : \"\"}\n          </div>`\n        : \"\"}\n    `;\n  }\n\n  public willUpdate(changedProperties: PropertyValues) {\n    const oldHass = changedProperties.get(\"hass\") as undefined | HomeAssistant;\n    const themesChanged =\n      changedProperties.has(\"hass\") &&\n      (!oldHass || oldHass.themes.themes !== this.hass.themes.themes);\n\n    if (themesChanged) {\n      this._themeNames = [\"Backend-selected\", \"default\"].concat(\n        Object.keys(this.hass.themes.themes).sort()\n      );\n    }\n  }\n\n  private _handleColorChange(ev: CustomEvent) {\n    const target = ev.target as any;\n    fireEvent(this, \"settheme\", { [target.name]: target.value });\n  }\n\n  private _resetColors() {\n    fireEvent(this, \"settheme\", {\n      primaryColor: undefined,\n      accentColor: undefined,\n    });\n  }\n\n  private _supportsModeSelection(themeName: string): boolean {\n    return \"modes\" in this.hass.themes.themes[themeName];\n  }\n\n  private _handleDarkMode(ev: CustomEvent) {\n    let dark: boolean | undefined;\n    switch ((ev.target as HaRadio).value) {\n      case \"light\":\n        dark = false;\n        break;\n      case \"dark\":\n        dark = true;\n        break;\n    }\n    fireEvent(this, \"settheme\", { dark });\n  }\n\n  private _handleThemeSelection(ev: CustomEvent) {\n    const theme = ev.detail.item.theme;\n    if (theme === \"Backend-selected\") {\n      if (this.hass.selectedTheme?.theme) {\n        fireEvent(this, \"settheme\", {\n          theme: \"\",\n          primaryColor: undefined,\n          accentColor: undefined,\n        });\n      }\n      return;\n    }\n    fireEvent(this, \"settheme\", {\n      theme,\n      primaryColor: undefined,\n      accentColor: undefined,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      a {\n        color: var(--primary-color);\n      }\n      .inputs {\n        display: flex;\n        flex-wrap: wrap;\n        justify-content: space-between;\n        margin: 0 12px;\n      }\n      ha-formfield {\n        margin: 0 4px;\n      }\n      .color-pickers {\n        display: flex;\n        justify-content: flex-end;\n        align-items: center;\n        flex-grow: 1;\n      }\n      paper-input {\n        min-width: 75px;\n        flex-grow: 1;\n        margin: 0 4px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-pick-theme-row\": HaPickThemeRow;\n  }\n}\n","import \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { formatTime } from \"../../common/datetime/format_time\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-card\";\nimport \"../../components/ha-paper-dropdown-menu\";\nimport \"../../components/ha-settings-row\";\nimport { TimeFormat } from \"../../data/translation\";\nimport { HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-pick-time-format-row\")\nclass TimeFormatRow extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public narrow!: boolean;\n\n  protected render(): TemplateResult {\n    const date = new Date();\n    return html`\n      <ha-settings-row .narrow=${this.narrow}>\n        <span slot=\"heading\">\n          ${this.hass.localize(\"ui.panel.profile.time_format.header\")}\n        </span>\n        <span slot=\"description\">\n          ${this.hass.localize(\"ui.panel.profile.time_format.description\")}\n        </span>\n        <ha-paper-dropdown-menu\n          .label=${this.hass.localize(\n            \"ui.panel.profile.time_format.dropdown_label\"\n          )}\n          dynamic-align\n          .disabled=${this.hass.locale === undefined}\n        >\n          <paper-listbox\n            slot=\"dropdown-content\"\n            .selected=${this.hass.locale.time_format}\n            @iron-select=${this._handleFormatSelection}\n            attr-for-selected=\"format\"\n          >\n            ${Object.values(TimeFormat).map((format) => {\n              const formattedTime = formatTime(date, {\n                ...this.hass.locale,\n                time_format: format,\n              });\n              const value = this.hass.localize(\n                `ui.panel.profile.time_format.formats.${format}`\n              );\n              return html` <paper-item .format=${format} .label=${value}>\n                <paper-item-body two-line>\n                  <div>${value}</div>\n                  <div secondary>${formattedTime}</div>\n                </paper-item-body>\n              </paper-item>`;\n            })}\n          </paper-listbox>\n        </ha-paper-dropdown-menu>\n      </ha-settings-row>\n    `;\n  }\n\n  private async _handleFormatSelection(ev: CustomEvent) {\n    fireEvent(this, \"hass-time-format-select\", ev.detail.item.format);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-pick-time-format-row\": TimeFormatRow;\n  }\n}\n","import { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport { getAppKey } from \"../data/notify_html5\";\nimport { showPromptDialog } from \"../dialogs/generic/show-dialog-box\";\nimport { EventsMixin } from \"../mixins/events-mixin\";\nimport \"./ha-switch\";\n\nexport const pushSupported =\n  \"serviceWorker\" in navigator &&\n  \"PushManager\" in window &&\n  (document.location.protocol === \"https:\" ||\n    document.location.hostname === \"localhost\" ||\n    document.location.hostname === \"127.0.0.1\");\n\n/*\n * @appliesMixin EventsMixin\n */\nclass HaPushNotificationsToggle extends EventsMixin(PolymerElement) {\n  static get template() {\n    return html`\n      <ha-switch\n        disabled=\"[[_compDisabled(disabled, loading)]]\"\n        checked=\"{{pushChecked}}\"\n        on-change=\"handlePushChange\"\n      ></ha-switch>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: { type: Object, value: null },\n      disabled: {\n        type: Boolean,\n        value: false,\n      },\n      pushChecked: {\n        type: Boolean,\n        value:\n          \"Notification\" in window && Notification.permission === \"granted\",\n      },\n      loading: {\n        type: Boolean,\n        value: true,\n      },\n    };\n  }\n\n  async connectedCallback() {\n    super.connectedCallback();\n\n    if (!pushSupported) return;\n\n    try {\n      const reg = await navigator.serviceWorker.ready;\n      if (!reg.pushManager) {\n        return;\n      }\n      reg.pushManager.getSubscription().then((subscription) => {\n        this.loading = false;\n        this.pushChecked = !!subscription;\n      });\n    } catch (err) {\n      // We don't set loading to `false` so we remain disabled\n    }\n  }\n\n  handlePushChange(event) {\n    // Somehow this is triggered on Safari on page load causing\n    // it to get into a loop and crash the page.\n    if (!pushSupported) return;\n\n    if (event.target.checked) {\n      this.subscribePushNotifications();\n    } else {\n      this.unsubscribePushNotifications();\n    }\n  }\n\n  async subscribePushNotifications() {\n    const reg = await navigator.serviceWorker.ready;\n    let sub;\n\n    try {\n      let browserName;\n      if (navigator.userAgent.toLowerCase().indexOf(\"firefox\") > -1) {\n        browserName = \"firefox\";\n      } else {\n        browserName = \"chrome\";\n      }\n\n      const name = await showPromptDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.profile.push_notifications.add_device_prompt.title\"\n        ),\n        inputLabel: this.hass.localize(\n          \"ui.panel.profile.push_notifications.add_device_prompt.input_label\"\n        ),\n      });\n      if (name == null) {\n        this.pushChecked = false;\n        return;\n      }\n\n      let applicationServerKey;\n      try {\n        applicationServerKey = await getAppKey(this.hass);\n      } catch (ex) {\n        applicationServerKey = null;\n      }\n\n      if (applicationServerKey) {\n        sub = await reg.pushManager.subscribe({\n          userVisibleOnly: true,\n          applicationServerKey,\n        });\n      } else {\n        sub = await reg.pushManager.subscribe({ userVisibleOnly: true });\n      }\n\n      await this.hass.callApi(\"POST\", \"notify.html5\", {\n        subscription: sub,\n        browser: browserName,\n        name,\n      });\n    } catch (err) {\n      const message = err.message || \"Notification registration failed.\";\n      if (sub) {\n        await sub.unsubscribe();\n      }\n\n      // eslint-disable-next-line\n      console.error(err);\n\n      this.fire(\"hass-notification\", { message });\n      this.pushChecked = false;\n    }\n  }\n\n  async unsubscribePushNotifications() {\n    const reg = await navigator.serviceWorker.ready;\n\n    try {\n      const sub = await reg.pushManager.getSubscription();\n\n      if (!sub) return;\n\n      await this.hass.callApi(\"DELETE\", \"notify.html5\", { subscription: sub });\n      await sub.unsubscribe();\n    } catch (err) {\n      const message =\n        err.message || \"Failed unsubscribing for push notifications.\";\n\n      // eslint-disable-next-line\n      console.error(\"Error in unsub push\", err);\n\n      this.fire(\"hass-notification\", { message });\n      this.pushChecked = true;\n    }\n  }\n\n  _compDisabled(disabled, loading) {\n    return disabled || loading;\n  }\n}\n\ncustomElements.define(\n  \"ha-push-notifications-toggle\",\n  HaPushNotificationsToggle\n);\n","import \"@polymer/iron-flex-layout/iron-flex-layout-classes\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport { isComponentLoaded } from \"../../common/config/is_component_loaded\";\nimport { pushSupported } from \"../../components/ha-push-notifications-toggle\";\nimport \"../../components/ha-settings-row\";\nimport LocalizeMixin from \"../../mixins/localize-mixin\";\nimport { documentationUrl } from \"../../util/documentation-url\";\n\n/*\n * @appliesMixin LocalizeMixin\n */\nclass HaPushNotificationsRow extends LocalizeMixin(PolymerElement) {\n  static get template() {\n    return html`\n      <style>\n        a {\n          color: var(--primary-color);\n        }\n      </style>\n      <ha-settings-row narrow=\"[[narrow]]\">\n        <span slot=\"heading\"\n          >[[localize('ui.panel.profile.push_notifications.header')]]</span\n        >\n        <span slot=\"description\">\n          [[localize(_descrLocalizeKey)]]\n          <a\n            href=\"[[_computeDocumentationUrl(hass)]]\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            >[[localize('ui.panel.profile.push_notifications.link_promo')]]</a\n          >\n        </span>\n        <ha-push-notifications-toggle\n          hass=\"[[hass]]\"\n          disabled=\"[[_error]]\"\n        ></ha-push-notifications-toggle>\n      </ha-settings-row>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      narrow: Boolean,\n      _descrLocalizeKey: {\n        type: String,\n        computed: \"_descriptionKey(_platformLoaded, _pushSupported)\",\n      },\n      _platformLoaded: {\n        type: Boolean,\n        computed: \"_compPlatformLoaded(hass)\",\n      },\n      _pushSupported: {\n        type: Boolean,\n        value: pushSupported,\n      },\n      _error: {\n        type: Boolean,\n        computed: \"_compError(_platformLoaded, _pushSupported)\",\n      },\n    };\n  }\n\n  _computeDocumentationUrl(hass) {\n    return documentationUrl(hass, \"/integrations/html5\");\n  }\n\n  _compPlatformLoaded(hass) {\n    return isComponentLoaded(hass, \"notify.html5\");\n  }\n\n  _compError(platformLoaded, pushSupported_) {\n    return !platformLoaded || !pushSupported_;\n  }\n\n  _descriptionKey(platformLoaded, pushSupported_) {\n    let key;\n    if (!pushSupported_) {\n      key = \"error_use_https\";\n    } else if (!platformLoaded) {\n      key = \"error_load_platform\";\n    } else {\n      key = \"description\";\n    }\n    return `ui.panel.profile.push_notifications.${key}`;\n  }\n}\n\ncustomElements.define(\"ha-push-notifications-row\", HaPushNotificationsRow);\n","import { mdiDelete } from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { relativeTime } from \"../../common/datetime/relative_time\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-card\";\nimport \"../../components/ha-settings-row\";\nimport \"../../components/ha-icon-button\";\nimport { RefreshToken } from \"../../data/refresh_token\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../resources/styles\";\nimport { HomeAssistant } from \"../../types\";\n\nconst compareTokenLastUsedAt = (tokenA: RefreshToken, tokenB: RefreshToken) => {\n  const timeA = tokenA.last_used_at ? new Date(tokenA.last_used_at) : 0;\n  const timeB = tokenB.last_used_at ? new Date(tokenB.last_used_at) : 0;\n  if (timeA < timeB) {\n    return 1;\n  }\n  if (timeA > timeB) {\n    return -1;\n  }\n  return 0;\n};\n\n@customElement(\"ha-refresh-tokens-card\")\nclass HaRefreshTokens extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public refreshTokens?: RefreshToken[];\n\n  private _refreshTokens = memoizeOne(\n    (refreshTokens: RefreshToken[]): RefreshToken[] =>\n      refreshTokens\n        ?.filter((token) => token.type === \"normal\")\n        .sort(compareTokenLastUsedAt)\n  );\n\n  protected render(): TemplateResult {\n    const refreshTokens = this._refreshTokens(this.refreshTokens!);\n    return html`<ha-card\n      .header=${this.hass.localize(\"ui.panel.profile.refresh_tokens.header\")}\n    >\n      <div class=\"card-content\">\n        ${this.hass.localize(\"ui.panel.profile.refresh_tokens.description\")}\n        ${refreshTokens?.length\n          ? refreshTokens!.map(\n              (token) => html`<ha-settings-row three-line>\n                <span slot=\"heading\"\n                  >${this.hass.localize(\n                    \"ui.panel.profile.refresh_tokens.token_title\",\n                    { clientId: token.client_id }\n                  )}\n                </span>\n                <div slot=\"description\">\n                  ${this.hass.localize(\n                    \"ui.panel.profile.refresh_tokens.created_at\",\n                    {\n                      date: relativeTime(\n                        new Date(token.created_at),\n                        this.hass.locale\n                      ),\n                    }\n                  )}\n                </div>\n                <div slot=\"description\">\n                  ${token.last_used_at\n                    ? this.hass.localize(\n                        \"ui.panel.profile.refresh_tokens.last_used\",\n                        {\n                          date: relativeTime(\n                            new Date(token.last_used_at),\n                            this.hass.locale\n                          ),\n                          location: token.last_used_ip,\n                        }\n                      )\n                    : this.hass.localize(\n                        \"ui.panel.profile.refresh_tokens.not_used\"\n                      )}\n                </div>\n                <div>\n                  ${token.is_current\n                    ? html`<paper-tooltip animation-delay=\"0\" position=\"left\">\n                        ${this.hass.localize(\n                          \"ui.panel.profile.refresh_tokens.current_token_tooltip\"\n                        )}\n                      </paper-tooltip>`\n                    : \"\"}\n                  <ha-icon-button\n                    .token=${token}\n                    .disabled=${token.is_current}\n                    .label=${this.hass.localize(\"ui.common.delete\")}\n                    .path=${mdiDelete}\n                    @click=${this._deleteToken}\n                  ></ha-icon-button>\n                </div>\n              </ha-settings-row>`\n            )\n          : \"\"}\n      </div>\n    </ha-card>`;\n  }\n\n  private async _deleteToken(ev: Event): Promise<void> {\n    const token = (ev.currentTarget as any).token;\n    if (\n      !(await showConfirmationDialog(this, {\n        text: this.hass.localize(\n          \"ui.panel.profile.refresh_tokens.confirm_delete\",\n          { name: token.client_name || token.client_id }\n        ),\n      }))\n    ) {\n      return;\n    }\n    try {\n      await this.hass.callWS({\n        type: \"auth/delete_refresh_token\",\n        refresh_token_id: token.id,\n      });\n      fireEvent(this, \"hass-refresh-tokens\");\n    } catch (err: any) {\n      await showAlertDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.profile.refresh_tokens.delete_failed\"\n        ),\n        text: err.message,\n      });\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-settings-row {\n          padding: 0;\n        }\n        ha-icon-button {\n          color: var(--primary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-refresh-tokens-card\": HaRefreshTokens;\n  }\n}\n","import { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent, HASSDomEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-settings-row\";\nimport \"../../components/ha-switch\";\nimport type { HaSwitch } from \"../../components/ha-switch\";\nimport type { HomeAssistant } from \"../../types\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"hass-suspend-when-hidden\": { suspend: HomeAssistant[\"suspendWhenHidden\"] };\n  }\n  // for add event listener\n  interface HTMLElementEventMap {\n    \"hass-suspend-when-hidden\": HASSDomEvent<{\n      suspend: HomeAssistant[\"suspendWhenHidden\"];\n    }>;\n  }\n}\n\n@customElement(\"ha-set-suspend-row\")\nclass HaSetSuspendRow extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public narrow!: boolean;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-settings-row .narrow=${this.narrow}>\n        <span slot=\"heading\">\n          ${this.hass.localize(\"ui.panel.profile.suspend.header\")}\n        </span>\n        <span slot=\"description\">\n          ${this.hass.localize(\"ui.panel.profile.suspend.description\")}\n        </span>\n        <ha-switch\n          .checked=${this.hass.suspendWhenHidden}\n          @change=${this._checkedChanged}\n        ></ha-switch>\n      </ha-settings-row>\n    `;\n  }\n\n  private async _checkedChanged(ev: Event) {\n    const suspend = (ev.target as HaSwitch).checked;\n    if (suspend === this.hass.suspendWhenHidden) {\n      return;\n    }\n    fireEvent(this, \"hass-suspend-when-hidden\", {\n      suspend,\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-set-suspend-row\": HaSetSuspendRow;\n  }\n}\n","import { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-settings-row\";\nimport \"../../components/ha-switch\";\nimport type { HaSwitch } from \"../../components/ha-switch\";\nimport { forwardHaptic } from \"../../data/haptics\";\nimport type { HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-set-vibrate-row\")\nclass HaSetVibrateRow extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public narrow!: boolean;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-settings-row .narrow=${this.narrow}>\n        <span slot=\"heading\">\n          ${this.hass.localize(\"ui.panel.profile.vibrate.header\")}\n        </span>\n        <span slot=\"description\">\n          ${this.hass.localize(\"ui.panel.profile.vibrate.description\")}\n        </span>\n        <ha-switch\n          .checked=${this.hass.vibrate}\n          @change=${this._checkedChanged}\n        ></ha-switch>\n      </ha-settings-row>\n    `;\n  }\n\n  private async _checkedChanged(ev: Event) {\n    const vibrate = (ev.target as HaSwitch).checked;\n    if (vibrate === this.hass.vibrate) {\n      return;\n    }\n    fireEvent(this, \"hass-vibrate\", {\n      vibrate,\n    });\n    forwardHaptic(\"light\");\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-set-vibrate-row\": HaSetVibrateRow;\n  }\n}\n"],"names":[],"sourceRoot":""}