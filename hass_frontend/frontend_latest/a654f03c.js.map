{"version":3,"file":"a654f03c.js","mappings":";;AA4CA;;;AAMA;;AAEA;;;;;AAKA;;;;;AAKA;AAEA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAvCA;;;;ACZA;AACA;;;;;;;AAZA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;ACEA;;ACoBA;;AAGA;AACA;AACA;;AAEA;AAGA;;AAEA;;;AAGA;;AAGA;AACA;;;;AAIA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA7CA;;ACiCA;AACA;;;;AAIA;;;;AAIA;;;;;AAOA;;;;AAMA;;AAEA;;;;;;;AAqBA;;;AAKA;;;;;;;;;;;AAqBA;;;AAKA;AACA;;;;;;AAQA;;AAEA;;;;AAMA;;;AAKA;;;;;;AAQA;;;;;;AAQA;AACA;AACA;;;;AAIA;AACA;AACA;;;;AAIA;AACA;AACA;;;;AAIA;AACA;AACA;;;;AAIA;AACA;AACA;;;;;AA5JA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACEA;;;;AAMA;AACA;;;;AAIA;;;;;;;;AAQA;;;;;;;;;AAWA;;;;AAMA;;;AAIA;;;;AAMA;AACA;;;;;AAKA;;AAIA;;;;AAKA;AACA;;AAEA;;;;;AAOA;;;;;AAvFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACmBA;;;;;AAOA;AACA;;;;;AAKA;;AAEA;;AAGA;;AAIA;;;;;;;;;AAWA;;;;;;;;;AAWA;;;;;AAOA;AAEA;;;AAIA;;;;AAMA;AACA;;;;;AAKA;;;;AAMA;;AAIA;;AAIA;;AAIA;AAGA;AACA;;;AAGA;;;;AAKA;AACA;AACA;;;AAGA;;;;AAMA;;;;;AA7HA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACqCA;;;;AAMA;AACA;;;;AAIA;;AAGA;;AAIA;AAEA;AACA;;AAQA;;;;;AAKA;;;;;;;;;;AAUA;;;;AAMA;AACA;;;;AApEA;;AAEA;;;AAKA;;;AAvBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACyBA;;;AAGA;;;;AAQA;AAGA;;;;AAIA;;AAEA;;AAEA;;;;AAOA;;;AAGA;;AAEA;;AAEA;;;;;AAQA;AACA;;;;AAjEA;;;;;;;;;;;;;AAAA;;ACoBA;;;AAKA;AACA;;AAcA;;AAIA;;AAIA;;AAIA;;;AAKA;AAGA;;AAEA;AACA;;AAIA;AACA;;;;AAKA;AAGA;AACA;;AAIA;;;AAvDA;;AAMA;;;;;;;;;AA6DA;;;;;AAhGA;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AC0BA;AACA;;;;AAIA;;;;AAIA;;;AAKA;;;;;;;AASA;;;AAKA;;;;;;;;AAUA;;;;;AAOA;;AAGA;;AAEA;AACA;;;AAIA;;;AAKA;;AAIA;;;;AAMA;AACA;AACA;AACA;;;;AAMA;AAGA;;;;AAIA;AACA;AACA;;;;AAMA;AACA;;AAEA;;;;;AAOA;AACA;AACA;;;;;;AAQA;;AAEA;;AAIA;;;;;;;;;AAhJA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/components/ha-alert.ts","webpack://home-assistant-frontend/./src/components/ha-settings-row.ts","webpack://home-assistant-frontend/./src/components/ha-switch.ts","webpack://home-assistant-frontend/./src/layouts/hass-subpage.ts","webpack://home-assistant-frontend/./src/panels/config/cloud/account/cloud-account.ts","webpack://home-assistant-frontend/./src/panels/config/cloud/account/cloud-alexa-pref.ts","webpack://home-assistant-frontend/./src/panels/config/cloud/account/cloud-google-pref.ts","webpack://home-assistant-frontend/./src/panels/config/cloud/account/cloud-remote-pref.ts","webpack://home-assistant-frontend/./src/panels/config/cloud/account/cloud-tts-pref.ts","webpack://home-assistant-frontend/./src/panels/config/cloud/account/cloud-webhooks.ts","webpack://home-assistant-frontend/./src/panels/config/cloud/login/cloud-login.ts"],"sourcesContent":["import {\n  mdiAlertCircleOutline,\n  mdiAlertOutline,\n  mdiCheckboxMarkedCircleOutline,\n  mdiClose,\n  mdiInformationOutline,\n} from \"@mdi/js\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-icon-button\";\nimport \"./ha-svg-icon\";\n\nconst ALERT_ICONS = {\n  info: mdiInformationOutline,\n  warning: mdiAlertOutline,\n  error: mdiAlertCircleOutline,\n  success: mdiCheckboxMarkedCircleOutline,\n};\n\ndeclare global {\n  interface HASSDomEvents {\n    \"alert-dismissed-clicked\": undefined;\n  }\n}\n\n@customElement(\"ha-alert\")\nclass HaAlert extends LitElement {\n  @property() public title = \"\";\n\n  @property({ attribute: \"alert-type\" }) public alertType:\n    | \"info\"\n    | \"warning\"\n    | \"error\"\n    | \"success\" = \"info\";\n\n  @property({ type: Boolean }) public dismissable = false;\n\n  @property({ type: Boolean }) public rtl = false;\n\n  public render() {\n    return html`\n      <div\n        class=\"issue-type ${classMap({\n          rtl: this.rtl,\n          [this.alertType]: true,\n        })}\"\n        role=\"alert\"\n      >\n        <div class=\"icon ${this.title ? \"\" : \"no-title\"}\">\n          <slot name=\"icon\">\n            <ha-svg-icon .path=${ALERT_ICONS[this.alertType]}></ha-svg-icon>\n          </slot>\n        </div>\n        <div class=\"content\">\n          <div class=\"main-content\">\n            ${this.title ? html`<div class=\"title\">${this.title}</div>` : \"\"}\n            <slot></slot>\n          </div>\n          <div class=\"action\">\n            <slot name=\"action\">\n              ${this.dismissable\n                ? html`<ha-icon-button\n                    @click=${this._dismiss_clicked}\n                    label=\"Dismiss alert\"\n                    .path=${mdiClose}\n                  ></ha-icon-button>`\n                : \"\"}\n            </slot>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private _dismiss_clicked() {\n    fireEvent(this, \"alert-dismissed-clicked\");\n  }\n\n  static styles = css`\n    .issue-type {\n      position: relative;\n      padding: 8px;\n      display: flex;\n      margin: 4px 0;\n    }\n    .issue-type.rtl {\n      flex-direction: row-reverse;\n    }\n    .issue-type::after {\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      opacity: 0.12;\n      pointer-events: none;\n      content: \"\";\n      border-radius: 4px;\n    }\n    .icon {\n      z-index: 1;\n    }\n    .icon.no-title {\n      align-self: center;\n    }\n    .issue-type.rtl > .content {\n      flex-direction: row-reverse;\n      text-align: right;\n    }\n    .content {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n    }\n    .action {\n      z-index: 1;\n      width: min-content;\n      --mdc-theme-primary: var(--primary-text-color);\n    }\n    .main-content {\n      overflow-wrap: anywhere;\n      word-break: break-word;\n      margin-left: 8px;\n      margin-right: 0;\n    }\n    .issue-type.rtl > .content > .main-content {\n      margin-left: 0;\n      margin-right: 8px;\n    }\n    .title {\n      margin-top: 2px;\n      font-weight: bold;\n    }\n    .action mwc-button,\n    .action ha-icon-button {\n      --mdc-theme-primary: var(--primary-text-color);\n      --mdc-icon-button-size: 36px;\n    }\n    .issue-type.info > .icon {\n      color: var(--info-color);\n    }\n    .issue-type.info::after {\n      background-color: var(--info-color);\n    }\n\n    .issue-type.warning > .icon {\n      color: var(--warning-color);\n    }\n    .issue-type.warning::after {\n      background-color: var(--warning-color);\n    }\n\n    .issue-type.error > .icon {\n      color: var(--error-color);\n    }\n    .issue-type.error::after {\n      background-color: var(--error-color);\n    }\n\n    .issue-type.success > .icon {\n      color: var(--success-color);\n    }\n    .issue-type.success::after {\n      background-color: var(--success-color);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-alert\": HaAlert;\n  }\n}\n","import \"@polymer/paper-item/paper-item-body\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-settings-row\")\nexport class HaSettingsRow extends LitElement {\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @property({ type: Boolean, attribute: \"three-line\" })\n  public threeLine = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"prefix-wrap\">\n        <slot name=\"prefix\"></slot>\n        <paper-item-body\n          ?two-line=${!this.threeLine}\n          ?three-line=${this.threeLine}\n        >\n          <slot name=\"heading\"></slot>\n          <div secondary><slot name=\"description\"></slot></div>\n        </paper-item-body>\n      </div>\n      <slot></slot>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n        padding: 0 16px;\n        align-content: normal;\n        align-self: auto;\n        align-items: center;\n      }\n      paper-item-body {\n        padding: 8px 16px 8px 0;\n      }\n      paper-item-body[two-line] {\n        min-height: calc(\n          var(--paper-item-body-two-line-min-height, 72px) - 16px\n        );\n        flex: 1;\n      }\n      :host([narrow]) {\n        align-items: normal;\n        flex-direction: column;\n        border-top: 1px solid var(--divider-color);\n        padding-bottom: 8px;\n      }\n      ::slotted(ha-switch) {\n        padding: 16px 0;\n      }\n      div[secondary] {\n        white-space: normal;\n      }\n      .prefix-wrap {\n        display: contents;\n      }\n      :host([narrow]) .prefix-wrap {\n        display: flex;\n        align-items: center;\n      }\n    `;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-settings-row\": HaSettingsRow;\n  }\n}\n","import { Switch } from \"@material/mwc-switch/deprecated\";\nimport { css, CSSResultGroup } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { forwardHaptic } from \"../data/haptics\";\n\n@customElement(\"ha-switch\")\n// @ts-expect-error\nexport class HaSwitch extends Switch {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.style.setProperty(\n      \"--mdc-theme-secondary\",\n      \"var(--switch-checked-color)\"\n    );\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      Switch.styles,\n      css`\n        .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n          background-color: var(--switch-checked-button-color);\n          border-color: var(--switch-checked-button-color);\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__track {\n          background-color: var(--switch-checked-track-color);\n          border-color: var(--switch-checked-track-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n          background-color: var(--switch-unchecked-button-color);\n          border-color: var(--switch-unchecked-button-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n          background-color: var(--switch-unchecked-track-color);\n          border-color: var(--switch-unchecked-track-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, eventOptions, property } from \"lit/decorators\";\nimport { restoreScroll } from \"../common/decorators/restore-scroll\";\nimport \"../components/ha-icon-button-arrow-prev\";\nimport \"../components/ha-menu-button\";\nimport { HomeAssistant } from \"../types\";\n\n@customElement(\"hass-subpage\")\nclass HassSubpage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public header?: string;\n\n  @property({ type: Boolean, attribute: \"main-page\" }) public mainPage = false;\n\n  @property({ type: String, attribute: \"back-path\" }) public backPath?: string;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean }) public supervisor = false;\n\n  // @ts-ignore\n  @restoreScroll(\".content\") private _savedScrollPos?: number;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"toolbar\">\n        ${this.mainPage || history.state?.root\n          ? html`\n              <ha-menu-button\n                .hassio=${this.supervisor}\n                .hass=${this.hass}\n                .narrow=${this.narrow}\n              ></ha-menu-button>\n            `\n          : this.backPath\n          ? html`\n              <a href=${this.backPath}>\n                <ha-icon-button-arrow-prev\n                  .hass=${this.hass}\n                ></ha-icon-button-arrow-prev>\n              </a>\n            `\n          : html`\n              <ha-icon-button-arrow-prev\n                .hass=${this.hass}\n                @click=${this._backTapped}\n              ></ha-icon-button-arrow-prev>\n            `}\n\n        <div class=\"main-title\">${this.header}</div>\n        <slot name=\"toolbar-icon\"></slot>\n      </div>\n      <div class=\"content\" @scroll=${this._saveScrollPos}><slot></slot></div>\n    `;\n  }\n\n  @eventOptions({ passive: true })\n  private _saveScrollPos(e: Event) {\n    this._savedScrollPos = (e.target as HTMLDivElement).scrollTop;\n  }\n\n  private _backTapped(): void {\n    history.back();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        height: 100%;\n        background-color: var(--primary-background-color);\n      }\n\n      :host([narrow]) {\n        width: 100%;\n        position: fixed;\n      }\n\n      .toolbar {\n        display: flex;\n        align-items: center;\n        font-size: 20px;\n        height: var(--header-height);\n        padding: 0 16px;\n        pointer-events: none;\n        background-color: var(--app-header-background-color);\n        font-weight: 400;\n        color: var(--app-header-text-color, white);\n        border-bottom: var(--app-header-border-bottom, none);\n        box-sizing: border-box;\n      }\n      .toolbar a {\n        color: var(--sidebar-text-color);\n        text-decoration: none;\n      }\n\n      ha-menu-button,\n      ha-icon-button-arrow-prev,\n      ::slotted([slot=\"toolbar-icon\"]) {\n        pointer-events: auto;\n      }\n\n      .main-title {\n        margin: 0 0 0 24px;\n        line-height: 20px;\n        flex-grow: 1;\n      }\n\n      .content {\n        position: relative;\n        width: 100%;\n        height: calc(100% - 1px - var(--header-height));\n        overflow-y: auto;\n        overflow: auto;\n        -webkit-overflow-scrolling: touch;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-subpage\": HassSubpage;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport { LitElement, css, html, PropertyValues } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { formatDateTime } from \"../../../../common/datetime/format_date_time\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { computeRTLDirection } from \"../../../../common/util/compute_rtl\";\nimport \"../../../../components/buttons/ha-call-api-button\";\nimport \"../../../../components/ha-card\";\nimport {\n  cloudLogout,\n  CloudStatusLoggedIn,\n  fetchCloudSubscriptionInfo,\n  SubscriptionInfo,\n} from \"../../../../data/cloud\";\nimport \"../../../../layouts/hass-subpage\";\nimport { HomeAssistant } from \"../../../../types\";\nimport \"../../ha-config-section\";\nimport \"./cloud-alexa-pref\";\nimport \"./cloud-google-pref\";\nimport \"./cloud-remote-pref\";\nimport \"./cloud-tts-pref\";\nimport \"./cloud-webhooks\";\n\n@customElement(\"cloud-account\")\nexport class CloudAccount extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public isWide = false;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ attribute: false }) public cloudStatus!: CloudStatusLoggedIn;\n\n  @state() private _subscription?: SubscriptionInfo;\n\n  @state() private _rtlDirection: \"rtl\" | \"ltr\" = \"rtl\";\n\n  protected render() {\n    return html`\n      <hass-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        header=\"Home Assistant Cloud\"\n      >\n        <div class=\"content\">\n          <ha-config-section .isWide=${this.isWide}>\n            <span slot=\"header\">Home Assistant Cloud</span>\n            <div slot=\"introduction\">\n              <p>\n                ${this.hass.localize(\n                  \"ui.panel.config.cloud.account.thank_you_note\"\n                )}\n              </p>\n            </div>\n\n            <ha-card\n              .header=${this.hass.localize(\n                \"ui.panel.config.cloud.account.nabu_casa_account\"\n              )}\n            >\n              <div class=\"account-row\">\n                <paper-item-body two-line>\n                  ${this.cloudStatus.email}\n                  <div secondary class=\"wrap\">\n                    ${this._subscription\n                      ? this._subscription.human_description.replace(\n                          \"{periodEnd}\",\n                          this._subscription.plan_renewal_date\n                            ? formatDateTime(\n                                new Date(\n                                  this._subscription.plan_renewal_date * 1000\n                                ),\n                                this.hass.locale\n                              )\n                            : \"\"\n                        )\n                      : this.hass.localize(\n                          \"ui.panel.config.cloud.account.fetching_subscription\"\n                        )}\n                  </div>\n                </paper-item-body>\n              </div>\n\n              <div class=\"account-row\">\n                <paper-item-body>\n                  ${this.hass.localize(\n                    \"ui.panel.config.cloud.account.connection_status\"\n                  )}\n                </paper-item-body>\n                <div class=\"status\">\n                  ${this.cloudStatus.cloud === \"connected\"\n                    ? this.hass.localize(\n                        \"ui.panel.config.cloud.account.connected\"\n                      )\n                    : this.cloudStatus.cloud === \"disconnected\"\n                    ? this.hass.localize(\n                        \"ui.panel.config.cloud.account.not_connected\"\n                      )\n                    : this.hass.localize(\n                        \"ui.panel.config.cloud.account.connecting\"\n                      )}\n                </div>\n              </div>\n\n              <div class=\"card-actions\">\n                <a\n                  href=\"https://account.nabucasa.com\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  <mwc-button>\n                    ${this.hass.localize(\n                      \"ui.panel.config.cloud.account.manage_account\"\n                    )}\n                  </mwc-button>\n                </a>\n                <mwc-button @click=${this._handleLogout}\n                  >${this.hass.localize(\n                    \"ui.panel.config.cloud.account.sign_out\"\n                  )}</mwc-button\n                >\n              </div>\n            </ha-card>\n          </ha-config-section>\n\n          <ha-config-section .isWide=${this.isWide}>\n            <span slot=\"header\"\n              >${this.hass.localize(\n                \"ui.panel.config.cloud.account.integrations\"\n              )}</span\n            >\n            <div slot=\"introduction\">\n              <p>\n                ${this.hass.localize(\n                  \"ui.panel.config.cloud.account.integrations_introduction\"\n                )}\n              </p>\n              <p>\n                ${this.hass.localize(\n                  \"ui.panel.config.cloud.account.integrations_introduction2\"\n                )}\n                <a\n                  href=\"https://www.nabucasa.com\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  ${this.hass.localize(\n                    \"ui.panel.config.cloud.account.integrations_link_all_features\"\n                  )}</a\n                >.\n              </p>\n            </div>\n\n            <cloud-remote-pref\n              .hass=${this.hass}\n              .cloudStatus=${this.cloudStatus}\n              dir=${this._rtlDirection}\n            ></cloud-remote-pref>\n\n            <cloud-tts-pref\n              .hass=${this.hass}\n              .cloudStatus=${this.cloudStatus}\n              dir=${this._rtlDirection}\n            ></cloud-tts-pref>\n\n            <cloud-alexa-pref\n              .hass=${this.hass}\n              .cloudStatus=${this.cloudStatus}\n              dir=${this._rtlDirection}\n            ></cloud-alexa-pref>\n\n            <cloud-google-pref\n              .hass=${this.hass}\n              .cloudStatus=${this.cloudStatus}\n              dir=${this._rtlDirection}\n            ></cloud-google-pref>\n\n            <cloud-webhooks\n              .hass=${this.hass}\n              .cloudStatus=${this.cloudStatus}\n              dir=${this._rtlDirection}\n            ></cloud-webhooks>\n          </ha-config-section>\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  firstUpdated() {\n    this._fetchSubscriptionInfo();\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (changedProps.has(\"hass\")) {\n      const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n      if (!oldHass || oldHass.locale !== this.hass.locale) {\n        this._rtlDirection = computeRTLDirection(this.hass);\n      }\n    }\n  }\n\n  private async _fetchSubscriptionInfo() {\n    this._subscription = await fetchCloudSubscriptionInfo(this.hass);\n    if (\n      this._subscription.provider &&\n      this.cloudStatus &&\n      this.cloudStatus.cloud !== \"connected\"\n    ) {\n      fireEvent(this, \"ha-refresh-cloud-status\");\n    }\n  }\n\n  private async _handleLogout() {\n    await cloudLogout(this.hass);\n    fireEvent(this, \"ha-refresh-cloud-status\");\n  }\n\n  _computeRTLDirection(hass) {\n    return computeRTLDirection(hass);\n  }\n\n  static get styles() {\n    return css`\n      [slot=\"introduction\"] {\n        margin: -1em 0;\n      }\n      [slot=\"introduction\"] a {\n        color: var(--primary-color);\n      }\n      .content {\n        padding-bottom: 24px;\n      }\n      .account-row {\n        display: flex;\n        padding: 0 16px;\n      }\n      .card-actions {\n        display: flex;\n        justify-content: space-between;\n      }\n      .card-actions a {\n        text-decoration: none;\n      }\n      mwc-button {\n        align-self: center;\n      }\n      .wrap {\n        white-space: normal;\n      }\n      .status {\n        text-transform: capitalize;\n        padding: 16px;\n      }\n      a {\n        color: var(--primary-color);\n      }\n    `;\n  }\n}\n\ncustomElements.define(\"cloud-account\", CloudAccount);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"cloud-account\": CloudAccount;\n  }\n}\n","import \"@material/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-switch\";\nimport type { HaSwitch } from \"../../../../components/ha-switch\";\nimport { syncCloudAlexaEntities } from \"../../../../data/alexa\";\nimport { CloudStatusLoggedIn, updateCloudPref } from \"../../../../data/cloud\";\nimport type { HomeAssistant } from \"../../../../types\";\n\nexport class CloudAlexaPref extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public cloudStatus?: CloudStatusLoggedIn;\n\n  @state() private _syncing = false;\n\n  protected render(): TemplateResult {\n    if (!this.cloudStatus) {\n      return html``;\n    }\n\n    const { alexa_enabled, alexa_report_state } = this.cloudStatus!.prefs;\n\n    return html`\n      <ha-card\n        header=${this.hass!.localize(\n          \"ui.panel.config.cloud.account.alexa.title\"\n        )}\n      >\n        <div class=\"switch\">\n          <ha-switch\n            .checked=${alexa_enabled}\n            @change=${this._enabledToggleChanged}\n          ></ha-switch>\n        </div>\n        <div class=\"card-content\">\n          ${this.hass!.localize(\"ui.panel.config.cloud.account.alexa.info\")}\n          <ul>\n            <li>\n              <a\n                href=\"https://skills-store.amazon.com/deeplink/dp/B0772J1QKB?deviceType=app\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                ${this.hass!.localize(\n                  \"ui.panel.config.cloud.account.alexa.enable_ha_skill\"\n                )}\n              </a>\n            </li>\n            <li>\n              <a\n                href=\"https://www.nabucasa.com/config/amazon_alexa/\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                ${this.hass!.localize(\n                  \"ui.panel.config.cloud.account.alexa.config_documentation\"\n                )}\n              </a>\n            </li>\n          </ul>\n          ${alexa_enabled\n            ? html`\n                <div class=\"state-reporting\">\n                  <h3>\n                    ${this.hass!.localize(\n                      \"ui.panel.config.cloud.account.alexa.enable_state_reporting\"\n                    )}\n                  </h3>\n                  <div class=\"state-reporting-switch\">\n                    <ha-switch\n                      .checked=${alexa_report_state}\n                      @change=${this._reportToggleChanged}\n                    ></ha-switch>\n                  </div>\n                </div>\n                <p>\n                  ${this.hass!.localize(\n                    \"ui.panel.config.cloud.account.alexa.info_state_reporting\"\n                  )}\n                </p>\n              `\n            : \"\"}\n        </div>\n        <div class=\"card-actions\">\n          <mwc-button\n            @click=${this._handleSync}\n            .disabled=${!alexa_enabled || this._syncing}\n          >\n            ${this.hass!.localize(\n              \"ui.panel.config.cloud.account.alexa.sync_entities\"\n            )}\n          </mwc-button>\n          <div class=\"spacer\"></div>\n          <a href=\"/config/cloud/alexa\">\n            <mwc-button\n              >${this.hass!.localize(\n                \"ui.panel.config.cloud.account.alexa.manage_entities\"\n              )}</mwc-button\n            >\n          </a>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private async _handleSync() {\n    this._syncing = true;\n    try {\n      await syncCloudAlexaEntities(this.hass!);\n    } catch (err: any) {\n      alert(\n        `${this.hass!.localize(\n          \"ui.panel.config.cloud.account.alexa.sync_entities_error\"\n        )} ${err.body.message}`\n      );\n    } finally {\n      this._syncing = false;\n    }\n  }\n\n  private async _enabledToggleChanged(ev) {\n    const toggle = ev.target as HaSwitch;\n    try {\n      await updateCloudPref(this.hass!, { alexa_enabled: toggle.checked! });\n      fireEvent(this, \"ha-refresh-cloud-status\");\n    } catch (err: any) {\n      toggle.checked = !toggle.checked;\n    }\n  }\n\n  private async _reportToggleChanged(ev) {\n    const toggle = ev.target as HaSwitch;\n    try {\n      await updateCloudPref(this.hass!, {\n        alexa_report_state: toggle.checked!,\n      });\n      fireEvent(this, \"ha-refresh-cloud-status\");\n    } catch (err: any) {\n      alert(\n        `${this.hass!.localize(\n          \"ui.panel.config.cloud.account.alexa.state_reporting_error\",\n          \"enable_disable\",\n          this.hass!.localize(\n            toggle.checked\n              ? \"ui.panel.config.cloud.account.alexa.enable\"\n              : \"ui.panel.config.cloud.account.alexa.disable\"\n          )\n        )} ${err.message}`\n      );\n      toggle.checked = !toggle.checked;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      a {\n        color: var(--primary-color);\n      }\n      .switch {\n        position: absolute;\n        right: 24px;\n        top: 24px;\n      }\n      :host([dir=\"rtl\"]) .switch {\n        right: auto;\n        left: 24px;\n      }\n      .card-actions {\n        display: flex;\n      }\n      .card-actions a {\n        text-decoration: none;\n      }\n      .spacer {\n        flex-grow: 1;\n      }\n      .state-reporting {\n        display: flex;\n        margin-top: 1.5em;\n      }\n      .state-reporting + p {\n        margin-top: 0.5em;\n      }\n      .state-reporting h3 {\n        flex-grow: 1;\n        margin: 0;\n      }\n      .state-reporting-switch {\n        margin-top: 0.25em;\n        margin-right: 7px;\n        margin-left: 0.5em;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"cloud-alexa-pref\": CloudAlexaPref;\n  }\n}\n\ncustomElements.define(\"cloud-alexa-pref\", CloudAlexaPref);\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport type { PaperInputElement } from \"@polymer/paper-input/paper-input\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/buttons/ha-call-api-button\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-alert\";\nimport type { HaSwitch } from \"../../../../components/ha-switch\";\nimport { CloudStatusLoggedIn, updateCloudPref } from \"../../../../data/cloud\";\nimport { showAlertDialog } from \"../../../../dialogs/generic/show-dialog-box\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport { showSaveSuccessToast } from \"../../../../util/toast-saved-success\";\n\nexport class CloudGooglePref extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public cloudStatus?: CloudStatusLoggedIn;\n\n  protected render(): TemplateResult {\n    if (!this.cloudStatus) {\n      return html``;\n    }\n\n    const { google_enabled, google_report_state, google_secure_devices_pin } =\n      this.cloudStatus.prefs;\n\n    return html`\n      <ha-card\n        header=${this.hass.localize(\n          \"ui.panel.config.cloud.account.google.title\"\n        )}\n      >\n        <div class=\"switch\">\n          <ha-switch\n            id=\"google_enabled\"\n            .checked=${google_enabled}\n            @change=${this._enableToggleChanged}\n          ></ha-switch>\n        </div>\n        <div class=\"card-content\">\n          <p>\n            ${this.hass.localize(\"ui.panel.config.cloud.account.google.info\")}\n          </p>\n          ${google_enabled && !this.cloudStatus.google_registered\n            ? html`\n                <ha-alert\n                  .title=${this.hass.localize(\n                    \"ui.panel.config.cloud.account.google.not_configured_title\"\n                  )}\n                >\n                  ${this.hass.localize(\n                    \"ui.panel.config.cloud.account.google.not_configured_text\"\n                  )}\n\n                  <ul>\n                    <li>\n                      <a\n                        href=\"https://assistant.google.com/services/a/uid/00000091fd5fb875?hl=en-US\"\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                      >\n                        ${this.hass.localize(\n                          \"ui.panel.config.cloud.account.google.enable_ha_skill\"\n                        )}\n                      </a>\n                    </li>\n                    <li>\n                      <a\n                        href=\"https://www.nabucasa.com/config/google_assistant/\"\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                      >\n                        ${this.hass.localize(\n                          \"ui.panel.config.cloud.account.google.config_documentation\"\n                        )}\n                      </a>\n                    </li>\n                  </ul>\n                </ha-alert>\n              `\n            : \"\"}\n          ${google_enabled\n            ? html`\n                <div class=\"state-reporting\">\n                  <h3>\n                    ${this.hass.localize(\n                      \"ui.panel.config.cloud.account.google.enable_state_reporting\"\n                    )}\n                  </h3>\n                  <div class=\"state-reporting-switch\">\n                    <ha-switch\n                      .checked=${google_report_state}\n                      @change=${this._reportToggleChanged}\n                    ></ha-switch>\n                  </div>\n                </div>\n                <p>\n                  ${this.hass.localize(\n                    \"ui.panel.config.cloud.account.google.info_state_reporting\"\n                  )}\n                </p>\n                <div class=\"secure_devices\">\n                  <h3>\n                    ${this.hass.localize(\n                      \"ui.panel.config.cloud.account.google.security_devices\"\n                    )}\n                  </h3>\n                  ${this.hass.localize(\n                    \"ui.panel.config.cloud.account.google.enter_pin_info\"\n                  )}\n                  <paper-input\n                    label=${this.hass.localize(\n                      \"ui.panel.config.cloud.account.google.devices_pin\"\n                    )}\n                    id=\"google_secure_devices_pin\"\n                    placeholder=${this.hass.localize(\n                      \"ui.panel.config.cloud.account.google.enter_pin_hint\"\n                    )}\n                    .value=${google_secure_devices_pin || \"\"}\n                    @change=${this._pinChanged}\n                  ></paper-input>\n                </div>\n              `\n            : \"\"}\n        </div>\n        <div class=\"card-actions\">\n          <ha-call-api-button\n            .hass=${this.hass}\n            .disabled=${!google_enabled}\n            @hass-api-called=${this._syncEntitiesCalled}\n            path=\"cloud/google_actions/sync\"\n          >\n            ${this.hass.localize(\n              \"ui.panel.config.cloud.account.google.sync_entities\"\n            )}\n          </ha-call-api-button>\n          <a href=\"/config/cloud/google-assistant\">\n            <mwc-button>\n              ${this.hass.localize(\n                \"ui.panel.config.cloud.account.google.manage_entities\"\n              )}\n            </mwc-button>\n          </a>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private async _syncEntitiesCalled(ev: CustomEvent) {\n    if (!ev.detail.success && ev.detail.response.status_code === 404) {\n      this._syncFailed();\n    }\n  }\n\n  private async _syncFailed() {\n    showAlertDialog(this, {\n      title: this.hass.localize(\n        \"ui.panel.config.cloud.account.google.not_configured_title\"\n      ),\n      text: this.hass.localize(\n        \"ui.panel.config.cloud.account.google.not_configured_text\"\n      ),\n    });\n    fireEvent(this, \"ha-refresh-cloud-status\");\n  }\n\n  private async _enableToggleChanged(ev) {\n    const toggle = ev.target as HaSwitch;\n    try {\n      await updateCloudPref(this.hass, { [toggle.id]: toggle.checked! });\n      fireEvent(this, \"ha-refresh-cloud-status\");\n    } catch (err: any) {\n      toggle.checked = !toggle.checked;\n    }\n  }\n\n  private async _reportToggleChanged(ev) {\n    const toggle = ev.target as HaSwitch;\n    try {\n      await updateCloudPref(this.hass, {\n        google_report_state: toggle.checked!,\n      });\n      fireEvent(this, \"ha-refresh-cloud-status\");\n    } catch (err: any) {\n      alert(\n        `Unable to ${toggle.checked ? \"enable\" : \"disable\"} report state. ${\n          err.message\n        }`\n      );\n      toggle.checked = !toggle.checked;\n    }\n  }\n\n  private async _pinChanged(ev) {\n    const input = ev.target as PaperInputElement;\n    try {\n      await updateCloudPref(this.hass, {\n        [input.id]: input.value || null,\n      });\n      showSaveSuccessToast(this, this.hass);\n      fireEvent(this, \"ha-refresh-cloud-status\");\n    } catch (err: any) {\n      alert(\n        `${this.hass.localize(\n          \"ui.panel.config.cloud.account.google.enter_pin_error\"\n        )} ${err.message}`\n      );\n      input.value = this.cloudStatus!.prefs.google_secure_devices_pin;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      a {\n        color: var(--primary-color);\n      }\n      .switch {\n        position: absolute;\n        right: 24px;\n        top: 24px;\n      }\n      :host([dir=\"rtl\"]) .switch {\n        right: auto;\n        left: 24px;\n      }\n      ha-call-api-button {\n        color: var(--primary-color);\n        font-weight: 500;\n      }\n      paper-input {\n        width: 250px;\n      }\n      .card-actions {\n        display: flex;\n        justify-content: space-between;\n      }\n      .card-actions a {\n        text-decoration: none;\n      }\n      .warning {\n        color: var(--error-color);\n      }\n      .secure_devices {\n        padding-top: 8px;\n      }\n      .state-reporting {\n        display: flex;\n        margin-top: 1.5em;\n      }\n      .state-reporting + p {\n        margin-top: 0.5em;\n      }\n      h3 {\n        margin: 0 0 8px 0;\n      }\n      .state-reporting h3 {\n        flex-grow: 1;\n        margin: 0;\n      }\n      .state-reporting-switch {\n        margin-top: 0.25em;\n        margin-right: 7px;\n        margin-left: 0.5em;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"cloud-google-pref\": CloudGooglePref;\n  }\n}\n\ncustomElements.define(\"cloud-google-pref\", CloudGooglePref);\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-alert\";\nimport \"../../../../components/ha-switch\";\n// eslint-disable-next-line\nimport type { HaSwitch } from \"../../../../components/ha-switch\";\nimport {\n  CloudStatusLoggedIn,\n  connectCloudRemote,\n  disconnectCloudRemote,\n} from \"../../../../data/cloud\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport { showCloudCertificateDialog } from \"../dialog-cloud-certificate/show-dialog-cloud-certificate\";\n\n@customElement(\"cloud-remote-pref\")\nexport class CloudRemotePref extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public cloudStatus?: CloudStatusLoggedIn;\n\n  protected render(): TemplateResult {\n    if (!this.cloudStatus) {\n      return html``;\n    }\n\n    const { remote_enabled } = this.cloudStatus.prefs;\n\n    const { remote_connected, remote_domain, remote_certificate } =\n      this.cloudStatus;\n\n    if (!remote_certificate) {\n      return html`\n        <ha-card\n          header=${this.hass.localize(\n            \"ui.panel.config.cloud.account.remote.title\"\n          )}\n        >\n          <div class=\"preparing\">\n            ${this.hass.localize(\n              \"ui.panel.config.cloud.account.remote.access_is_being_prepared\"\n            )}\n          </div>\n        </ha-card>\n      `;\n    }\n\n    return html`\n      <ha-card\n        header=${this.hass.localize(\n          \"ui.panel.config.cloud.account.remote.title\"\n        )}\n      >\n        <div class=\"switch\">\n          <ha-switch\n            .checked=${remote_enabled}\n            @change=${this._toggleChanged}\n          ></ha-switch>\n        </div>\n        <div class=\"card-content\">\n          ${!remote_connected && remote_enabled\n            ? html`\n                <ha-alert\n                  .title=${this.hass.localize(\n                    `ui.panel.config.cloud.account.remote.reconnecting`\n                  )}\n                ></ha-alert>\n              `\n            : \"\"}\n          ${this.hass.localize(\"ui.panel.config.cloud.account.remote.info\")}\n          ${this.hass.localize(\n            `ui.panel.config.cloud.account.remote.${\n              remote_connected\n                ? \"instance_is_available\"\n                : \"instance_will_be_available\"\n            }`\n          )}\n          <a\n            href=\"https://${remote_domain}\"\n            target=\"_blank\"\n            class=\"break-word\"\n            rel=\"noreferrer\"\n          >\n            https://${remote_domain}</a\n          >.\n        </div>\n        <div class=\"card-actions\">\n          <a\n            href=\"https://www.nabucasa.com/config/remote/\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <mwc-button\n              >${this.hass.localize(\n                \"ui.panel.config.cloud.account.remote.link_learn_how_it_works\"\n              )}</mwc-button\n            >\n          </a>\n          <div class=\"spacer\"></div>\n          <mwc-button @click=${this._openCertInfo}>\n            ${this.hass.localize(\n              \"ui.panel.config.cloud.account.remote.certificate_info\"\n            )}\n          </mwc-button>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private _openCertInfo() {\n    showCloudCertificateDialog(this, {\n      certificateInfo: this.cloudStatus!.remote_certificate!,\n    });\n  }\n\n  private async _toggleChanged(ev) {\n    const toggle = ev.target as HaSwitch;\n\n    try {\n      if (toggle.checked) {\n        await connectCloudRemote(this.hass);\n      } else {\n        await disconnectCloudRemote(this.hass);\n      }\n      fireEvent(this, \"ha-refresh-cloud-status\");\n    } catch (err: any) {\n      alert(err.message);\n      toggle.checked = !toggle.checked;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .preparing {\n        padding: 0 16px 16px;\n      }\n      a {\n        color: var(--primary-color);\n      }\n      .switch {\n        position: absolute;\n        right: 24px;\n        top: 24px;\n      }\n      :host([dir=\"rtl\"]) .switch {\n        right: auto;\n        left: 24px;\n      }\n      .warning {\n        font-weight: bold;\n        margin-bottom: 1em;\n      }\n      .warning ha-svg-icon {\n        color: var(--warning-color);\n      }\n      .break-word {\n        overflow-wrap: break-word;\n      }\n      .connection-status {\n        position: absolute;\n        right: 24px;\n        top: 24px;\n      }\n      :host([dir=\"rtl\"]) .switch {\n        right: auto;\n        left: 24px;\n      }\n      .card-actions {\n        display: flex;\n      }\n      .card-actions a {\n        text-decoration: none;\n      }\n      .spacer {\n        flex-grow: 1;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"cloud-remote-pref\": CloudRemotePref;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-dropdown-menu/paper-dropdown-menu-light\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { caseInsensitiveStringCompare } from \"../../../../common/string/compare\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-svg-icon\";\nimport \"../../../../components/ha-switch\";\nimport {\n  CloudStatusLoggedIn,\n  CloudTTSInfo,\n  getCloudTTSInfo,\n  updateCloudPref,\n} from \"../../../../data/cloud\";\nimport { showAlertDialog } from \"../../../../dialogs/generic/show-dialog-box\";\nimport { translationMetadata } from \"../../../../resources/translations-metadata\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport { showTryTtsDialog } from \"./show-dialog-cloud-tts-try\";\n\n@customElement(\"cloud-tts-pref\")\nexport class CloudTTSPref extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public cloudStatus?: CloudStatusLoggedIn;\n\n  @state() private savingPreferences = false;\n\n  @state() private ttsInfo?: CloudTTSInfo;\n\n  protected render(): TemplateResult {\n    if (!this.cloudStatus) {\n      return html``;\n    }\n\n    const languages = this.getLanguages(this.ttsInfo);\n    const defaultVoice = this.cloudStatus.prefs.tts_default_voice;\n    const genders = this.getSupportedGenders(defaultVoice[0], this.ttsInfo);\n\n    return html`\n      <ha-card\n        header=${this.hass.localize(\"ui.panel.config.cloud.account.tts.title\")}\n      >\n        <div class=\"card-content\">\n          ${this.hass.localize(\n            \"ui.panel.config.cloud.account.tts.info\",\n            \"service\",\n            '\"tts.cloud_say\"'\n          )}\n          <br /><br />\n\n          <paper-dropdown-menu-light\n            .label=${this.hass.localize(\n              \"ui.panel.config.cloud.account.tts.default_language\"\n            )}\n            .disabled=${this.savingPreferences}\n          >\n            <paper-listbox\n              slot=\"dropdown-content\"\n              .selected=${defaultVoice[0]}\n              attr-for-selected=\"value\"\n              @iron-select=${this._handleLanguageChange}\n            >\n              ${languages.map(\n                ([key, label]) =>\n                  html`<paper-item .value=${key}>${label}</paper-item>`\n              )}\n            </paper-listbox>\n          </paper-dropdown-menu-light>\n\n          <paper-dropdown-menu-light .disabled=${this.savingPreferences}>\n            <paper-listbox\n              slot=\"dropdown-content\"\n              .selected=${defaultVoice[1]}\n              attr-for-selected=\"value\"\n              @iron-select=${this._handleGenderChange}\n            >\n              ${genders.map(\n                ([key, label]) =>\n                  html`<paper-item .value=${key}>${label}</paper-item>`\n              )}\n            </paper-listbox>\n          </paper-dropdown-menu-light>\n        </div>\n        <div class=\"card-actions\">\n          <mwc-button @click=${this._openTryDialog}>\n            ${this.hass.localize(\"ui.panel.config.cloud.account.tts.try\")}\n          </mwc-button>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    getCloudTTSInfo(this.hass).then((info) => {\n      this.ttsInfo = info;\n    });\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    if (changedProps.has(\"cloudStatus\")) {\n      this.savingPreferences = false;\n    }\n  }\n\n  private getLanguages = memoizeOne((info?: CloudTTSInfo) => {\n    const languages: Array<[string, string]> = [];\n\n    if (!info) {\n      return languages;\n    }\n\n    const seen = new Set<string>();\n    for (const [lang] of info.languages) {\n      if (seen.has(lang)) {\n        continue;\n      }\n      seen.add(lang);\n\n      let label = lang;\n\n      if (lang in translationMetadata.translations) {\n        label = translationMetadata.translations[lang].nativeName;\n      } else {\n        const [langFamily, dialect] = lang.split(\"-\");\n        if (langFamily in translationMetadata.translations) {\n          label = `${translationMetadata.translations[langFamily].nativeName}`;\n\n          if (langFamily.toLowerCase() !== dialect.toLowerCase()) {\n            label += ` (${dialect})`;\n          }\n        }\n      }\n\n      languages.push([lang, label]);\n    }\n    return languages.sort((a, b) => caseInsensitiveStringCompare(a[1], b[1]));\n  });\n\n  private getSupportedGenders = memoizeOne(\n    (language: string, info?: CloudTTSInfo) => {\n      const genders: Array<[string, string]> = [];\n\n      if (!info) {\n        return genders;\n      }\n\n      for (const [curLang, gender] of info.languages) {\n        if (curLang === language) {\n          genders.push([\n            gender,\n            this.hass.localize(`ui.panel.config.cloud.account.tts.${gender}`) ||\n              gender,\n          ]);\n        }\n      }\n\n      return genders.sort((a, b) => caseInsensitiveStringCompare(a[1], b[1]));\n    }\n  );\n\n  private _openTryDialog() {\n    showTryTtsDialog(this, {\n      defaultVoice: this.cloudStatus!.prefs.tts_default_voice,\n    });\n  }\n\n  async _handleLanguageChange(ev) {\n    if (ev.detail.item.value === this.cloudStatus!.prefs.tts_default_voice[0]) {\n      return;\n    }\n    this.savingPreferences = true;\n    const language = ev.detail.item.value;\n\n    const curGender = this.cloudStatus!.prefs.tts_default_voice[1];\n    const genders = this.getSupportedGenders(language, this.ttsInfo);\n    const newGender = genders.find((item) => item[0] === curGender)\n      ? curGender\n      : genders[0][0];\n\n    try {\n      await updateCloudPref(this.hass, {\n        tts_default_voice: [language, newGender],\n      });\n      fireEvent(this, \"ha-refresh-cloud-status\");\n    } catch (err: any) {\n      this.savingPreferences = false;\n      // eslint-disable-next-line no-console\n      console.error(err);\n      showAlertDialog(this, {\n        text: `Unable to save default language. ${err}`,\n        warning: true,\n      });\n    }\n  }\n\n  async _handleGenderChange(ev) {\n    if (ev.detail.item.value === this.cloudStatus!.prefs.tts_default_voice[1]) {\n      return;\n    }\n    this.savingPreferences = true;\n    const language = this.cloudStatus!.prefs.tts_default_voice[0];\n    const gender = ev.detail.item.value;\n\n    try {\n      await updateCloudPref(this.hass, {\n        tts_default_voice: [language, gender],\n      });\n      fireEvent(this, \"ha-refresh-cloud-status\");\n    } catch (err: any) {\n      this.savingPreferences = false;\n      // eslint-disable-next-line no-console\n      console.error(err);\n      showAlertDialog(this, {\n        text: `Unable to save default gender. ${err}`,\n        warning: true,\n      });\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      a {\n        color: var(--primary-color);\n      }\n      .example {\n        position: absolute;\n        right: 16px;\n        top: 16px;\n      }\n      :host([dir=\"rtl\"]) .example {\n        right: auto;\n        left: 24px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"cloud-tts-pref\": CloudTTSPref;\n  }\n}\n","import \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport { css, CSSResultGroup, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../../../common/config/is_component_loaded\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-circular-progress\";\nimport \"../../../../components/ha-settings-row\";\nimport \"../../../../components/ha-switch\";\nimport {\n  CloudStatusLoggedIn,\n  CloudWebhook,\n  createCloudhook,\n  deleteCloudhook,\n} from \"../../../../data/cloud\";\nimport { fetchWebhooks, Webhook, WebhookError } from \"../../../../data/webhook\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { showManageCloudhookDialog } from \"../dialog-manage-cloudhook/show-dialog-manage-cloudhook\";\n\n@customElement(\"cloud-webhooks\")\nexport class CloudWebhooks extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ attribute: false }) public cloudStatus?: CloudStatusLoggedIn;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @state() private _cloudHooks?: {\n    [webhookId: string]: CloudWebhook;\n  };\n\n  @state() private _localHooks?: Webhook[];\n\n  @state() private _progress: string[] = [];\n\n  public connectedCallback() {\n    super.connectedCallback();\n    this._fetchData();\n  }\n\n  protected render() {\n    return html`\n      <ha-card\n        header=${this.hass!.localize(\n          \"ui.panel.config.cloud.account.webhooks.title\"\n        )}\n      >\n        <div class=\"card-content\">\n          ${this.hass!.localize(\"ui.panel.config.cloud.account.webhooks.info\")}\n          ${!this.cloudStatus ||\n          !this._localHooks ||\n          !this._cloudHooks ||\n          !this.hass\n            ? html`\n                <div class=\"body-text\">\n                  ${this.hass!.localize(\n                    \"ui.panel.config.cloud.account.webhooks.loading\"\n                  )}\n                </div>\n              `\n            : this._localHooks.length === 0\n            ? html`\n                <div class=\"body-text\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.cloud.account.webhooks.no_hooks_yet\"\n                  )}\n                  <a href=\"/config/integrations\"\n                    >${this.hass.localize(\n                      \"ui.panel.config.cloud.account.webhooks.no_hooks_yet_link_integration\"\n                    )}\n                  </a>\n                  ${this.hass.localize(\n                    \"ui.panel.config.cloud.account.webhooks.no_hooks_yet2\"\n                  )}\n                  <a href=\"/config/automation/new\"\n                    >${this.hass.localize(\n                      \"ui.panel.config.cloud.account.webhooks.no_hooks_yet_link_automation\"\n                    )}</a\n                  >.\n                </div>\n              `\n            : this._localHooks.map(\n                (entry) => html`\n                  <ha-settings-row .narrow=${this.narrow} .entry=${entry}>\n                    <span slot=\"heading\">\n                      ${entry.name}\n                      ${entry.domain !== entry.name.toLowerCase()\n                        ? ` (${entry.domain})`\n                        : \"\"}\n                    </span>\n                    <span slot=\"description\">${entry.webhook_id}</span>\n                    ${this._progress.includes(entry.webhook_id)\n                      ? html`\n                          <div class=\"progress\">\n                            <ha-circular-progress active></ha-circular-progress>\n                          </div>\n                        `\n                      : this._cloudHooks![entry.webhook_id]\n                      ? html`\n                          <mwc-button @click=${this._handleManageButton}>\n                            ${this.hass!.localize(\n                              \"ui.panel.config.cloud.account.webhooks.manage\"\n                            )}\n                          </mwc-button>\n                        `\n                      : html`<ha-switch @click=${this._enableWebhook}>\n                        </ha-switch>`}\n                  </ha-settings-row>\n                `\n              )}\n          <div class=\"footer\">\n            <a\n              href=\"https://www.nabucasa.com/config/webhooks\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              ${this.hass!.localize(\n                \"ui.panel.config.cloud.account.webhooks.link_learn_more\"\n              )}\n            </a>\n          </div>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    if (changedProps.has(\"cloudStatus\") && this.cloudStatus) {\n      this._cloudHooks = this.cloudStatus.prefs.cloudhooks || {};\n    }\n  }\n\n  private _showDialog(webhookId: string) {\n    const webhook = this._localHooks!.find(\n      (ent) => ent.webhook_id === webhookId\n    )!;\n    const cloudhook = this._cloudHooks![webhookId];\n    showManageCloudhookDialog(this, {\n      webhook,\n      cloudhook,\n      disableHook: () => this._disableWebhook(webhookId),\n    });\n  }\n\n  private _handleManageButton(ev: MouseEvent) {\n    const entry = (ev.currentTarget as any).parentElement.entry as Webhook;\n    this._showDialog(entry.webhook_id);\n  }\n\n  private async _enableWebhook(ev: MouseEvent) {\n    const entry = (ev.currentTarget as any).parentElement!.entry as Webhook;\n    this._progress = [...this._progress, entry.webhook_id];\n    let updatedWebhook;\n\n    try {\n      updatedWebhook = await createCloudhook(this.hass!, entry.webhook_id);\n    } catch (err: any) {\n      alert((err as WebhookError).message);\n      return;\n    } finally {\n      this._progress = this._progress.filter((wid) => wid !== entry.webhook_id);\n    }\n\n    this._cloudHooks = {\n      ...this._cloudHooks,\n      [entry.webhook_id]: updatedWebhook,\n    };\n\n    // Only open dialog if we're not also enabling others, otherwise it's confusing\n    if (this._progress.length === 0) {\n      this._showDialog(entry.webhook_id);\n    }\n  }\n\n  private async _disableWebhook(webhookId: string) {\n    this._progress = [...this._progress, webhookId];\n    try {\n      await deleteCloudhook(this.hass!, webhookId!);\n    } catch (err: any) {\n      alert(\n        `${this.hass!.localize(\n          \"ui.panel.config.cloud.account.webhooks.disable_hook_error_msg\"\n        )} ${(err as WebhookError).message}`\n      );\n      return;\n    } finally {\n      this._progress = this._progress.filter((wid) => wid !== webhookId);\n    }\n\n    // Remove cloud related parts from entry.\n    const { [webhookId]: disabledHook, ...newHooks } = this._cloudHooks!;\n    this._cloudHooks = newHooks;\n  }\n\n  private async _fetchData() {\n    this._localHooks = isComponentLoaded(this.hass!, \"webhook\")\n      ? await fetchWebhooks(this.hass!)\n      : [];\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .body-text {\n          padding: 8px 0;\n        }\n        .webhook {\n          display: flex;\n          padding: 4px 0;\n        }\n        .progress {\n          margin-right: 16px;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n        }\n        .footer {\n          padding-top: 16px;\n        }\n        .body-text a,\n        .footer a {\n          color: var(--primary-color);\n        }\n        ha-settings-row {\n          padding: 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"cloud-webhooks\": CloudWebhooks;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@material/mwc-textfield/mwc-textfield\";\nimport type { TextField } from \"@material/mwc-textfield/mwc-textfield\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { navigate } from \"../../../../common/navigate\";\nimport \"../../../../components/buttons/ha-progress-button\";\nimport \"../../../../components/ha-alert\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-icon-next\";\nimport { cloudLogin } from \"../../../../data/cloud\";\nimport { showAlertDialog } from \"../../../../dialogs/generic/show-dialog-box\";\nimport \"../../../../layouts/hass-subpage\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport \"../../../../styles/polymer-ha-style\";\nimport { HomeAssistant } from \"../../../../types\";\nimport \"../../ha-config-section\";\n\n@customElement(\"cloud-login\")\nexport class CloudLogin extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public isWide = false;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property() public email?: string;\n\n  @property() public flashMessage?: string;\n\n  @state() private _password?: string;\n\n  @state() private _requestInProgress = false;\n\n  @state() private _error?: string;\n\n  @query(\"#email\", true) private _emailField!: TextField;\n\n  @query(\"#password\", true) private _passwordField!: TextField;\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        header=\"Home Assistant Cloud\"\n      >\n        <div class=\"content\">\n          <ha-config-section .isWide=${this.isWide}>\n            <span slot=\"header\">Home Assistant Cloud</span>\n            <div slot=\"introduction\">\n              <p>\n                ${this.hass.localize(\n                  \"ui.panel.config.cloud.login.introduction\"\n                )}\n              </p>\n              <p>\n                ${this.hass.localize(\n                  \"ui.panel.config.cloud.login.introduction2\"\n                )}\n                <a\n                  href=\"https://www.nabucasa.com\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  Nabu&nbsp;Casa,&nbsp;Inc</a\n                >${this.hass.localize(\n                  \"ui.panel.config.cloud.login.introduction2a\"\n                )}\n              </p>\n              <p>\n                ${this.hass.localize(\n                  \"ui.panel.config.cloud.login.introduction3\"\n                )}\n              </p>\n              <p>\n                <a\n                  href=\"https://www.nabucasa.com\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  ${this.hass.localize(\n                    \"ui.panel.config.cloud.login.learn_more_link\"\n                  )}\n                </a>\n              </p>\n            </div>\n\n            ${this.flashMessage\n              ? html`<ha-alert\n                  dismissable\n                  @alert-dismissed-clicked=${this._dismissFlash}\n                >\n                  ${this.flashMessage}\n                </ha-alert>`\n              : \"\"}\n\n            <ha-card\n              .header=${this.hass.localize(\n                \"ui.panel.config.cloud.login.sign_in\"\n              )}\n            >\n              <div class=\"card-content login-form\">\n                ${this._error\n                  ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`\n                  : \"\"}\n                <mwc-textfield\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.cloud.login.email\"\n                  )}\n                  id=\"email\"\n                  type=\"email\"\n                  required\n                  .value=${this.email}\n                  @keydown=${this._keyDown}\n                  .disabled=${this._requestInProgress}\n                  .validationMessage=${this.hass.localize(\n                    \"ui.panel.config.cloud.login.email_error_msg\"\n                  )}\n                ></mwc-textfield>\n                <mwc-textfield\n                  id=\"password\"\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.cloud.login.password\"\n                  )}\n                  .value=${this._password || \"\"}\n                  type=\"password\"\n                  required\n                  minlength=\"8\"\n                  @keydown=${this._keyDown}\n                  .disabled=${this._requestInProgress}\n                  .validationMessage=${this.hass.localize(\n                    \"ui.panel.config.cloud.login.password_error_msg\"\n                  )}\n                ></mwc-textfield>\n                <button\n                  class=\"link pwd-forgot-link\"\n                  .disabled=${this._requestInProgress}\n                  @click=${this._handleForgotPassword}\n                >\n                  ${this.hass.localize(\n                    \"ui.panel.config.cloud.login.forgot_password\"\n                  )}\n                </button>\n              </div>\n              <div class=\"card-actions\">\n                <ha-progress-button\n                  @click=${this._handleLogin}\n                  .progress=${this._requestInProgress}\n                  >${this.hass.localize(\n                    \"ui.panel.config.cloud.login.sign_in\"\n                  )}</ha-progress-button\n                >\n              </div>\n            </ha-card>\n\n            <ha-card>\n              <paper-item @click=${this._handleRegister}>\n                <paper-item-body two-line>\n                  ${this.hass.localize(\n                    \"ui.panel.config.cloud.login.start_trial\"\n                  )}\n                  <div secondary>\n                    ${this.hass.localize(\n                      \"ui.panel.config.cloud.login.trial_info\"\n                    )}\n                  </div>\n                </paper-item-body>\n                <ha-icon-next></ha-icon-next>\n              </paper-item>\n            </ha-card>\n          </ha-config-section>\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  private _keyDown(ev: KeyboardEvent) {\n    if (ev.key === \"Enter\") {\n      this._handleLogin();\n    }\n  }\n\n  private async _handleLogin() {\n    const emailField = this._emailField;\n    const passwordField = this._passwordField;\n\n    const email = emailField.value;\n    const password = passwordField.value;\n\n    if (!emailField.reportValidity()) {\n      passwordField.reportValidity();\n      emailField.focus();\n      return;\n    }\n\n    if (!passwordField.reportValidity()) {\n      passwordField.focus();\n      return;\n    }\n\n    this._requestInProgress = true;\n\n    try {\n      await cloudLogin(this.hass, email, password);\n      fireEvent(this, \"ha-refresh-cloud-status\");\n      this.email = \"\";\n      this._password = \"\";\n    } catch (err: any) {\n      const errCode = err && err.body && err.body.code;\n      if (errCode === \"PasswordChangeRequired\") {\n        showAlertDialog(this, {\n          title: this.hass.localize(\n            \"ui.panel.config.cloud.login.alert_password_change_required\"\n          ),\n        });\n        navigate(\"/config/cloud/forgot-password\");\n        return;\n      }\n\n      this._password = \"\";\n      this._requestInProgress = false;\n\n      if (errCode === \"UserNotConfirmed\") {\n        this._error = this.hass.localize(\n          \"ui.panel.config.cloud.login.alert_email_confirm_necessary\"\n        );\n      } else {\n        this._error =\n          err && err.body && err.body.message\n            ? err.body.message\n            : \"Unknown error\";\n      }\n\n      emailField.focus();\n    }\n  }\n\n  private _handleRegister() {\n    this._dismissFlash();\n    // @ts-ignore\n    fireEvent(this, \"email-changed\", { value: this._emailField.value });\n    navigate(\"/config/cloud/register\");\n  }\n\n  private _handleForgotPassword() {\n    this._dismissFlash();\n    // @ts-ignore\n    fireEvent(this, \"email-changed\", { value: this._emailField.value });\n    navigate(\"/config/cloud/forgot-password\");\n  }\n\n  private _dismissFlash() {\n    // @ts-ignore\n    fireEvent(this, \"flash-message-changed\", { value: \"\" });\n  }\n\n  static get styles() {\n    return [\n      haStyle,\n      css`\n        .content {\n          padding-bottom: 24px;\n        }\n        [slot=\"introduction\"] {\n          margin: -1em 0;\n        }\n        [slot=\"introduction\"] a {\n          color: var(--primary-color);\n        }\n        paper-item {\n          cursor: pointer;\n        }\n        ha-card {\n          overflow: hidden;\n        }\n        ha-card .card-header {\n          margin-bottom: -8px;\n        }\n        h1 {\n          margin: 0;\n        }\n        .card-actions {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        }\n        .login-form {\n          display: flex;\n          flex-direction: column;\n        }\n        .pwd-forgot-link {\n          color: var(--secondary-text-color) !important;\n          text-align: right !important;\n          align-self: flex-end;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"cloud-login\": CloudLogin;\n  }\n}\n"],"names":[],"sourceRoot":""}