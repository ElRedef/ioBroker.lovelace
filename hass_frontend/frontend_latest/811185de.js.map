{"version":3,"file":"811185de.js","mappings":";;;;;;;;;AAwBA;;ACHA;AACA;AACA;AACA;;;;AAIA;;AAIA;;;;;AAUA;;AAdA;AApBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACyBA;AACA;AACA;AACA;AAIA;;AAZA;;;;;;;;;AAfA;;AC0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;AAnBA;;;;;;;;;;;;;;AArBA;;AC+BA;AACA;AACA;AACA;AACA;;AATA;;;;;AAhCA;;AC8CA;AACA;AACA;AAKA;AACA;AAIA;;AArBA;;AAEA;;AA9BA;;AC6CA;AACA;AACA;AACA;AAIA;AAGA;AACA;;AApBA;;AAEA;;AA/BA;;;;;;;;;AAAA;;ACsCA;;AAWA;;AAEA;AACA;AACA;AAIA;;AAIA;;AApCA;;AAEA;;;;;;;;;;;;;;;AA3BA","sources":["webpack://home-assistant-frontend/./src/components/buttons/ha-call-service-button.js","webpack://home-assistant-frontend/./src/components/buttons/ha-progress-button.ts","webpack://home-assistant-frontend/./src/panels/lovelace/elements/hui-icon-element.ts","webpack://home-assistant-frontend/./src/panels/lovelace/elements/hui-image-element.ts","webpack://home-assistant-frontend/./src/panels/lovelace/elements/hui-service-button-element.ts","webpack://home-assistant-frontend/./src/panels/lovelace/elements/hui-state-badge-element.ts","webpack://home-assistant-frontend/./src/panels/lovelace/elements/hui-state-icon-element.ts","webpack://home-assistant-frontend/./src/panels/lovelace/elements/hui-state-label-element.ts"],"sourcesContent":["import { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport { showConfirmationDialog } from \"../../dialogs/generic/show-dialog-box\";\nimport { EventsMixin } from \"../../mixins/events-mixin\";\nimport \"./ha-progress-button\";\n\n/*\n * @appliesMixin EventsMixin\n */\nclass HaCallServiceButton extends EventsMixin(PolymerElement) {\n  static get template() {\n    return html`\n      <ha-progress-button\n        id=\"progress\"\n        progress=\"[[progress]]\"\n        disabled=\"[[disabled]]\"\n        on-click=\"buttonTapped\"\n        tabindex=\"0\"\n        ><slot></slot\n      ></ha-progress-button>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: {\n        type: Object,\n      },\n\n      progress: {\n        type: Boolean,\n        value: false,\n      },\n\n      domain: {\n        type: String,\n      },\n\n      service: {\n        type: String,\n      },\n\n      serviceData: {\n        type: Object,\n        value: {},\n      },\n\n      confirmation: {\n        type: String,\n      },\n\n      disabled: {\n        type: Boolean,\n      },\n    };\n  }\n\n  callService() {\n    this.progress = true;\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const el = this;\n    const eventData = {\n      domain: this.domain,\n      service: this.service,\n      serviceData: this.serviceData,\n    };\n\n    this.hass\n      .callService(this.domain, this.service, this.serviceData)\n      .then(\n        () => {\n          el.progress = false;\n          el.$.progress.actionSuccess();\n          eventData.success = true;\n        },\n        () => {\n          el.progress = false;\n          el.$.progress.actionError();\n          eventData.success = false;\n        }\n      )\n      .then(() => {\n        el.fire(\"hass-service-called\", eventData);\n      });\n  }\n\n  buttonTapped() {\n    if (this.confirmation) {\n      showConfirmationDialog(this, {\n        text: this.confirmation,\n        confirm: () => this.callService(),\n      });\n    } else {\n      this.callService();\n    }\n  }\n}\n\ncustomElements.define(\"ha-call-service-button\", HaCallServiceButton);\n","import \"@material/mwc-button\";\nimport { mdiAlertOctagram, mdiCheckBold } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../ha-circular-progress\";\nimport \"../ha-svg-icon\";\n\n@customElement(\"ha-progress-button\")\nexport class HaProgressButton extends LitElement {\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public progress = false;\n\n  @property({ type: Boolean }) public raised = false;\n\n  @state() private _result?: \"success\" | \"error\";\n\n  public render(): TemplateResult {\n    const overlay = this._result || this.progress;\n    return html`\n      <mwc-button\n        ?raised=${this.raised}\n        .disabled=${this.disabled || this.progress}\n        @click=${this._buttonTapped}\n        class=${this._result || \"\"}\n      >\n        <slot></slot>\n      </mwc-button>\n      ${!overlay\n        ? \"\"\n        : html`\n            <div class=\"progress\">\n              ${this._result === \"success\"\n                ? html`<ha-svg-icon .path=${mdiCheckBold}></ha-svg-icon>`\n                : this._result === \"error\"\n                ? html`<ha-svg-icon .path=${mdiAlertOctagram}></ha-svg-icon>`\n                : this.progress\n                ? html`\n                    <ha-circular-progress\n                      size=\"small\"\n                      active\n                    ></ha-circular-progress>\n                  `\n                : \"\"}\n            </div>\n          `}\n    `;\n  }\n\n  public actionSuccess(): void {\n    this._setResult(\"success\");\n  }\n\n  public actionError(): void {\n    this._setResult(\"error\");\n  }\n\n  private _setResult(result: \"success\" | \"error\"): void {\n    this._result = result;\n    setTimeout(() => {\n      this._result = undefined;\n    }, 2000);\n  }\n\n  private _buttonTapped(ev: Event): void {\n    if (this.progress) {\n      ev.stopPropagation();\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        outline: none;\n        display: inline-block;\n        position: relative;\n      }\n\n      mwc-button {\n        transition: all 1s;\n      }\n\n      mwc-button.success {\n        --mdc-theme-primary: white;\n        background-color: var(--success-color);\n        transition: none;\n        border-radius: 4px;\n        pointer-events: none;\n      }\n\n      mwc-button[raised].success {\n        --mdc-theme-primary: var(--success-color);\n        --mdc-theme-on-primary: white;\n      }\n\n      mwc-button.error {\n        --mdc-theme-primary: white;\n        background-color: var(--error-color);\n        transition: none;\n        border-radius: 4px;\n        pointer-events: none;\n      }\n\n      mwc-button[raised].error {\n        --mdc-theme-primary: var(--error-color);\n        --mdc-theme-on-primary: white;\n      }\n\n      .progress {\n        bottom: 4px;\n        position: absolute;\n        text-align: center;\n        top: 4px;\n        width: 100%;\n      }\n\n      ha-svg-icon {\n        color: white;\n      }\n\n      mwc-button.success slot,\n      mwc-button.error slot {\n        visibility: hidden;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-progress-button\": HaProgressButton;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport \"../../../components/ha-icon\";\nimport { ActionHandlerEvent } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\nimport { computeTooltip } from \"../common/compute-tooltip\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { handleAction } from \"../common/handle-action\";\nimport { hasAction } from \"../common/has-action\";\nimport { IconElementConfig, LovelaceElement } from \"./types\";\n\n@customElement(\"hui-icon-element\")\nexport class HuiIconElement extends LitElement implements LovelaceElement {\n  public hass?: HomeAssistant;\n\n  @state() private _config?: IconElementConfig;\n\n  public setConfig(config: IconElementConfig): void {\n    if (!config.icon) {\n      throw Error(\"Icon required\");\n    }\n\n    this._config = { hold_action: { action: \"more-info\" }, ...config };\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    return html`\n      <ha-icon\n        .icon=${this._config.icon}\n        .title=${computeTooltip(this.hass, this._config)}\n        @action=${this._handleAction}\n        .actionHandler=${actionHandler({\n          hasHold: hasAction(this._config!.hold_action),\n          hasDoubleClick: hasAction(this._config!.double_tap_action),\n        })}\n        tabindex=${ifDefined(\n          hasAction(this._config.tap_action) ? \"0\" : undefined\n        )}\n      ></ha-icon>\n    `;\n  }\n\n  private _handleAction(ev: ActionHandlerEvent) {\n    handleAction(this, this.hass!, this._config!, ev.detail.action!);\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        cursor: pointer;\n      }\n      ha-icon:focus {\n        outline: none;\n        background: var(--divider-color);\n        border-radius: 100%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-icon-element\": HuiIconElement;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { ActionHandlerEvent } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\nimport { computeTooltip } from \"../common/compute-tooltip\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { handleAction } from \"../common/handle-action\";\nimport { hasAction } from \"../common/has-action\";\nimport \"../components/hui-image\";\nimport { ImageElementConfig, LovelaceElement } from \"./types\";\n\n@customElement(\"hui-image-element\")\nexport class HuiImageElement extends LitElement implements LovelaceElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: ImageElementConfig;\n\n  public setConfig(config: ImageElementConfig): void {\n    if (!config) {\n      throw Error(\"Invalid configuration\");\n    }\n\n    this._config = { hold_action: { action: \"more-info\" }, ...config };\n\n    // eslint-disable-next-line wc/no-self-class\n    this.classList.toggle(\n      \"clickable\",\n      this._config.tap_action && this._config.tap_action.action !== \"none\"\n    );\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    return html`\n      <hui-image\n        .hass=${this.hass}\n        .entity=${this._config.entity}\n        .image=${this._config.image}\n        .stateImage=${this._config.state_image}\n        .cameraImage=${this._config.camera_image}\n        .filter=${this._config.filter}\n        .stateFilter=${this._config.state_filter}\n        .title=${computeTooltip(this.hass, this._config)}\n        .aspectRatio=${this._config.aspect_ratio}\n        @action=${this._handleAction}\n        .actionHandler=${actionHandler({\n          hasHold: hasAction(this._config!.hold_action),\n          hasDoubleClick: hasAction(this._config!.double_tap_action),\n        })}\n        tabindex=${ifDefined(\n          hasAction(this._config.tap_action) ? \"0\" : undefined\n        )}\n      ></hui-image>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host(.clickable) {\n        cursor: pointer;\n        overflow: hidden;\n        -webkit-touch-callout: none !important;\n      }\n      hui-image {\n        -webkit-user-select: none !important;\n      }\n      hui-image:focus {\n        outline: none;\n        background: var(--divider-color);\n        border-radius: 100%;\n      }\n    `;\n  }\n\n  private _handleAction(ev: ActionHandlerEvent) {\n    handleAction(this, this.hass!, this._config!, ev.detail.action!);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-image-element\": HuiImageElement;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, state } from \"lit/decorators\";\nimport \"../../../components/buttons/ha-call-service-button\";\nimport { HomeAssistant } from \"../../../types\";\nimport { LovelaceElement, ServiceButtonElementConfig } from \"./types\";\n\n@customElement(\"hui-service-button-element\")\nexport class HuiServiceButtonElement\n  extends LitElement\n  implements LovelaceElement\n{\n  public hass?: HomeAssistant;\n\n  @state() private _config?: ServiceButtonElementConfig;\n\n  private _domain?: string;\n\n  private _service?: string;\n\n  public setConfig(config: ServiceButtonElementConfig): void {\n    if (!config || !config.service) {\n      throw Error(\"Service required\");\n    }\n\n    [this._domain, this._service] = config.service.split(\".\", 2);\n\n    if (!this._domain) {\n      throw Error(\"Service does not have a service domain\");\n    }\n\n    if (!this._service) {\n      throw Error(\"Service does not have a service name\");\n    }\n\n    this._config = config;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    return html`\n      <ha-call-service-button\n        .hass=${this.hass}\n        .domain=${this._domain}\n        .service=${this._service}\n        .serviceData=${this._config.service_data}\n        >${this._config.title}</ha-call-service-button\n      >\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-call-service-button {\n        color: var(--primary-color);\n        white-space: nowrap;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-service-button-element\": HuiServiceButtonElement;\n  }\n}\n","import { html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport \"../../../components/entity/ha-state-label-badge\";\nimport { ActionHandlerEvent } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { handleAction } from \"../common/handle-action\";\nimport { hasAction } from \"../common/has-action\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport \"../components/hui-warning-element\";\nimport { LovelaceElement, StateBadgeElementConfig } from \"./types\";\n\n@customElement(\"hui-state-badge-element\")\nexport class HuiStateBadgeElement\n  extends LitElement\n  implements LovelaceElement\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: StateBadgeElementConfig;\n\n  public setConfig(config: StateBadgeElementConfig): void {\n    if (!config.entity) {\n      throw Error(\"Entity required\");\n    }\n\n    this._config = { hold_action: { action: \"more-info\" }, ...config };\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity!];\n\n    if (!stateObj) {\n      return html`\n        <hui-warning-element\n          .label=${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        ></hui-warning-element>\n      `;\n    }\n\n    return html`\n      <ha-state-label-badge\n        .hass=${this.hass}\n        .state=${stateObj}\n        .title=${this._config.title === undefined\n          ? computeStateName(stateObj)\n          : this._config.title === null\n          ? \"\"\n          : this._config.title}\n        @action=${this._handleAction}\n        .actionHandler=${actionHandler({\n          hasHold: hasAction(this._config!.hold_action),\n          hasDoubleClick: hasAction(this._config!.double_tap_action),\n        })}\n        tabindex=${ifDefined(\n          hasAction(this._config.tap_action) ? \"0\" : undefined\n        )}\n      ></ha-state-label-badge>\n    `;\n  }\n\n  private _handleAction(ev: ActionHandlerEvent) {\n    handleAction(this, this.hass!, this._config!, ev.detail.action!);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-state-badge-element\": HuiStateBadgeElement;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport \"../../../components/entity/state-badge\";\nimport { ActionHandlerEvent } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\nimport { computeTooltip } from \"../common/compute-tooltip\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { handleAction } from \"../common/handle-action\";\nimport { hasAction } from \"../common/has-action\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport \"../components/hui-warning-element\";\nimport { LovelaceElement, StateIconElementConfig } from \"./types\";\n\n@customElement(\"hui-state-icon-element\")\nexport class HuiStateIconElement extends LitElement implements LovelaceElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: StateIconElementConfig;\n\n  public setConfig(config: StateIconElementConfig): void {\n    if (!config.entity) {\n      throw Error(\"Entity required\");\n    }\n\n    this._config = {\n      state_color: true,\n      hold_action: { action: \"more-info\" },\n      ...config,\n    };\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity!];\n\n    if (!stateObj) {\n      return html`\n        <hui-warning-element\n          .label=${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        ></hui-warning-element>\n      `;\n    }\n\n    return html`\n      <state-badge\n        .stateObj=${stateObj}\n        .title=${computeTooltip(this.hass, this._config)}\n        @action=${this._handleAction}\n        .actionHandler=${actionHandler({\n          hasHold: hasAction(this._config!.hold_action),\n          hasDoubleClick: hasAction(this._config!.double_tap_action),\n        })}\n        tabindex=${ifDefined(\n          hasAction(this._config.tap_action) ? \"0\" : undefined\n        )}\n        .overrideIcon=${this._config.icon}\n        .stateColor=${this._config.state_color}\n      ></state-badge>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        cursor: pointer;\n      }\n      state-badge:focus {\n        outline: none;\n        background: var(--divider-color);\n        border-radius: 100%;\n      }\n    `;\n  }\n\n  private _handleAction(ev: ActionHandlerEvent) {\n    handleAction(this, this.hass!, this._config!, ev.detail.action!);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-state-icon-element\": HuiStateIconElement;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { computeStateDisplay } from \"../../../common/entity/compute_state_display\";\nimport { ActionHandlerEvent } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\nimport { computeTooltip } from \"../common/compute-tooltip\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { handleAction } from \"../common/handle-action\";\nimport { hasAction } from \"../common/has-action\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport \"../components/hui-warning-element\";\nimport { LovelaceElement, StateLabelElementConfig } from \"./types\";\n\n@customElement(\"hui-state-label-element\")\nclass HuiStateLabelElement extends LitElement implements LovelaceElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: StateLabelElementConfig;\n\n  public setConfig(config: StateLabelElementConfig): void {\n    if (!config.entity) {\n      throw Error(\"Entity required\");\n    }\n\n    this._config = { hold_action: { action: \"more-info\" }, ...config };\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity!];\n\n    if (!stateObj) {\n      return html`\n        <hui-warning-element\n          .label=${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        ></hui-warning-element>\n      `;\n    }\n\n    if (\n      this._config.attribute &&\n      !(this._config.attribute in stateObj.attributes)\n    ) {\n      return html`\n        <hui-warning-element\n          label=${this.hass.localize(\n            \"ui.panel.lovelace.warning.attribute_not_found\",\n            \"attribute\",\n            this._config.attribute,\n            \"entity\",\n            this._config.entity\n          )}\n        ></hui-warning-element>\n      `;\n    }\n\n    return html`\n      <div\n        .title=${computeTooltip(this.hass, this._config)}\n        @action=${this._handleAction}\n        .actionHandler=${actionHandler({\n          hasHold: hasAction(this._config!.hold_action),\n          hasDoubleClick: hasAction(this._config!.double_tap_action),\n        })}\n        tabindex=${ifDefined(\n          hasAction(this._config.tap_action) ? \"0\" : undefined\n        )}\n      >\n        ${this._config.prefix}${!this._config.attribute\n          ? computeStateDisplay(this.hass.localize, stateObj, this.hass.locale)\n          : stateObj.attributes[this._config.attribute]}${this._config.suffix}\n      </div>\n    `;\n  }\n\n  private _handleAction(ev: ActionHandlerEvent) {\n    handleAction(this, this.hass!, this._config!, ev.detail.action!);\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        cursor: pointer;\n      }\n      div {\n        padding: 8px;\n        white-space: nowrap;\n      }\n      div:focus {\n        outline: none;\n        background: var(--divider-color);\n        border-radius: 100%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-state-label-element\": HuiStateLabelElement;\n  }\n}\n"],"names":[],"sourceRoot":""}