"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkhome_assistant_frontend"] = self["webpackChunkhome_assistant_frontend"] || []).push([["src_data_energy_ts"],{

/***/ "./src/common/util/group-by.ts":
/*!*************************************!*\
  !*** ./src/common/util/group-by.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   groupBy: () => (/* binding */ groupBy)\n/* harmony export */ });\nconst groupBy = (list, keySelector) => {\n  const result = {};\n  for (const item of list) {\n    const key = keySelector(item);\n    if (key in result) {\n      result[key].push(item);\n    } else {\n      result[key] = [item];\n    }\n  }\n  return result;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tbW9uL3V0aWwvZ3JvdXAtYnkudHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2hvbWUtYXNzaXN0YW50LWZyb250ZW5kLy4vc3JjL2NvbW1vbi91dGlsL2dyb3VwLWJ5LnRzPzM4ODciXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGdyb3VwQnkgPSA8VD4oXG4gIGxpc3Q6IFRbXSxcbiAga2V5U2VsZWN0b3I6IChpdGVtOiBUKSA9PiBzdHJpbmdcbik6IHsgW2tleTogc3RyaW5nXTogVFtdIH0gPT4ge1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgZm9yIChjb25zdCBpdGVtIG9mIGxpc3QpIHtcbiAgICBjb25zdCBrZXkgPSBrZXlTZWxlY3RvcihpdGVtKTtcbiAgICBpZiAoa2V5IGluIHJlc3VsdCkge1xuICAgICAgcmVzdWx0W2tleV0ucHVzaChpdGVtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSBbaXRlbV07XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/common/util/group-by.ts\n");

/***/ }),

/***/ "./src/data/config_entries.ts":
/*!************************************!*\
  !*** ./src/data/config_entries.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ERROR_STATES: () => (/* binding */ ERROR_STATES),\n/* harmony export */   RECOVERABLE_STATES: () => (/* binding */ RECOVERABLE_STATES),\n/* harmony export */   deleteConfigEntry: () => (/* binding */ deleteConfigEntry),\n/* harmony export */   disableConfigEntry: () => (/* binding */ disableConfigEntry),\n/* harmony export */   enableConfigEntry: () => (/* binding */ enableConfigEntry),\n/* harmony export */   getConfigEntries: () => (/* binding */ getConfigEntries),\n/* harmony export */   getConfigEntry: () => (/* binding */ getConfigEntry),\n/* harmony export */   reloadConfigEntry: () => (/* binding */ reloadConfigEntry),\n/* harmony export */   subscribeConfigEntries: () => (/* binding */ subscribeConfigEntries),\n/* harmony export */   updateConfigEntry: () => (/* binding */ updateConfigEntry)\n/* harmony export */ });\n// https://github.com/home-assistant/core/blob/2286dea636fda001f03433ba14d7adbda43979e5/homeassistant/config_entries.py#L81\nconst ERROR_STATES = [\"migration_error\", \"setup_error\", \"setup_retry\"];\n\n// https://github.com/home-assistant/core/blob/2286dea636fda001f03433ba14d7adbda43979e5/homeassistant/config_entries.py#L81\nconst RECOVERABLE_STATES = [\"not_loaded\", \"loaded\", \"setup_error\", \"setup_retry\"];\nconst subscribeConfigEntries = (hass, callbackFunction, filters) => {\n  const params = {\n    type: \"config_entries/subscribe\"\n  };\n  if (filters && filters.type) {\n    params.type_filter = filters.type;\n  }\n  return hass.connection.subscribeMessage(message => callbackFunction(message), params);\n};\nconst getConfigEntries = (hass, filters) => {\n  const params = {};\n  if (filters) {\n    if (filters.type) {\n      params.type_filter = filters.type;\n    }\n    if (filters.domain) {\n      params.domain = filters.domain;\n    }\n  }\n  return hass.callWS({\n    type: \"config_entries/get\",\n    ...params\n  });\n};\nconst getConfigEntry = (hass, configEntryId) => hass.callWS({\n  type: \"config_entries/get_single\",\n  entry_id: configEntryId\n});\nconst updateConfigEntry = (hass, configEntryId, updatedValues) => hass.callWS({\n  type: \"config_entries/update\",\n  entry_id: configEntryId,\n  ...updatedValues\n});\nconst deleteConfigEntry = (hass, configEntryId) => hass.callApi(\"DELETE\", `config/config_entries/entry/${configEntryId}`);\nconst reloadConfigEntry = (hass, configEntryId) => hass.callApi(\"POST\", `config/config_entries/entry/${configEntryId}/reload`);\nconst disableConfigEntry = (hass, configEntryId) => hass.callWS({\n  type: \"config_entries/disable\",\n  entry_id: configEntryId,\n  disabled_by: \"user\"\n});\nconst enableConfigEntry = (hass, configEntryId) => hass.callWS({\n  type: \"config_entries/disable\",\n  entry_id: configEntryId,\n  disabled_by: null\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZGF0YS9jb25maWdfZW50cmllcy50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBaUNBO0FBQ0E7O0FBTUE7QUFDQTtBQWFBO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUVBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBS0E7QUFTQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFJQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2hvbWUtYXNzaXN0YW50LWZyb250ZW5kLy4vc3JjL2RhdGEvY29uZmlnX2VudHJpZXMudHM/NGZkMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBVbnN1YnNjcmliZUZ1bmMgfSBmcm9tIFwiaG9tZS1hc3Npc3RhbnQtanMtd2Vic29ja2V0XCI7XG5pbXBvcnQgeyBIb21lQXNzaXN0YW50IH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQgeyBJbnRlZ3JhdGlvblR5cGUgfSBmcm9tIFwiLi9pbnRlZ3JhdGlvblwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbmZpZ0VudHJ5IHtcbiAgZW50cnlfaWQ6IHN0cmluZztcbiAgZG9tYWluOiBzdHJpbmc7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIHNvdXJjZTogc3RyaW5nO1xuICBzdGF0ZTpcbiAgICB8IFwibG9hZGVkXCJcbiAgICB8IFwic2V0dXBfZXJyb3JcIlxuICAgIHwgXCJtaWdyYXRpb25fZXJyb3JcIlxuICAgIHwgXCJzZXR1cF9yZXRyeVwiXG4gICAgfCBcIm5vdF9sb2FkZWRcIlxuICAgIHwgXCJmYWlsZWRfdW5sb2FkXCJcbiAgICB8IFwic2V0dXBfaW5fcHJvZ3Jlc3NcIjtcbiAgc3VwcG9ydHNfb3B0aW9uczogYm9vbGVhbjtcbiAgc3VwcG9ydHNfcmVtb3ZlX2RldmljZTogYm9vbGVhbjtcbiAgc3VwcG9ydHNfdW5sb2FkOiBib29sZWFuO1xuICBwcmVmX2Rpc2FibGVfbmV3X2VudGl0aWVzOiBib29sZWFuO1xuICBwcmVmX2Rpc2FibGVfcG9sbGluZzogYm9vbGVhbjtcbiAgZGlzYWJsZWRfYnk6IFwidXNlclwiIHwgbnVsbDtcbiAgcmVhc29uOiBzdHJpbmcgfCBudWxsO1xufVxuXG5leHBvcnQgdHlwZSBDb25maWdFbnRyeU11dGFibGVQYXJhbXMgPSBQYXJ0aWFsPFxuICBQaWNrPFxuICAgIENvbmZpZ0VudHJ5LFxuICAgIFwidGl0bGVcIiB8IFwicHJlZl9kaXNhYmxlX25ld19lbnRpdGllc1wiIHwgXCJwcmVmX2Rpc2FibGVfcG9sbGluZ1wiXG4gID5cbj47XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ob21lLWFzc2lzdGFudC9jb3JlL2Jsb2IvMjI4NmRlYTYzNmZkYTAwMWYwMzQzM2JhMTRkN2FkYmRhNDM5NzllNS9ob21lYXNzaXN0YW50L2NvbmZpZ19lbnRyaWVzLnB5I0w4MVxuZXhwb3J0IGNvbnN0IEVSUk9SX1NUQVRFUzogQ29uZmlnRW50cnlbXCJzdGF0ZVwiXVtdID0gW1xuICBcIm1pZ3JhdGlvbl9lcnJvclwiLFxuICBcInNldHVwX2Vycm9yXCIsXG4gIFwic2V0dXBfcmV0cnlcIixcbl07XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ob21lLWFzc2lzdGFudC9jb3JlL2Jsb2IvMjI4NmRlYTYzNmZkYTAwMWYwMzQzM2JhMTRkN2FkYmRhNDM5NzllNS9ob21lYXNzaXN0YW50L2NvbmZpZ19lbnRyaWVzLnB5I0w4MVxuZXhwb3J0IGNvbnN0IFJFQ09WRVJBQkxFX1NUQVRFUzogQ29uZmlnRW50cnlbXCJzdGF0ZVwiXVtdID0gW1xuICBcIm5vdF9sb2FkZWRcIixcbiAgXCJsb2FkZWRcIixcbiAgXCJzZXR1cF9lcnJvclwiLFxuICBcInNldHVwX3JldHJ5XCIsXG5dO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbmZpZ0VudHJ5VXBkYXRlIHtcbiAgLy8gbnVsbCBtZWFucyBubyB1cGRhdGUgYXMgaXMgdGhlIGN1cnJlbnQgc3RhdGVcbiAgdHlwZTogbnVsbCB8IFwiYWRkZWRcIiB8IFwicmVtb3ZlZFwiIHwgXCJ1cGRhdGVkXCI7XG4gIGVudHJ5OiBDb25maWdFbnRyeTtcbn1cblxuZXhwb3J0IGNvbnN0IHN1YnNjcmliZUNvbmZpZ0VudHJpZXMgPSAoXG4gIGhhc3M6IEhvbWVBc3Npc3RhbnQsXG4gIGNhbGxiYWNrRnVuY3Rpb246IChtZXNzYWdlOiBDb25maWdFbnRyeVVwZGF0ZVtdKSA9PiB2b2lkLFxuICBmaWx0ZXJzPzoge1xuICAgIHR5cGU/OiBJbnRlZ3JhdGlvblR5cGVbXTtcbiAgICBkb21haW4/OiBzdHJpbmc7XG4gIH1cbik6IFByb21pc2U8VW5zdWJzY3JpYmVGdW5jPiA9PiB7XG4gIGNvbnN0IHBhcmFtczogYW55ID0ge1xuICAgIHR5cGU6IFwiY29uZmlnX2VudHJpZXMvc3Vic2NyaWJlXCIsXG4gIH07XG4gIGlmIChmaWx0ZXJzICYmIGZpbHRlcnMudHlwZSkge1xuICAgIHBhcmFtcy50eXBlX2ZpbHRlciA9IGZpbHRlcnMudHlwZTtcbiAgfVxuICByZXR1cm4gaGFzcy5jb25uZWN0aW9uLnN1YnNjcmliZU1lc3NhZ2U8Q29uZmlnRW50cnlVcGRhdGVbXT4oXG4gICAgKG1lc3NhZ2UpID0+IGNhbGxiYWNrRnVuY3Rpb24obWVzc2FnZSksXG4gICAgcGFyYW1zXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0Q29uZmlnRW50cmllcyA9IChcbiAgaGFzczogSG9tZUFzc2lzdGFudCxcbiAgZmlsdGVycz86IHtcbiAgICB0eXBlPzogSW50ZWdyYXRpb25UeXBlW107XG4gICAgZG9tYWluPzogc3RyaW5nO1xuICB9XG4pOiBQcm9taXNlPENvbmZpZ0VudHJ5W10+ID0+IHtcbiAgY29uc3QgcGFyYW1zOiBhbnkgPSB7fTtcbiAgaWYgKGZpbHRlcnMpIHtcbiAgICBpZiAoZmlsdGVycy50eXBlKSB7XG4gICAgICBwYXJhbXMudHlwZV9maWx0ZXIgPSBmaWx0ZXJzLnR5cGU7XG4gICAgfVxuICAgIGlmIChmaWx0ZXJzLmRvbWFpbikge1xuICAgICAgcGFyYW1zLmRvbWFpbiA9IGZpbHRlcnMuZG9tYWluO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaGFzcy5jYWxsV1M8Q29uZmlnRW50cnlbXT4oe1xuICAgIHR5cGU6IFwiY29uZmlnX2VudHJpZXMvZ2V0XCIsXG4gICAgLi4ucGFyYW1zLFxuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRDb25maWdFbnRyeSA9IChoYXNzOiBIb21lQXNzaXN0YW50LCBjb25maWdFbnRyeUlkOiBzdHJpbmcpID0+XG4gIGhhc3MuY2FsbFdTPHsgY29uZmlnX2VudHJ5OiBDb25maWdFbnRyeSB9Pih7XG4gICAgdHlwZTogXCJjb25maWdfZW50cmllcy9nZXRfc2luZ2xlXCIsXG4gICAgZW50cnlfaWQ6IGNvbmZpZ0VudHJ5SWQsXG4gIH0pO1xuXG5leHBvcnQgY29uc3QgdXBkYXRlQ29uZmlnRW50cnkgPSAoXG4gIGhhc3M6IEhvbWVBc3Npc3RhbnQsXG4gIGNvbmZpZ0VudHJ5SWQ6IHN0cmluZyxcbiAgdXBkYXRlZFZhbHVlczogQ29uZmlnRW50cnlNdXRhYmxlUGFyYW1zXG4pID0+XG4gIGhhc3MuY2FsbFdTPHsgcmVxdWlyZV9yZXN0YXJ0OiBib29sZWFuOyBjb25maWdfZW50cnk6IENvbmZpZ0VudHJ5IH0+KHtcbiAgICB0eXBlOiBcImNvbmZpZ19lbnRyaWVzL3VwZGF0ZVwiLFxuICAgIGVudHJ5X2lkOiBjb25maWdFbnRyeUlkLFxuICAgIC4uLnVwZGF0ZWRWYWx1ZXMsXG4gIH0pO1xuXG5leHBvcnQgY29uc3QgZGVsZXRlQ29uZmlnRW50cnkgPSAoaGFzczogSG9tZUFzc2lzdGFudCwgY29uZmlnRW50cnlJZDogc3RyaW5nKSA9PlxuICBoYXNzLmNhbGxBcGk8e1xuICAgIHJlcXVpcmVfcmVzdGFydDogYm9vbGVhbjtcbiAgfT4oXCJERUxFVEVcIiwgYGNvbmZpZy9jb25maWdfZW50cmllcy9lbnRyeS8ke2NvbmZpZ0VudHJ5SWR9YCk7XG5cbmV4cG9ydCBjb25zdCByZWxvYWRDb25maWdFbnRyeSA9IChoYXNzOiBIb21lQXNzaXN0YW50LCBjb25maWdFbnRyeUlkOiBzdHJpbmcpID0+XG4gIGhhc3MuY2FsbEFwaTx7XG4gICAgcmVxdWlyZV9yZXN0YXJ0OiBib29sZWFuO1xuICB9PihcIlBPU1RcIiwgYGNvbmZpZy9jb25maWdfZW50cmllcy9lbnRyeS8ke2NvbmZpZ0VudHJ5SWR9L3JlbG9hZGApO1xuXG5leHBvcnQgaW50ZXJmYWNlIERpc2FibGVDb25maWdFbnRyeVJlc3VsdCB7XG4gIHJlcXVpcmVfcmVzdGFydDogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNvbnN0IGRpc2FibGVDb25maWdFbnRyeSA9IChcbiAgaGFzczogSG9tZUFzc2lzdGFudCxcbiAgY29uZmlnRW50cnlJZDogc3RyaW5nXG4pID0+XG4gIGhhc3MuY2FsbFdTPERpc2FibGVDb25maWdFbnRyeVJlc3VsdD4oe1xuICAgIHR5cGU6IFwiY29uZmlnX2VudHJpZXMvZGlzYWJsZVwiLFxuICAgIGVudHJ5X2lkOiBjb25maWdFbnRyeUlkLFxuICAgIGRpc2FibGVkX2J5OiBcInVzZXJcIixcbiAgfSk7XG5cbmV4cG9ydCBjb25zdCBlbmFibGVDb25maWdFbnRyeSA9IChoYXNzOiBIb21lQXNzaXN0YW50LCBjb25maWdFbnRyeUlkOiBzdHJpbmcpID0+XG4gIGhhc3MuY2FsbFdTPHtcbiAgICByZXF1aXJlX3Jlc3RhcnQ6IGJvb2xlYW47XG4gIH0+KHtcbiAgICB0eXBlOiBcImNvbmZpZ19lbnRyaWVzL2Rpc2FibGVcIixcbiAgICBlbnRyeV9pZDogY29uZmlnRW50cnlJZCxcbiAgICBkaXNhYmxlZF9ieTogbnVsbCxcbiAgfSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/data/config_entries.ts\n");

/***/ }),

/***/ "./src/data/energy.ts":
/*!****************************!*\
  !*** ./src/data/energy.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   emptyBatteryEnergyPreference: () => (/* binding */ emptyBatteryEnergyPreference),\n/* harmony export */   emptyFlowFromGridSourceEnergyPreference: () => (/* binding */ emptyFlowFromGridSourceEnergyPreference),\n/* harmony export */   emptyFlowToGridSourceEnergyPreference: () => (/* binding */ emptyFlowToGridSourceEnergyPreference),\n/* harmony export */   emptyGasEnergyPreference: () => (/* binding */ emptyGasEnergyPreference),\n/* harmony export */   emptyGridSourceEnergyPreference: () => (/* binding */ emptyGridSourceEnergyPreference),\n/* harmony export */   emptySolarEnergyPreference: () => (/* binding */ emptySolarEnergyPreference),\n/* harmony export */   emptyWaterEnergyPreference: () => (/* binding */ emptyWaterEnergyPreference),\n/* harmony export */   energySourcesByType: () => (/* binding */ energySourcesByType),\n/* harmony export */   getEnergyDataCollection: () => (/* binding */ getEnergyDataCollection),\n/* harmony export */   getEnergyGasUnit: () => (/* binding */ getEnergyGasUnit),\n/* harmony export */   getEnergyGasUnitClass: () => (/* binding */ getEnergyGasUnitClass),\n/* harmony export */   getEnergyInfo: () => (/* binding */ getEnergyInfo),\n/* harmony export */   getEnergyPreferenceValidation: () => (/* binding */ getEnergyPreferenceValidation),\n/* harmony export */   getEnergyPreferences: () => (/* binding */ getEnergyPreferences),\n/* harmony export */   getEnergySolarForecasts: () => (/* binding */ getEnergySolarForecasts),\n/* harmony export */   getEnergyWaterUnit: () => (/* binding */ getEnergyWaterUnit),\n/* harmony export */   getFossilEnergyConsumption: () => (/* binding */ getFossilEnergyConsumption),\n/* harmony export */   getReferencedStatisticIds: () => (/* binding */ getReferencedStatisticIds),\n/* harmony export */   saveEnergyPreferences: () => (/* binding */ saveEnergyPreferences)\n/* harmony export */ });\n/* harmony import */ var date_fns_esm__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! date-fns/esm */ \"./node_modules/date-fns/esm/differenceInDays/index.js\");\n/* harmony import */ var date_fns_esm__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! date-fns/esm */ \"./node_modules/date-fns/esm/addMonths/index.js\");\n/* harmony import */ var date_fns_esm__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! date-fns/esm */ \"./node_modules/date-fns/esm/addDays/index.js\");\n/* harmony import */ var date_fns_esm__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! date-fns/esm */ \"./node_modules/date-fns/esm/addMilliseconds/index.js\");\n/* harmony import */ var date_fns_esm__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! date-fns/esm */ \"./node_modules/date-fns/esm/startOfToday/index.js\");\n/* harmony import */ var date_fns_esm__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! date-fns/esm */ \"./node_modules/date-fns/esm/startOfYesterday/index.js\");\n/* harmony import */ var date_fns_esm__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! date-fns/esm */ \"./node_modules/date-fns/esm/endOfToday/index.js\");\n/* harmony import */ var date_fns_esm__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! date-fns/esm */ \"./node_modules/date-fns/esm/endOfYesterday/index.js\");\n/* harmony import */ var date_fns_esm__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! date-fns/esm */ \"./node_modules/date-fns/esm/addHours/index.js\");\n/* harmony import */ var home_assistant_js_websocket__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! home-assistant-js-websocket */ \"./node_modules/home-assistant-js-websocket/dist/collection.js\");\n/* harmony import */ var _common_util_group_by__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/util/group-by */ \"./src/common/util/group-by.ts\");\n/* harmony import */ var _config_entries__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config_entries */ \"./src/data/config_entries.ts\");\n/* harmony import */ var _recorder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./recorder */ \"./src/data/recorder.ts\");\n\n\n\n\n\nconst energyCollectionKeys = [];\nconst emptyFlowFromGridSourceEnergyPreference = () => ({\n  stat_energy_from: \"\",\n  stat_cost: null,\n  entity_energy_price: null,\n  number_energy_price: null\n});\nconst emptyFlowToGridSourceEnergyPreference = () => ({\n  stat_energy_to: \"\",\n  stat_compensation: null,\n  entity_energy_price: null,\n  number_energy_price: null\n});\nconst emptyGridSourceEnergyPreference = () => ({\n  type: \"grid\",\n  flow_from: [],\n  flow_to: [],\n  cost_adjustment_day: 0\n});\nconst emptySolarEnergyPreference = () => ({\n  type: \"solar\",\n  stat_energy_from: \"\",\n  config_entry_solar_forecast: null\n});\nconst emptyBatteryEnergyPreference = () => ({\n  type: \"battery\",\n  stat_energy_from: \"\",\n  stat_energy_to: \"\"\n});\nconst emptyGasEnergyPreference = () => ({\n  type: \"gas\",\n  stat_energy_from: \"\",\n  stat_cost: null,\n  entity_energy_price: null,\n  number_energy_price: null\n});\nconst emptyWaterEnergyPreference = () => ({\n  type: \"water\",\n  stat_energy_from: \"\",\n  stat_cost: null,\n  entity_energy_price: null,\n  number_energy_price: null\n});\nconst getEnergyInfo = hass => hass.callWS({\n  type: \"energy/info\"\n});\nconst getEnergyPreferenceValidation = async hass => {\n  await hass.loadBackendTranslation(\"issues\", \"energy\");\n  return hass.callWS({\n    type: \"energy/validate\"\n  });\n};\nconst getEnergyPreferences = hass => hass.callWS({\n  type: \"energy/get_prefs\"\n});\nconst saveEnergyPreferences = async (hass, prefs) => {\n  const newPrefs = hass.callWS({\n    type: \"energy/save_prefs\",\n    ...prefs\n  });\n  clearEnergyCollectionPreferences(hass);\n  return newPrefs;\n};\nconst getFossilEnergyConsumption = async (hass, startTime, energy_statistic_ids, co2_statistic_id, endTime, period = \"hour\") => hass.callWS({\n  type: \"energy/fossil_energy_consumption\",\n  start_time: startTime.toISOString(),\n  end_time: endTime === null || endTime === void 0 ? void 0 : endTime.toISOString(),\n  energy_statistic_ids,\n  co2_statistic_id,\n  period\n});\nconst energySourcesByType = prefs => (0,_common_util_group_by__WEBPACK_IMPORTED_MODULE_0__.groupBy)(prefs.energy_sources, item => item.type);\nconst getReferencedStatisticIds = (prefs, info, includeTypes) => {\n  const statIDs = [];\n  for (const source of prefs.energy_sources) {\n    if (includeTypes && !includeTypes.includes(source.type)) {\n      continue;\n    }\n    if (source.type === \"solar\") {\n      statIDs.push(source.stat_energy_from);\n      continue;\n    }\n    if (source.type === \"gas\" || source.type === \"water\") {\n      statIDs.push(source.stat_energy_from);\n      if (source.stat_cost) {\n        statIDs.push(source.stat_cost);\n      }\n      const costStatId = info.cost_sensors[source.stat_energy_from];\n      if (costStatId) {\n        statIDs.push(costStatId);\n      }\n      continue;\n    }\n    if (source.type === \"battery\") {\n      statIDs.push(source.stat_energy_from);\n      statIDs.push(source.stat_energy_to);\n      continue;\n    }\n\n    // grid source\n    for (const flowFrom of source.flow_from) {\n      statIDs.push(flowFrom.stat_energy_from);\n      if (flowFrom.stat_cost) {\n        statIDs.push(flowFrom.stat_cost);\n      }\n      const costStatId = info.cost_sensors[flowFrom.stat_energy_from];\n      if (costStatId) {\n        statIDs.push(costStatId);\n      }\n    }\n    for (const flowTo of source.flow_to) {\n      statIDs.push(flowTo.stat_energy_to);\n      if (flowTo.stat_compensation) {\n        statIDs.push(flowTo.stat_compensation);\n      }\n      const costStatId = info.cost_sensors[flowTo.stat_energy_to];\n      if (costStatId) {\n        statIDs.push(costStatId);\n      }\n    }\n  }\n  return statIDs;\n};\nconst getEnergyData = async (hass, prefs, start, end, compare) => {\n  const [configEntries, info] = await Promise.all([(0,_config_entries__WEBPACK_IMPORTED_MODULE_1__.getConfigEntries)(hass, {\n    domain: \"co2signal\"\n  }), getEnergyInfo(hass)]);\n  const co2SignalConfigEntry = configEntries.length ? configEntries[0] : undefined;\n  let co2SignalEntity;\n  if (co2SignalConfigEntry) {\n    for (const entity of Object.values(hass.entities)) {\n      if (entity.platform !== \"co2signal\") {\n        continue;\n      }\n\n      // The integration offers 2 entities. We want the % one.\n      const co2State = hass.states[entity.entity_id];\n      if (!co2State || co2State.attributes.unit_of_measurement !== \"%\") {\n        continue;\n      }\n      co2SignalEntity = co2State.entity_id;\n      break;\n    }\n  }\n  const consumptionStatIDs = [];\n  for (const source of prefs.energy_sources) {\n    // grid source\n    if (source.type === \"grid\") {\n      for (const flowFrom of source.flow_from) {\n        consumptionStatIDs.push(flowFrom.stat_energy_from);\n      }\n    }\n  }\n  const energyStatIds = getReferencedStatisticIds(prefs, info, [\"grid\", \"solar\", \"battery\", \"gas\"]);\n  const waterStatIds = getReferencedStatisticIds(prefs, info, [\"water\"]);\n  const allStatIDs = [...energyStatIds, ...waterStatIds];\n  const dayDifference = (0,date_fns_esm__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(end || new Date(), start);\n  const period = dayDifference > 35 ? \"month\" : dayDifference > 2 ? \"day\" : \"hour\";\n  const lengthUnit = hass.config.unit_system.length || \"\";\n  const energyUnits = {\n    energy: \"kWh\",\n    volume: lengthUnit === \"km\" ? \"m³\" : \"ft³\"\n  };\n  const waterUnits = {\n    volume: lengthUnit === \"km\" ? \"L\" : \"gal\"\n  };\n  const _energyStats = energyStatIds.length ? (0,_recorder__WEBPACK_IMPORTED_MODULE_2__.fetchStatistics)(hass, start, end, energyStatIds, period, energyUnits, [\"change\"]) : {};\n  const _waterStats = waterStatIds.length ? (0,_recorder__WEBPACK_IMPORTED_MODULE_2__.fetchStatistics)(hass, start, end, waterStatIds, period, waterUnits, [\"change\"]) : {};\n  let statsCompare;\n  let startCompare;\n  let endCompare;\n  let _energyStatsCompare = {};\n  let _waterStatsCompare = {};\n  if (compare) {\n    if (dayDifference > 27 && dayDifference < 32) {\n      // When comparing a month, we want to start at the begining of the month\n      startCompare = (0,date_fns_esm__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(start, -1);\n    } else {\n      startCompare = (0,date_fns_esm__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(start, (dayDifference + 1) * -1);\n    }\n    endCompare = (0,date_fns_esm__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(start, -1);\n    if (energyStatIds.length) {\n      _energyStatsCompare = (0,_recorder__WEBPACK_IMPORTED_MODULE_2__.fetchStatistics)(hass, startCompare, endCompare, energyStatIds, period, energyUnits, [\"change\"]);\n    }\n    if (waterStatIds.length) {\n      _waterStatsCompare = (0,_recorder__WEBPACK_IMPORTED_MODULE_2__.fetchStatistics)(hass, startCompare, endCompare, waterStatIds, period, waterUnits, [\"change\"]);\n    }\n  }\n  let _fossilEnergyConsumption;\n  let _fossilEnergyConsumptionCompare;\n  if (co2SignalEntity !== undefined) {\n    _fossilEnergyConsumption = getFossilEnergyConsumption(hass, start, consumptionStatIDs, co2SignalEntity, end, dayDifference > 35 ? \"month\" : dayDifference > 2 ? \"day\" : \"hour\");\n    if (compare) {\n      _fossilEnergyConsumptionCompare = getFossilEnergyConsumption(hass, startCompare, consumptionStatIDs, co2SignalEntity, endCompare, dayDifference > 35 ? \"month\" : dayDifference > 2 ? \"day\" : \"hour\");\n    }\n  }\n  const statsMetadata = {};\n  const _getStatisticMetadata = allStatIDs.length ? (0,_recorder__WEBPACK_IMPORTED_MODULE_2__.getStatisticMetadata)(hass, allStatIDs) : [];\n  const [energyStats, waterStats, energyStatsCompare, waterStatsCompare, statsMetadataArray, fossilEnergyConsumption, fossilEnergyConsumptionCompare] = await Promise.all([_energyStats, _waterStats, _energyStatsCompare, _waterStatsCompare, _getStatisticMetadata, _fossilEnergyConsumption, _fossilEnergyConsumptionCompare]);\n  const stats = {\n    ...energyStats,\n    ...waterStats\n  };\n  if (compare) {\n    statsCompare = {\n      ...energyStatsCompare,\n      ...waterStatsCompare\n    };\n  }\n  if (allStatIDs.length) {\n    statsMetadataArray.forEach(x => {\n      statsMetadata[x.statistic_id] = x;\n    });\n  }\n  const data = {\n    start,\n    end,\n    startCompare,\n    endCompare,\n    info,\n    prefs,\n    stats,\n    statsMetadata,\n    statsCompare,\n    co2SignalConfigEntry,\n    co2SignalEntity,\n    fossilEnergyConsumption,\n    fossilEnergyConsumptionCompare\n  };\n  return data;\n};\nconst clearEnergyCollectionPreferences = hass => {\n  energyCollectionKeys.forEach(key => {\n    const energyCollection = getEnergyDataCollection(hass, {\n      key\n    });\n    energyCollection.clearPrefs();\n    if (energyCollection._active) {\n      energyCollection.refresh();\n    }\n  });\n};\nconst getEnergyDataCollection = (hass, options = {}) => {\n  let key = \"_energy\";\n  if (options.key) {\n    if (!options.key.startsWith(\"energy_\")) {\n      throw new Error(\"Key need to start with energy_\");\n    }\n    key = `_${options.key}`;\n  }\n  if (hass.connection[key]) {\n    return hass.connection[key];\n  }\n  energyCollectionKeys.push(options.key);\n  const collection = (0,home_assistant_js_websocket__WEBPACK_IMPORTED_MODULE_7__.getCollection)(hass.connection, key, async () => {\n    if (!collection.prefs) {\n      // This will raise if not found.\n      // Detect by checking `e.code === \"not_found\"\n      collection.prefs = await getEnergyPreferences(hass);\n    }\n    if (collection._refreshTimeout) {\n      clearTimeout(collection._refreshTimeout);\n    }\n    if (collection._active && (!collection.end || collection.end > new Date())) {\n      // The stats are created every hour\n      // Schedule a refresh for 20 minutes past the hour\n      // If the end is larger than the current time.\n      const nextFetch = new Date();\n      if (nextFetch.getMinutes() >= 20) {\n        nextFetch.setHours(nextFetch.getHours() + 1);\n      }\n      nextFetch.setMinutes(20, 0, 0);\n      collection._refreshTimeout = window.setTimeout(() => collection.refresh(), nextFetch.getTime() - Date.now());\n    }\n    return getEnergyData(hass, collection.prefs, collection.start, collection.end, collection.compare);\n  });\n  const origSubscribe = collection.subscribe;\n  collection.subscribe = subscriber => {\n    const unsub = origSubscribe(subscriber);\n    collection._active++;\n    return () => {\n      collection._active--;\n      if (collection._active < 1) {\n        clearTimeout(collection._refreshTimeout);\n        collection._refreshTimeout = undefined;\n      }\n      unsub();\n    };\n  };\n  collection._active = 0;\n  collection.prefs = options.prefs;\n  const now = new Date();\n  // Set start to start of today if we have data for today, otherwise yesterday\n  collection.start = now.getHours() > 0 ? (0,date_fns_esm__WEBPACK_IMPORTED_MODULE_8__[\"default\"])() : (0,date_fns_esm__WEBPACK_IMPORTED_MODULE_9__[\"default\"])();\n  collection.end = now.getHours() > 0 ? (0,date_fns_esm__WEBPACK_IMPORTED_MODULE_10__[\"default\"])() : (0,date_fns_esm__WEBPACK_IMPORTED_MODULE_11__[\"default\"])();\n  const scheduleUpdatePeriod = () => {\n    collection._updatePeriodTimeout = window.setTimeout(() => {\n      collection.start = (0,date_fns_esm__WEBPACK_IMPORTED_MODULE_8__[\"default\"])();\n      collection.end = (0,date_fns_esm__WEBPACK_IMPORTED_MODULE_10__[\"default\"])();\n      scheduleUpdatePeriod();\n    }, (0,date_fns_esm__WEBPACK_IMPORTED_MODULE_12__[\"default\"])((0,date_fns_esm__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(), 1).getTime() - Date.now() // Switch to next day an hour after the day changed\n    );\n  };\n\n  scheduleUpdatePeriod();\n  collection.clearPrefs = () => {\n    collection.prefs = undefined;\n  };\n  collection.setPeriod = (newStart, newEnd) => {\n    var _collection$end;\n    collection.start = newStart;\n    collection.end = newEnd;\n    if (collection.start.getTime() === (0,date_fns_esm__WEBPACK_IMPORTED_MODULE_8__[\"default\"])().getTime() && ((_collection$end = collection.end) === null || _collection$end === void 0 ? void 0 : _collection$end.getTime()) === (0,date_fns_esm__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().getTime() && !collection._updatePeriodTimeout) {\n      scheduleUpdatePeriod();\n    } else if (collection._updatePeriodTimeout) {\n      clearTimeout(collection._updatePeriodTimeout);\n      collection._updatePeriodTimeout = undefined;\n    }\n  };\n  collection.setCompare = compare => {\n    collection.compare = compare;\n  };\n  return collection;\n};\nconst getEnergySolarForecasts = hass => hass.callWS({\n  type: \"energy/solar_forecast\"\n});\nconst energyGasUnitClass = [\"volume\", \"energy\"];\nconst getEnergyGasUnitClass = (prefs, statisticsMetaData = {}, excludeSource) => {\n  for (const source of prefs.energy_sources) {\n    if (source.type !== \"gas\") {\n      continue;\n    }\n    if (excludeSource && excludeSource === source.stat_energy_from) {\n      continue;\n    }\n    const statisticIdWithMeta = statisticsMetaData[source.stat_energy_from];\n    if (energyGasUnitClass.includes(statisticIdWithMeta === null || statisticIdWithMeta === void 0 ? void 0 : statisticIdWithMeta.unit_class)) {\n      return statisticIdWithMeta.unit_class;\n    }\n  }\n  return undefined;\n};\nconst getEnergyGasUnit = (hass, prefs, statisticsMetaData = {}) => {\n  const unitClass = getEnergyGasUnitClass(prefs, statisticsMetaData);\n  if (unitClass === undefined) {\n    return undefined;\n  }\n  return unitClass === \"energy\" ? \"kWh\" : hass.config.unit_system.length === \"km\" ? \"m³\" : \"ft³\";\n};\nconst getEnergyWaterUnit = hass => hass.config.unit_system.length === \"km\" ? \"L\" : \"gal\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/data/energy.ts\n");

/***/ })

}]);