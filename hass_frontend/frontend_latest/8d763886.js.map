{"version":3,"file":"8d763886.js","mappings":";;;;AAMA;ACYA;AACA;AALA;;;AC8FA;AACA;;AAEA;;;;;;;AAOA;;;;;;AAQA;AACA;;AAEA;;;AAGA;AAYA;;;AAIA;;AAIA;;AAEA;;AAGA;;AAKA;AACA;;;AAGA;;;AAKA;;;AAKA;;;AAIA;AAGA;;;AAKA;AACA;;;AAGA;AAIA;AACA;;AAEA;AAIA;AACA;;;AAGA;AACA;;AAEA;;AAGA;;;AAKA;;;;AAMA;;AAEA;;AAIA;AAEA;;AAGA;AACA;;;AAGA;AACA;;;;;AA9LA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACXA;;AAEA;AACA;;;;;AAOA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AAlCA;ACgCA;AAGA;AAGA;;;AAYA;;AAEA;AACA;;;;;;;;AAUA;AACA;AACA;AACA;;AAEA;AAEA;AAhCA;;;AAKA;;AA4BA;AA3CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA9BA","sources":["webpack://home-assistant-frontend/./src/components/ha-circular-progress.ts","webpack://home-assistant-frontend/./src/dialogs/more-info/controls/more-info-default.ts","webpack://home-assistant-frontend/./src/dialogs/more-info/ha-more-info-dialog.ts","webpack://home-assistant-frontend/./src/dialogs/more-info/ha-more-info-history.ts","webpack://home-assistant-frontend/./src/dialogs/more-info/ha-more-info-logbook.ts"],"sourcesContent":["import { CircularProgress } from \"@material/mwc-circular-progress\";\nimport { CSSResultGroup, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-circular-progress\")\n// @ts-ignore\nexport class HaCircularProgress extends CircularProgress {\n  @property({ type: Boolean })\n  public active = false;\n\n  @property()\n  public alt = \"Loading\";\n\n  @property()\n  public size: \"tiny\" | \"small\" | \"medium\" | \"large\" = \"medium\";\n\n  // @ts-ignore\n  public set density(_) {\n    // just a dummy\n  }\n\n  public get density() {\n    switch (this.size) {\n      case \"tiny\":\n        return -8;\n      case \"small\":\n        return -5;\n      case \"medium\":\n        return 0;\n      case \"large\":\n        return 5;\n      default:\n        return 0;\n    }\n  }\n\n  // @ts-ignore\n  public set indeterminate(_) {\n    // just a dummy\n  }\n\n  public get indeterminate() {\n    return this.active;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      super.styles,\n      css`\n        :host {\n          overflow: hidden;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-circular-progress\": HaCircularProgress;\n  }\n}\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../../../components/ha-attributes\";\nimport { HomeAssistant } from \"../../../types\";\n\n@customElement(\"more-info-default\")\nclass MoreInfoDefault extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public stateObj?: HassEntity;\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this.stateObj) {\n      return html``;\n    }\n\n    return html`<ha-attributes\n      .hass=${this.hass}\n      .stateObj=${this.stateObj}\n    ></ha-attributes>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"more-info-default\": MoreInfoDefault;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@material/mwc-tab\";\nimport \"@material/mwc-tab-bar\";\nimport { mdiClose, mdiCog, mdiPencil } from \"@mdi/js\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { cache } from \"lit/directives/cache\";\nimport { isComponentLoaded } from \"../../common/config/is_component_loaded\";\nimport {\n  DOMAINS_MORE_INFO_NO_HISTORY,\n  DOMAINS_WITH_MORE_INFO,\n} from \"../../common/const\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeDomain } from \"../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../common/entity/compute_state_name\";\nimport { navigate } from \"../../common/navigate\";\nimport \"../../components/ha-dialog\";\nimport \"../../components/ha-header-bar\";\nimport \"../../components/ha-icon-button\";\nimport { removeEntityRegistryEntry } from \"../../data/entity_registry\";\nimport { CONTINUOUS_DOMAINS } from \"../../data/logbook\";\nimport { showEntityEditorDialog } from \"../../panels/config/entities/show-dialog-entity-editor\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport \"../../state-summary/state-card-content\";\nimport { HomeAssistant } from \"../../types\";\nimport { showConfirmationDialog } from \"../generic/show-dialog-box\";\nimport { replaceDialog } from \"../make-dialog-manager\";\nimport \"./controls/more-info-default\";\nimport \"./ha-more-info-history\";\nimport \"./ha-more-info-logbook\";\nimport \"./more-info-content\";\n\nimport { weatherStateIsImage } from \"../../data/weather\"; // IoB\n\nconst DOMAINS_NO_INFO = [\"camera\", \"configurator\", \"weather\"]; // IoB added weather, because state is URL which would be printed here. So leave it out.\n/**\n * Entity domains that should be editable *if* they have an id present;\n * {@see shouldShowEditIcon}.\n * */\nconst EDITABLE_DOMAINS_WITH_ID = [\"scene\", \"automation\"];\n/**\n * Entity Domains that should always be editable; {@see shouldShowEditIcon}.\n * */\nconst EDITABLE_DOMAINS = [\"script\"];\n\nexport interface MoreInfoDialogParams {\n  entityId: string | null;\n}\n\n@customElement(\"ha-more-info-dialog\")\nexport class MoreInfoDialog extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true }) public large = false;\n\n  @state() private _entityId?: string | null;\n\n  @state() private _currTabIndex = 0;\n\n  public showDialog(params: MoreInfoDialogParams) {\n    this._entityId = params.entityId;\n    if (!this._entityId) {\n      this.closeDialog();\n      return;\n    }\n    this.large = false;\n  }\n\n  public closeDialog() {\n    this._entityId = undefined;\n    this._currTabIndex = 0;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected shouldShowEditIcon(domain, stateObj): boolean {\n    if (__DEMO__) {\n      return false;\n    }\n    if (EDITABLE_DOMAINS_WITH_ID.includes(domain) && stateObj.attributes.id) {\n      return true;\n    }\n    if (EDITABLE_DOMAINS.includes(domain)) {\n      return true;\n    }\n    if (domain === \"person\" && stateObj.attributes.editable !== \"false\") {\n      return true;\n    }\n\n    return false;\n  }\n\n  protected render() {\n    if (!this._entityId) {\n      return html``;\n    }\n    const entityId = this._entityId;\n    const stateObj = this.hass.states[entityId];\n\n    if (!stateObj) {\n      return html``;\n    }\n\n    const domain = computeDomain(entityId);\n    const name = computeStateName(stateObj);\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${true}\n        hideActions\n        data-domain=${domain}\n      >\n        <div slot=\"heading\" class=\"heading\">\n          <ha-header-bar>\n            <ha-icon-button\n              slot=\"navigationIcon\"\n              dialogAction=\"cancel\"\n              .label=${this.hass.localize(\n                \"ui.dialogs.more_info_control.dismiss\"\n              )}\n              .path=${mdiClose}\n            ></ha-icon-button>\n            <div\n              slot=\"title\"\n              class=\"main-title\"\n              .title=${name}\n              @click=${this._enlarge}\n            >\n              ${name}\n            </div>\n            <!-- entity settings in more_info deactivated for IoB -->\n            ${false && this.hass.user!.is_admin\n              ? html`\n                  <ha-icon-button\n                    slot=\"actionItems\"\n                    .label=${this.hass.localize(\n                      \"ui.dialogs.more_info_control.settings\"\n                    )}\n                    .path=${mdiCog}\n                    @click=${this._gotoSettings}\n                  ></ha-icon-button>\n                `\n              : \"\"}\n            ${this.shouldShowEditIcon(domain, stateObj)\n              ? html`\n                  <ha-icon-button\n                    slot=\"actionItems\"\n                    .label=${this.hass.localize(\n                      \"ui.dialogs.more_info_control.edit\"\n                    )}\n                    .path=${mdiPencil}\n                    @click=${this._gotoEdit}\n                  ></ha-icon-button>\n                `\n              : \"\"}\n          </ha-header-bar>\n          ${DOMAINS_WITH_MORE_INFO.includes(domain) &&\n          (this._computeShowHistoryComponent(entityId) ||\n            this._computeShowLogBookComponent(entityId))\n            ? html`\n                <mwc-tab-bar\n                  .activeIndex=${this._currTabIndex}\n                  @MDCTabBar:activated=${this._handleTabChanged}\n                >\n                  <mwc-tab\n                    .label=${this.hass.localize(\n                      \"ui.dialogs.more_info_control.details\"\n                    )}\n                  ></mwc-tab>\n                  <mwc-tab\n                    .label=${this.hass.localize(\n                      \"ui.dialogs.more_info_control.history\"\n                    )}\n                  ></mwc-tab>\n                </mwc-tab-bar>\n              `\n            : \"\"}\n        </div>\n        <div class=\"content\">\n          ${cache(\n            this._currTabIndex === 0\n              ? html`\n                  ${DOMAINS_NO_INFO.includes(domain)\n                    ? \"\"\n                    : html`\n                        <state-card-content\n                          in-dialog\n                          .stateObj=${stateObj}\n                          .hass=${this.hass}\n                        ></state-card-content>\n                      `}\n                  ${DOMAINS_WITH_MORE_INFO.includes(domain) ||\n                  !this._computeShowHistoryComponent(entityId)\n                    ? \"\"\n                    : html`<ha-more-info-history\n                        .hass=${this.hass}\n                        .entityId=${this._entityId}\n                      ></ha-more-info-history>`}\n                  ${DOMAINS_WITH_MORE_INFO.includes(domain) ||\n                  !this._computeShowLogBookComponent(entityId)\n                    ? \"\"\n                    : html`<ha-more-info-logbook\n                        .hass=${this.hass}\n                        .entityId=${this._entityId}\n                      ></ha-more-info-logbook>`}\n                  <more-info-content\n                    .stateObj=${stateObj}\n                    .hass=${this.hass}\n                  ></more-info-content>\n                  ${stateObj.attributes.restored\n                    ? html`\n                        <p>\n                          ${this.hass.localize(\n                            \"ui.dialogs.more_info_control.restored.not_provided\"\n                          )}\n                        </p>\n                        <p>\n                          ${this.hass.localize(\n                            \"ui.dialogs.more_info_control.restored.remove_intro\"\n                          )}\n                        </p>\n                        <mwc-button\n                          class=\"warning\"\n                          @click=${this._removeEntity}\n                        >\n                          ${this.hass.localize(\n                            \"ui.dialogs.more_info_control.restored.remove_action\"\n                          )}\n                        </mwc-button>\n                      `\n                    : \"\"}\n                `\n              : html`\n                  <ha-more-info-history\n                    .hass=${this.hass}\n                    .entityId=${this._entityId}\n                  ></ha-more-info-history>\n                  <ha-more-info-logbook\n                    .hass=${this.hass}\n                    .entityId=${this._entityId}\n                  ></ha-more-info-logbook>\n                `\n          )}\n        </div>\n      </ha-dialog>\n    `;\n  }\n\n  private _enlarge() {\n    this.large = !this.large;\n  }\n\n  private _computeShowHistoryComponent(entityId) {\n    // IoB prevent history for weahter:\n    const domain = computeDomain(entityId);\n    if (domain === \"weather\") {\n      const stateObj = this.hass.states[entityId];\n      if (stateObj && weatherStateIsImage(stateObj.state)) {\n        return false;\n      }\n    }\n    return (\n      isComponentLoaded(this.hass, \"history\") &&\n      !DOMAINS_MORE_INFO_NO_HISTORY.includes(domain)\n    );\n  }\n\n  private _computeShowLogBookComponent(entityId): boolean {\n    if (!isComponentLoaded(this.hass, \"logbook\")) {\n      return false;\n    }\n\n    const stateObj = this.hass.states[entityId];\n    if (!stateObj || stateObj.attributes.unit_of_measurement) {\n      return false;\n    }\n\n    const domain = computeDomain(entityId);\n    if (\n      CONTINUOUS_DOMAINS.includes(domain) ||\n      DOMAINS_MORE_INFO_NO_HISTORY.includes(domain)\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n\n  private _removeEntity() {\n    const entityId = this._entityId!;\n    showConfirmationDialog(this, {\n      title: this.hass.localize(\n        \"ui.dialogs.more_info_control.restored.confirm_remove_title\"\n      ),\n      text: this.hass.localize(\n        \"ui.dialogs.more_info_control.restored.confirm_remove_text\"\n      ),\n      confirmText: this.hass.localize(\"ui.common.remove\"),\n      dismissText: this.hass.localize(\"ui.common.cancel\"),\n      confirm: () => {\n        removeEntityRegistryEntry(this.hass, entityId);\n      },\n    });\n  }\n\n  private _gotoSettings() {\n    replaceDialog();\n    showEntityEditorDialog(this, {\n      entity_id: this._entityId!,\n    });\n    this.closeDialog();\n  }\n\n  private _gotoEdit() {\n    const stateObj = this.hass.states[this._entityId!];\n    const domain = computeDomain(this._entityId!);\n    let idToPassThroughUrl = stateObj.entity_id;\n    if (EDITABLE_DOMAINS_WITH_ID.includes(domain) || domain === \"person\") {\n      idToPassThroughUrl = stateObj.attributes.id;\n    }\n\n    navigate(`/config/${domain}/edit/${idToPassThroughUrl}`);\n    this.closeDialog();\n  }\n\n  private _handleTabChanged(ev: CustomEvent): void {\n    const newTab = ev.detail.index;\n    if (newTab === this._currTabIndex) {\n      return;\n    }\n\n    this._currTabIndex = ev.detail.index;\n  }\n\n  static get styles() {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --dialog-surface-position: static;\n          --dialog-content-position: static;\n        }\n\n        ha-header-bar {\n          --mdc-theme-on-primary: var(--primary-text-color);\n          --mdc-theme-primary: var(--mdc-theme-surface);\n          flex-shrink: 0;\n          display: block;\n        }\n\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          ha-header-bar {\n            --mdc-theme-primary: var(--app-header-background-color);\n            --mdc-theme-on-primary: var(--app-header-text-color, white);\n            border-bottom: none;\n          }\n        }\n\n        .heading {\n          border-bottom: 1px solid\n            var(--mdc-dialog-scroll-divider-color, rgba(0, 0, 0, 0.12));\n        }\n\n        @media all and (min-width: 451px) and (min-height: 501px) {\n          ha-dialog {\n            --mdc-dialog-max-width: 90vw;\n          }\n\n          .content {\n            width: 352px;\n          }\n\n          ha-header-bar {\n            width: 400px;\n          }\n\n          .main-title {\n            overflow: hidden;\n            text-overflow: ellipsis;\n            cursor: default;\n          }\n\n          ha-dialog[data-domain=\"camera\"] .content,\n          ha-dialog[data-domain=\"camera\"] ha-header-bar {\n            width: auto;\n          }\n\n          :host([large]) .content {\n            width: calc(90vw - 48px);\n          }\n\n          :host([large]) ha-dialog[data-domain=\"camera\"] .content,\n          :host([large]) ha-header-bar {\n            width: 90vw;\n          }\n        }\n\n        ha-dialog[data-domain=\"camera\"] {\n          --dialog-content-padding: 0;\n        }\n\n        state-card-content,\n        ha-more-info-history,\n        ha-more-info-logbook:not(:last-child) {\n          display: block;\n          margin-bottom: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-more-info-dialog\": MoreInfoDialog;\n  }\n}\n","import { startOfYesterday } from \"date-fns\";\nimport { css, html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../common/config/is_component_loaded\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { throttle } from \"../../common/util/throttle\";\nimport \"../../components/chart/state-history-charts\";\nimport { getRecentWithCache } from \"../../data/cached-history\";\nimport { HistoryResult } from \"../../data/history\";\nimport { HomeAssistant } from \"../../types\";\n\ndeclare global {\n  interface HASSDomEvents {\n    closed: undefined;\n  }\n}\n\n@customElement(\"ha-more-info-history\")\nexport class MoreInfoHistory extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public entityId!: string;\n\n  @state() private _stateHistory?: HistoryResult;\n\n  private _showMoreHref = \"\";\n\n  private _throttleGetStateHistory = throttle(() => {\n    this._getStateHistory();\n  }, 10000);\n\n  protected render(): TemplateResult {\n    if (!this.entityId) {\n      return html``;\n    }\n\n    return html`${isComponentLoaded(this.hass, \"history\")\n      ? html` <div class=\"header\">\n            <div class=\"title\">\n              ${this.hass.localize(\"ui.dialogs.more_info_control.history\")}\n            </div>\n            <a href=${this._showMoreHref} @click=${this._close}\n              >${this.hass.localize(\n                \"ui.dialogs.more_info_control.show_more\"\n              )}</a\n            >\n          </div>\n          <state-history-charts\n            up-to-now\n            .hass=${this.hass}\n            .historyData=${this._stateHistory}\n            .isLoadingData=${!this._stateHistory}\n          ></state-history-charts>`\n      : \"\"}`;\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n\n    if (changedProps.has(\"entityId\")) {\n      this._stateHistory = undefined;\n\n      if (!this.entityId) {\n        return;\n      }\n\n      this._showMoreHref = `/history?entity_id=${\n        this.entityId\n      }&start_date=${startOfYesterday().toISOString()}`;\n\n      this._throttleGetStateHistory();\n      return;\n    }\n\n    if (!this.entityId || !changedProps.has(\"hass\")) {\n      return;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n\n    if (\n      oldHass &&\n      this.hass.states[this.entityId] !== oldHass?.states[this.entityId]\n    ) {\n      // wait for commit of data (we only account for the default setting of 1 sec)\n      setTimeout(this._throttleGetStateHistory, 1000);\n    }\n  }\n\n  private async _getStateHistory(): Promise<void> {\n    if (!isComponentLoaded(this.hass, \"history\")) {\n      return;\n    }\n    this._stateHistory = await getRecentWithCache(\n      this.hass!,\n      this.entityId,\n      {\n        cacheKey: `more_info.${this.entityId}`,\n        hoursToShow: 24,\n      },\n      this.hass!.localize,\n      this.hass!.language\n    );\n  }\n\n  private _close(): void {\n    setTimeout(() => fireEvent(this, \"closed\"), 500);\n  }\n\n  static get styles() {\n    return [\n      css`\n        .header {\n          display: flex;\n          flex-direction: row;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 8px;\n        }\n        .header > a,\n        a:visited {\n          color: var(--primary-color);\n        }\n        .title {\n          font-family: var(--paper-font-title_-_font-family);\n          -webkit-font-smoothing: var(\n            --paper-font-title_-_-webkit-font-smoothing\n          );\n          font-size: var(--paper-font-subhead_-_font-size);\n          font-weight: var(--paper-font-title_-_font-weight);\n          letter-spacing: var(--paper-font-title_-_letter-spacing);\n          line-height: var(--paper-font-title_-_line-height);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-more-info-history\": MoreInfoHistory;\n  }\n}\n","import { startOfYesterday } from \"date-fns\";\nimport { css, html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../common/config/is_component_loaded\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeStateDomain } from \"../../common/entity/compute_state_domain\";\nimport { throttle } from \"../../common/util/throttle\";\nimport \"../../components/ha-circular-progress\";\nimport { getLogbookData, LogbookEntry } from \"../../data/logbook\";\nimport { loadTraceContexts, TraceContexts } from \"../../data/trace\";\nimport { fetchUsers } from \"../../data/user\";\nimport \"../../panels/logbook/ha-logbook\";\nimport { haStyle } from \"../../resources/styles\";\nimport { HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-more-info-logbook\")\nexport class MoreInfoLogbook extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public entityId!: string;\n\n  @state() private _logbookEntries?: LogbookEntry[];\n\n  @state() private _traceContexts?: TraceContexts;\n\n  @state() private _userIdToName = {};\n\n  private _lastLogbookDate?: Date;\n\n  private _fetchUserPromise?: Promise<void>;\n\n  private _error?: string;\n\n  private _showMoreHref = \"\";\n\n  private _throttleGetLogbookEntries = throttle(() => {\n    this._getLogBookData();\n  }, 10000);\n\n  protected render(): TemplateResult {\n    if (!this.entityId) {\n      return html``;\n    }\n    const stateObj = this.hass.states[this.entityId];\n\n    if (!stateObj) {\n      return html``;\n    }\n\n    return html`\n      ${isComponentLoaded(this.hass, \"logbook\")\n        ? this._error\n          ? html`<div class=\"no-entries\">\n              ${`${this.hass.localize(\n                \"ui.components.logbook.retrieval_error\"\n              )}: ${this._error}`}\n            </div>`\n          : !this._logbookEntries\n          ? html`\n              <ha-circular-progress\n                active\n                alt=${this.hass.localize(\"ui.common.loading\")}\n              ></ha-circular-progress>\n            `\n          : this._logbookEntries.length\n          ? html`\n              <div class=\"header\">\n                <div class=\"title\">\n                  ${this.hass.localize(\"ui.dialogs.more_info_control.logbook\")}\n                </div>\n                <a href=${this._showMoreHref} @click=${this._close}\n                  >${this.hass.localize(\n                    \"ui.dialogs.more_info_control.show_more\"\n                  )}</a\n                >\n              </div>\n              <ha-logbook\n                narrow\n                no-icon\n                no-name\n                relative-time\n                .hass=${this.hass}\n                .entries=${this._logbookEntries}\n                .traceContexts=${this._traceContexts}\n                .userIdToName=${this._userIdToName}\n              ></ha-logbook>\n            `\n          : html`<div class=\"no-entries\">\n              ${this.hass.localize(\"ui.components.logbook.entries_not_found\")}\n            </div>`\n        : \"\"}\n    `;\n  }\n\n  protected firstUpdated(): void {\n    this._fetchUserPromise = this._fetchUserNames();\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n\n    if (changedProps.has(\"entityId\")) {\n      this._lastLogbookDate = undefined;\n      this._logbookEntries = undefined;\n\n      if (!this.entityId) {\n        return;\n      }\n\n      this._showMoreHref = `/logbook?entity_id=${\n        this.entityId\n      }&start_date=${startOfYesterday().toISOString()}`;\n\n      this._throttleGetLogbookEntries();\n      return;\n    }\n\n    if (!this.entityId || !changedProps.has(\"hass\")) {\n      return;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n\n    if (\n      oldHass &&\n      this.hass.states[this.entityId] !== oldHass?.states[this.entityId]\n    ) {\n      // wait for commit of data (we only account for the default setting of 1 sec)\n      setTimeout(this._throttleGetLogbookEntries, 1000);\n    }\n  }\n\n  private async _getLogBookData() {\n    if (!isComponentLoaded(this.hass, \"logbook\")) {\n      return;\n    }\n    const lastDate =\n      this._lastLogbookDate ||\n      new Date(new Date().getTime() - 24 * 60 * 60 * 1000);\n    const now = new Date();\n    let newEntries;\n    let traceContexts;\n\n    try {\n      [newEntries, traceContexts] = await Promise.all([\n        getLogbookData(\n          this.hass,\n          lastDate.toISOString(),\n          now.toISOString(),\n          this.entityId,\n          true\n        ),\n        this.hass.user?.is_admin ? loadTraceContexts(this.hass) : {},\n        this._fetchUserPromise,\n      ]);\n    } catch (err: any) {\n      this._error = err.message;\n    }\n\n    this._logbookEntries = this._logbookEntries\n      ? [...newEntries, ...this._logbookEntries]\n      : newEntries;\n    this._lastLogbookDate = now;\n    this._traceContexts = traceContexts;\n  }\n\n  private async _fetchUserNames() {\n    const userIdToName = {};\n\n    // Start loading users\n    const userProm = this.hass.user?.is_admin && fetchUsers(this.hass);\n\n    // Process persons\n    Object.values(this.hass.states).forEach((entity) => {\n      if (\n        entity.attributes.user_id &&\n        computeStateDomain(entity) === \"person\"\n      ) {\n        this._userIdToName[entity.attributes.user_id] =\n          entity.attributes.friendly_name;\n      }\n    });\n\n    // Process users\n    if (userProm) {\n      const users = await userProm;\n      for (const user of users) {\n        if (!(user.id in userIdToName)) {\n          userIdToName[user.id] = user.name;\n        }\n      }\n    }\n\n    this._userIdToName = userIdToName;\n  }\n\n  private _close(): void {\n    setTimeout(() => fireEvent(this, \"closed\"), 500);\n  }\n\n  static get styles() {\n    return [\n      haStyle,\n      css`\n        .no-entries {\n          text-align: center;\n          padding: 16px;\n          color: var(--secondary-text-color);\n        }\n        ha-logbook {\n          --logbook-max-height: 250px;\n        }\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          ha-logbook {\n            --logbook-max-height: unset;\n          }\n        }\n        ha-circular-progress {\n          display: flex;\n          justify-content: center;\n        }\n        .header {\n          display: flex;\n          flex-direction: row;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 8px;\n        }\n        .header > a,\n        a:visited {\n          color: var(--primary-color);\n        }\n        .title {\n          font-family: var(--paper-font-title_-_font-family);\n          -webkit-font-smoothing: var(\n            --paper-font-title_-_-webkit-font-smoothing\n          );\n          font-size: var(--paper-font-subhead_-_font-size);\n          font-weight: var(--paper-font-title_-_font-weight);\n          letter-spacing: var(--paper-font-title_-_letter-spacing);\n          line-height: var(--paper-font-title_-_line-height);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-more-info-logbook\": MoreInfoLogbook;\n  }\n}\n"],"names":[],"sourceRoot":""}