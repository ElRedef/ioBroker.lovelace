{"version":3,"file":"3a0c6d57.js","mappings":";;AAcA;;AARA;ACuBA;;;;AAIA;AACA;AACA;AACA;;;;AA9BA;;;;;;;;AAAA;AC2DA;AACA;AAEA;AACA;;AAgBA;AAeA;;;AAKA;;AAEA;;AAtBA;;;AAKA;;AAEA;;AAmBA;;AAGA;AACA;;;AAKA;;AAGA;;;;AA1FA;;;AA2JA;AACA;;;;AAIA;;;;AAIA;;;;AApKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACRA;;;AAGA;AAGA;;AAGA;;AAMA;AAEA;;AAGA;;AAIA;;;AAMA;AAEA;;AAGA;;AAMA;AAEA;;AAGA;;AAMA;;;;;AAlEA;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AC8KA;AACA;;AAOA;;AAyBA;AACA;AACA;AACA;;AAEA;AAGA;;;AAGA;AACA;AACA;;AAIA;;;;;;;AASA;;;AAMA;AACA;AAEA;AACA;;AAMA;;;AAIA;AACA;AACA;;;;;AAQA;;AAIA;;AAEA;AACA;AACA;;;AAGA;AAGA;;AAIA;;AAMA;AACA;;AAEA;;;;;;AAQA;AACA;AACA;AACA;;AAEA;;AAIA;;AAQA;AAEA;AACA;;AAEA;AAEA;AAGA;;;AAKA;;AAEA;;;AAKA;;;;;;;;AAYA;AAGA;;;;AAIA;;AAMA;AACA;AAGA;AACA;AACA;;;AAGA;;;AAKA;;;AAKA;;AAIA;AACA;AACA;AAOA;;;AAGA;;AAGA;;AAMA;;;AAOA;AACA;;;AAIA;;;;;AAKA;;AAGA;;;AAMA;;AAIA;;AAGA;;;;AAUA;AAGA;;;AAKA;;;AAKA;AACA;AACA;AAOA;;;AAGA;;AAGA;;;AAMA;;;AAOA;AACA;;;AAIA;;;;;AAKA;;;;AAKA;;;;AAOA;;AAIA;;AAGA;;;;AAUA;AAGA;;;AAKA;;AAIA;AACA;AACA;AAOA;;;AAGA;;AAGA;;AAKA;;AAEA;;AAEA;;;;;AAKA;;AAIA;;AAGA;;;;AAUA;;;;AAzhBA;;;AAulBA;AACA;;;AAKA;;AAKA;AACA;;;;AAIA;AACA;;;AAKA;;;AAOA;AACA;;;AAKA;;AAKA;AACA;;;;AAIA;AACA;;;AAKA;;AASA;AACA;;;;AAIA;AACA;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA9pBA;ACoLA;;AAEA;;AAZA;AAkFA;;AAEA;AACA;AACA;;AAMA;;;;;;AAYA;;AAEA;;AAqCA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;;;AAMA;;AAEA;AACA;;AAEA;;AAEA;;AAIA;;AAEA;;AAEA;;AAEA;;;;AAKA;;;;AAMA;;AAEA;;;;AAIA;;AAEA;;;;AA5YA;;;;AA2dA","sources":["webpack://home-assistant-frontend/./src/components/entity/ha-battery-icon.ts","webpack://home-assistant-frontend/./src/components/ha-button-menu.ts","webpack://home-assistant-frontend/./src/panels/config/devices/device-detail/ha-device-entities-card.ts","webpack://home-assistant-frontend/./src/panels/config/devices/device-detail/ha-device-info-card.ts","webpack://home-assistant-frontend/./src/panels/config/devices/ha-config-device-page.ts","webpack://home-assistant-frontend/./src/panels/config/devices/ha-config-devices-dashboard.ts"],"sourcesContent":["import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { batteryStateIcon } from \"../../common/entity/battery_icon\";\nimport \"../ha-svg-icon\";\n\n@customElement(\"ha-battery-icon\")\nexport class HaBatteryIcon extends LitElement {\n  @property() public batteryStateObj;\n\n  @property() public batteryChargingStateObj;\n\n  protected render() {\n    return html`\n      <ha-svg-icon\n        .path=${batteryStateIcon(\n          this.batteryStateObj,\n          this.batteryChargingStateObj\n        )}\n      ></ha-svg-icon>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-battery-icon\": HaBatteryIcon;\n  }\n}\n","import \"@material/mwc-menu\";\nimport type { Corner, Menu } from \"@material/mwc-menu\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\n\n@customElement(\"ha-button-menu\")\nexport class HaButtonMenu extends LitElement {\n  @property() public corner: Corner = \"TOP_START\";\n\n  @property({ type: Boolean }) public multi = false;\n\n  @property({ type: Boolean }) public activatable = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public fixed = false;\n\n  @query(\"mwc-menu\", true) private _menu?: Menu;\n\n  public get items() {\n    return this._menu?.items;\n  }\n\n  public get selected() {\n    return this._menu?.selected;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div @click=${this._handleClick}>\n        <slot name=\"trigger\"></slot>\n      </div>\n      <mwc-menu\n        .corner=${this.corner}\n        .fixed=${this.fixed}\n        .multi=${this.multi}\n        .activatable=${this.activatable}\n      >\n        <slot></slot>\n      </mwc-menu>\n    `;\n  }\n\n  private _handleClick(): void {\n    if (this.disabled) {\n      return;\n    }\n    this._menu!.anchor = this;\n    this._menu!.show();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ::slotted([disabled]) {\n        color: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-menu\": HaButtonMenu;\n  }\n}\n","import \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { computeDomain } from \"../../../../common/entity/compute_domain\";\nimport { domainIcon } from \"../../../../common/entity/domain_icon\";\nimport \"../../../../components/entity/state-badge\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-icon\";\nimport type { LovelaceRowConfig } from \"../../../lovelace/entity-rows/types\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { HuiErrorCard } from \"../../../lovelace/cards/hui-error-card\";\nimport { createRowElement } from \"../../../lovelace/create-element/create-row-element\";\nimport { addEntitiesToLovelaceView } from \"../../../lovelace/editor/add-entities-to-view\";\nimport { LovelaceRow } from \"../../../lovelace/entity-rows/types\";\nimport { showEntityEditorDialog } from \"../../entities/show-dialog-entity-editor\";\nimport { EntityRegistryStateEntry } from \"../ha-config-device-page\";\nimport { computeStateName } from \"../../../../common/entity/compute_state_name\";\nimport { stripPrefixFromEntityName } from \"../../../../common/entity/strip_prefix_from_entity_name\";\nimport {\n  ExtEntityRegistryEntry,\n  getExtendedEntityRegistryEntry,\n} from \"../../../../data/entity_registry\";\n\n@customElement(\"ha-device-entities-card\")\nexport class HaDeviceEntitiesCard extends LitElement {\n  @property() public header!: string;\n\n  @property() public deviceName!: string;\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public entities!: EntityRegistryStateEntry[];\n\n  @property() public showDisabled = false;\n\n  @state() private _extDisabledEntityEntries?: Record<\n    string,\n    ExtEntityRegistryEntry\n  >;\n\n  private _entityRows: Array<LovelaceRow | HuiErrorCard> = [];\n\n  protected shouldUpdate(changedProps: PropertyValues) {\n    if (changedProps.has(\"hass\") && changedProps.size === 1) {\n      this._entityRows.forEach((element) => {\n        element.hass = this.hass;\n      });\n      return false;\n    }\n    return true;\n  }\n\n  protected render(): TemplateResult {\n    const disabledEntities: EntityRegistryStateEntry[] = [];\n    this._entityRows = [];\n    return html`\n      <ha-card .header=${this.header}>\n        ${this.entities.length\n          ? html`\n              <div id=\"entities\" @hass-more-info=${this._overrideMoreInfo}>\n                ${this.entities.map((entry: EntityRegistryStateEntry) => {\n                  if (entry.disabled_by) {\n                    if (this._extDisabledEntityEntries) {\n                      disabledEntities.push(\n                        this._extDisabledEntityEntries[entry.entity_id] || entry\n                      );\n                    } else {\n                      disabledEntities.push(entry);\n                    }\n                    return \"\";\n                  }\n                  return this.hass.states[entry.entity_id]\n                    ? this._renderEntity(entry)\n                    : this._renderEntry(entry);\n                })}\n              </div>\n              ${disabledEntities.length\n                ? !this.showDisabled\n                  ? html`\n                      <button\n                        class=\"show-more\"\n                        @click=${this._toggleShowDisabled}\n                      >\n                        ${this.hass.localize(\n                          \"ui.panel.config.devices.entities.disabled_entities\",\n                          \"count\",\n                          disabledEntities.length\n                        )}\n                      </button>\n                    `\n                  : html`\n                      ${disabledEntities.map((entry) =>\n                        this._renderEntry(entry)\n                      )}\n                      <button\n                        class=\"show-more\"\n                        @click=${this._toggleShowDisabled}\n                      >\n                        ${this.hass.localize(\n                          \"ui.panel.config.devices.entities.hide_disabled\"\n                        )}\n                      </button>\n                    `\n                : \"\"}\n              <div class=\"card-actions\">\n                <mwc-button @click=${this._addToLovelaceView}>\n                  ${this.hass.localize(\n                    \"ui.panel.config.devices.entities.add_entities_lovelace\"\n                  )}\n                </mwc-button>\n              </div>\n            `\n          : html`\n              <div class=\"empty card-content\">\n                ${this.hass.localize(\"ui.panel.config.devices.entities.none\")}\n              </div>\n            `}\n      </ha-card>\n    `;\n  }\n\n  private _toggleShowDisabled() {\n    this.showDisabled = !this.showDisabled;\n    if (!this.showDisabled || this._extDisabledEntityEntries !== undefined) {\n      return;\n    }\n    this._extDisabledEntityEntries = {};\n    const toFetch = this.entities.filter((entry) => entry.disabled_by);\n\n    const worker = async () => {\n      if (toFetch.length === 0) {\n        return;\n      }\n\n      const entityId = toFetch.pop()!.entity_id;\n      const entry = await getExtendedEntityRegistryEntry(this.hass, entityId);\n      this._extDisabledEntityEntries![entityId] = entry;\n      this.requestUpdate(\"_extDisabledEntityEntries\");\n      worker();\n    };\n\n    // Fetch 3 in parallel\n    worker();\n    worker();\n    worker();\n  }\n\n  private _renderEntity(entry: EntityRegistryStateEntry): TemplateResult {\n    const config: LovelaceRowConfig = {\n      entity: entry.entity_id,\n    };\n\n    const element = createRowElement(config);\n    if (this.hass) {\n      element.hass = this.hass;\n      const stateObj = this.hass.states[entry.entity_id];\n      const name = stripPrefixFromEntityName(\n        computeStateName(stateObj),\n        `${this.deviceName} `.toLowerCase()\n      );\n      if (name) {\n        config.name = name;\n      }\n    }\n    // @ts-ignore\n    element.entry = entry;\n    this._entityRows.push(element);\n    return html` <div>${element}</div> `;\n  }\n\n  private _renderEntry(entry: EntityRegistryStateEntry): TemplateResult {\n    const name =\n      entry.stateName ||\n      entry.name ||\n      (entry as ExtEntityRegistryEntry).original_name;\n\n    return html`\n      <paper-icon-item\n        class=\"disabled-entry\"\n        .entry=${entry}\n        @click=${this._openEditEntry}\n      >\n        <ha-svg-icon\n          slot=\"item-icon\"\n          .path=${domainIcon(computeDomain(entry.entity_id))}\n        ></ha-svg-icon>\n        <paper-item-body>\n          <div class=\"name\">\n            ${name\n              ? stripPrefixFromEntityName(\n                  name,\n                  `${this.deviceName} `.toLowerCase()\n                )\n              : entry.entity_id}\n          </div>\n        </paper-item-body>\n      </paper-icon-item>\n    `;\n  }\n\n  private _overrideMoreInfo(ev: Event): void {\n    ev.stopPropagation();\n    const entry = (ev.target! as any).entry;\n    showEntityEditorDialog(this, {\n      entry,\n      entity_id: entry.entity_id,\n    });\n  }\n\n  private _openEditEntry(ev: Event): void {\n    const entry = (ev.currentTarget! as any).entry;\n    showEntityEditorDialog(this, {\n      entry,\n      entity_id: entry.entity_id,\n    });\n  }\n\n  private _addToLovelaceView(): void {\n    addEntitiesToLovelaceView(\n      this,\n      this.hass,\n      this.entities\n        .filter((entity) => !entity.disabled_by)\n        .map((entity) => entity.entity_id),\n      this.deviceName\n    );\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n      }\n      ha-icon {\n        margin-left: 8px;\n      }\n      .entity-id {\n        color: var(--secondary-text-color);\n      }\n      .buttons {\n        text-align: right;\n        margin: 0 0 0 8px;\n      }\n      .disabled-entry {\n        color: var(--secondary-text-color);\n      }\n      #entities {\n        margin-top: -24px; /* match the spacing between card title and content of the device info card above it */\n      }\n      #entities > * {\n        margin: 8px 16px 8px 8px;\n      }\n      #entities > paper-icon-item {\n        margin: 0;\n      }\n      paper-icon-item {\n        min-height: 40px;\n        padding: 0 16px;\n        cursor: pointer;\n        --paper-item-icon-width: 48px;\n      }\n      .name {\n        font-size: 14px;\n      }\n      .empty {\n        text-align: center;\n      }\n      button.show-more {\n        color: var(--primary-color);\n        text-align: left;\n        cursor: pointer;\n        background: none;\n        border-width: initial;\n        border-style: none;\n        border-color: initial;\n        border-image: initial;\n        padding: 16px;\n        font: inherit;\n      }\n      button.show-more:focus {\n        outline: none;\n        text-decoration: underline;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-device-entities-card\": HaDeviceEntitiesCard;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { AreaRegistryEntry } from \"../../../../data/area_registry\";\nimport {\n  computeDeviceName,\n  DeviceRegistryEntry,\n} from \"../../../../data/device_registry\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { loadDeviceRegistryDetailDialog } from \"../device-registry-detail/show-dialog-device-registry-detail\";\n\n@customElement(\"ha-device-info-card\")\nexport class HaDeviceCard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public device!: DeviceRegistryEntry;\n\n  @property() public devices!: DeviceRegistryEntry[];\n\n  @property() public areas!: AreaRegistryEntry[];\n\n  @property() public narrow!: boolean;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-card\n        .header=${this.hass.localize(\"ui.panel.config.devices.device_info\")}\n      >\n        <div class=\"card-content\">\n          ${this.device.model\n            ? html` <div class=\"model\">${this.device.model}</div> `\n            : \"\"}\n          ${this.device.manufacturer\n            ? html`\n                <div class=\"manuf\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.integrations.config_entry.manuf\",\n                    \"manufacturer\",\n                    this.device.manufacturer\n                  )}\n                </div>\n              `\n            : \"\"}\n          ${this.device.via_device_id\n            ? html`\n                <div class=\"extra-info\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.integrations.config_entry.via\"\n                  )}\n                  <span class=\"hub\"\n                    >${this._computeDeviceName(\n                      this.devices,\n                      this.device.via_device_id\n                    )}</span\n                  >\n                </div>\n              `\n            : \"\"}\n          ${this.device.sw_version\n            ? html`\n                <div class=\"extra-info\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.integrations.config_entry.firmware\",\n                    \"version\",\n                    this.device.sw_version\n                  )}\n                </div>\n              `\n            : \"\"}\n          ${this.device.hw_version\n            ? html`\n                <div class=\"extra-info\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.integrations.config_entry.hardware\",\n                    \"version\",\n                    this.device.hw_version\n                  )}\n                </div>\n              `\n            : \"\"}\n          <slot></slot>\n        </div>\n        <slot name=\"actions\"></slot>\n      </ha-card>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    loadDeviceRegistryDetailDialog();\n  }\n\n  private _computeDeviceName(devices, deviceId) {\n    const device = devices.find((dev) => dev.id === deviceId);\n    return device\n      ? computeDeviceName(device, this.hass)\n      : `<${this.hass.localize(\n          \"ui.panel.config.integrations.config_entry.unknown_via_device\"\n        )}>`;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n      }\n      ha-card {\n        flex: 1 0 100%;\n        min-width: 0;\n      }\n      .device {\n        width: 30%;\n      }\n      .area {\n        color: var(--primary-text-color);\n      }\n      .extra-info {\n        margin-top: 8px;\n        word-wrap: break-word;\n      }\n      .manuf,\n      .model {\n        color: var(--secondary-text-color);\n        word-wrap: break-word;\n      }\n    `;\n  }\n}\n","import { mdiOpenInNew, mdiPencil, mdiPlusCircle } from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeStateDomain } from \"../../../common/entity/compute_state_domain\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { stringCompare } from \"../../../common/string/compare\";\nimport { slugify } from \"../../../common/string/slugify\";\nimport { groupBy } from \"../../../common/util/group-by\";\nimport \"../../../components/entity/ha-battery-icon\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-icon-next\";\nimport \"../../../components/ha-svg-icon\";\nimport { AreaRegistryEntry } from \"../../../data/area_registry\";\nimport {\n  ConfigEntry,\n  disableConfigEntry,\n  DisableConfigEntryResult,\n} from \"../../../data/config_entries\";\nimport {\n  computeDeviceName,\n  DeviceRegistryEntry,\n  updateDeviceRegistryEntry,\n} from \"../../../data/device_registry\";\nimport {\n  EntityRegistryEntry,\n  findBatteryChargingEntity,\n  findBatteryEntity,\n  updateEntityRegistryEntry,\n} from \"../../../data/entity_registry\";\nimport { SceneEntities, showSceneEditor } from \"../../../data/scene\";\nimport { findRelated, RelatedResult } from \"../../../data/search\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-error-screen\";\nimport \"../../../layouts/hass-tabs-subpage\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { brandsUrl } from \"../../../util/brands-url\";\nimport \"../ha-config-section\";\nimport { configSections } from \"../ha-panel-config\";\nimport \"./device-detail/ha-device-entities-card\";\nimport \"./device-detail/ha-device-info-card\";\nimport { showDeviceAutomationDialog } from \"./device-detail/show-dialog-device-automation\";\nimport {\n  loadDeviceRegistryDetailDialog,\n  showDeviceRegistryDetailDialog,\n} from \"./device-registry-detail/show-dialog-device-registry-detail\";\n\nexport interface EntityRegistryStateEntry extends EntityRegistryEntry {\n  stateName?: string | null;\n}\n\n@customElement(\"ha-config-device-page\")\nexport class HaConfigDevicePage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public devices!: DeviceRegistryEntry[];\n\n  @property() public entries!: ConfigEntry[];\n\n  @property() public entities!: EntityRegistryEntry[];\n\n  @property() public areas!: AreaRegistryEntry[];\n\n  @property() public deviceId!: string;\n\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @property() public isWide!: boolean;\n\n  @property() public showAdvanced!: boolean;\n\n  @property() public route!: Route;\n\n  @state() private _related?: RelatedResult;\n\n  private _device = memoizeOne(\n    (\n      deviceId: string,\n      devices: DeviceRegistryEntry[]\n    ): DeviceRegistryEntry | undefined =>\n      devices ? devices.find((device) => device.id === deviceId) : undefined\n  );\n\n  private _integrations = memoizeOne(\n    (device: DeviceRegistryEntry, entries: ConfigEntry[]): string[] =>\n      entries\n        .filter((entry) => device.config_entries.includes(entry.entry_id))\n        .map((entry) => entry.domain)\n  );\n\n  private _entities = memoizeOne(\n    (\n      deviceId: string,\n      entities: EntityRegistryEntry[]\n    ): EntityRegistryStateEntry[] =>\n      entities\n        .filter((entity) => entity.device_id === deviceId)\n        .map((entity) => ({\n          ...entity,\n          stateName: this._computeEntityName(entity),\n        }))\n        .sort((ent1, ent2) =>\n          stringCompare(\n            ent1.stateName || `zzz${ent1.entity_id}`,\n            ent2.stateName || `zzz${ent2.entity_id}`\n          )\n        )\n  );\n\n  private _entitiesByCategory = memoizeOne(\n    (entities: EntityRegistryEntry[]) => {\n      const result = groupBy(entities, (entry) =>\n        entry.entity_category\n          ? entry.entity_category\n          : [\n              \"sensor\",\n              \"binary_sensor\",\n              \"camera\",\n              \"device_tracker\",\n              \"weather\",\n            ].includes(computeDomain(entry.entity_id))\n          ? \"sensor\"\n          : \"control\"\n      ) as Record<\n        | \"control\"\n        | \"sensor\"\n        | NonNullable<EntityRegistryEntry[\"entity_category\"]>,\n        EntityRegistryStateEntry[]\n      >;\n      for (const key of [\"control\", \"sensor\", \"diagnostic\", \"config\"]) {\n        if (!(key in result)) {\n          result[key] = [];\n        }\n      }\n\n      return result;\n    }\n  );\n\n  private _computeArea = memoizeOne(\n    (areas, device): AreaRegistryEntry | undefined => {\n      if (!areas || !device || !device.area_id) {\n        return undefined;\n      }\n      return areas.find((area) => area.area_id === device.area_id);\n    }\n  );\n\n  private _batteryEntity = memoizeOne(\n    (entities: EntityRegistryEntry[]): EntityRegistryEntry | undefined =>\n      findBatteryEntity(this.hass, entities)\n  );\n\n  private _batteryChargingEntity = memoizeOne(\n    (entities: EntityRegistryEntry[]): EntityRegistryEntry | undefined =>\n      findBatteryChargingEntity(this.hass, entities)\n  );\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    loadDeviceRegistryDetailDialog();\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    if (changedProps.has(\"deviceId\")) {\n      this._findRelated();\n    }\n  }\n\n  protected render() {\n    const device = this._device(this.deviceId, this.devices);\n\n    if (!device) {\n      return html`\n        <hass-error-screen\n          .hass=${this.hass}\n          .error=${this.hass.localize(\n            \"ui.panel.config.devices.device_not_found\"\n          )}\n        ></hass-error-screen>\n      `;\n    }\n\n    const deviceName = computeDeviceName(device, this.hass);\n    const integrations = this._integrations(device, this.entries);\n    const entities = this._entities(this.deviceId, this.entities);\n    const entitiesByCategory = this._entitiesByCategory(entities);\n    const batteryEntity = this._batteryEntity(entities);\n    const batteryChargingEntity = this._batteryChargingEntity(entities);\n    const batteryState = batteryEntity\n      ? this.hass.states[batteryEntity.entity_id]\n      : undefined;\n    const batteryIsBinary =\n      batteryState && computeStateDomain(batteryState) === \"binary_sensor\";\n    const batteryChargingState = batteryChargingEntity\n      ? this.hass.states[batteryChargingEntity.entity_id]\n      : undefined;\n    const area = this._computeArea(this.areas, device);\n\n    const configurationUrlIsHomeAssistant =\n      device.configuration_url?.startsWith(\"homeassistant://\") || false;\n\n    const configurationUrl = configurationUrlIsHomeAssistant\n      ? device.configuration_url!.replace(\"homeassistant://\", \"/\")\n      : device.configuration_url;\n\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .tabs=${configSections.devices}\n        .route=${this.route}\n      >\n        ${\n          this.narrow\n            ? html`\n                <span slot=\"header\">${deviceName}</span>\n                <ha-icon-button\n                  slot=\"toolbar-icon\"\n                  .path=${mdiPencil}\n                  @click=${this._showSettings}\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.devices.edit_settings\"\n                  )}\n                ></ha-icon-button>\n              `\n            : \"\"\n        }\n\n\n\n\n        <div class=\"container\">\n          <div class=\"header fullwidth\">\n            ${\n              this.narrow\n                ? \"\"\n                : html`\n                    <div class=\"header-name\">\n                      <div>\n                        <h1>${deviceName}</h1>\n                        ${area\n                          ? html`\n                              <a href=\"/config/areas/area/${area.area_id}\"\n                                >${this.hass.localize(\n                                  \"ui.panel.config.integrations.config_entry.area\",\n                                  \"area\",\n                                  area.name || \"Unnamed Area\"\n                                )}</a\n                              >\n                            `\n                          : \"\"}\n                      </div>\n                      <ha-icon-button\n                        .path=${mdiPencil}\n                        @click=${this._showSettings}\n                        .label=${this.hass.localize(\n                          \"ui.panel.config.devices.edit_settings\"\n                        )}\n                      ></ha-icon-button>\n                    </div>\n                  `\n            }\n                <div class=\"header-right\">\n                  ${\n                    batteryState\n                      ? html`\n                          <div class=\"battery\">\n                            ${batteryIsBinary ? \"\" : batteryState.state + \" %\"}\n                            <ha-battery-icon\n                              .hass=${this.hass!}\n                              .batteryStateObj=${batteryState}\n                              .batteryChargingStateObj=${batteryChargingState}\n                            ></ha-battery-icon>\n                          </div>\n                        `\n                      : \"\"\n                  }\n                  ${\n                    integrations.length\n                      ? html`\n                          <img\n                            src=${brandsUrl({\n                              domain: integrations[0],\n                              type: \"logo\",\n                              darkOptimized: this.hass.themes?.darkMode,\n                            })}\n                            referrerpolicy=\"no-referrer\"\n                            @load=${this._onImageLoad}\n                            @error=${this._onImageError}\n                          />\n                        `\n                      : \"\"\n                  }\n\n                </div>\n          </div>\n          <div class=\"column\">\n              <ha-device-info-card\n                .hass=${this.hass}\n                .areas=${this.areas}\n                .devices=${this.devices}\n                .device=${device}\n              >\n              ${\n                device.disabled_by\n                  ? html`\n                      <ha-alert alert-type=\"warning\">\n                        ${this.hass.localize(\n                          \"ui.panel.config.devices.enabled_cause\",\n                          \"cause\",\n                          this.hass.localize(\n                            `ui.panel.config.devices.disabled_by.${device.disabled_by}`\n                          )\n                        )}\n                      </ha-alert>\n                      ${device.disabled_by === \"user\"\n                        ? html` <div class=\"card-actions\" slot=\"actions\">\n                            <mwc-button unelevated @click=${this._enableDevice}>\n                              ${this.hass.localize(\"ui.common.enable\")}\n                            </mwc-button>\n                          </div>`\n                        : \"\"}\n                    `\n                  : html``\n              }\n              ${\n                configurationUrl\n                  ? html`\n                      <div class=\"card-actions\" slot=\"actions\">\n                        <a\n                          href=${configurationUrl}\n                          rel=\"noopener noreferrer\"\n                          .target=${configurationUrlIsHomeAssistant\n                            ? \"_self\"\n                            : \"_blank\"}\n                        >\n                          <mwc-button>\n                            ${this.hass.localize(\n                              `ui.panel.config.devices.open_configuration_url_${\n                                device.entry_type || \"device\"\n                              }`\n                            )}\n                            <ha-svg-icon\n                              .path=${mdiOpenInNew}\n                              slot=\"trailingIcon\"\n                            ></ha-svg-icon>\n                          </mwc-button>\n                        </a>\n                      </div>\n                    `\n                  : \"\"\n              }\n              ${this._renderIntegrationInfo(device, integrations)}\n              </ha-device-info-card>\n          </div>\n          <div class=\"column\">\n            ${[\"control\", \"sensor\", \"config\", \"diagnostic\"].map((category) =>\n              // Make sure we render controls if no other cards will be rendered\n              entitiesByCategory[category].length > 0 ||\n              (entities.length === 0 && category === \"control\")\n                ? html`\n                    <ha-device-entities-card\n                      .hass=${this.hass}\n                      .header=${this.hass.localize(\n                        `ui.panel.config.devices.entities.${category}`\n                      )}\n                      .deviceName=${deviceName}\n                      .entities=${entitiesByCategory[category]}\n                      .showDisabled=${device.disabled_by !== null}\n                    >\n                    </ha-device-entities-card>\n                  `\n                : \"\"\n            )}\n          </div>\n          <div class=\"column\">\n            ${\n              isComponentLoaded(this.hass, \"automation\")\n                ? html`\n                    <ha-card>\n                      <h1 class=\"card-header\">\n                        ${this.hass.localize(\n                          \"ui.panel.config.devices.automation.automations\"\n                        )}\n                        <ha-icon-button\n                          @click=${this._showAutomationDialog}\n                          .disabled=${device.disabled_by}\n                          .label=${device.disabled_by\n                            ? this.hass.localize(\n                                \"ui.panel.config.devices.automation.create_disabled\"\n                              )\n                            : this.hass.localize(\n                                \"ui.panel.config.devices.automation.create\"\n                              )}\n                          .path=${mdiPlusCircle}\n                        ></ha-icon-button>\n                      </h1>\n                      ${this._related?.automation?.length\n                        ? html`\n                            <div class=\"items\">\n                              ${this._related.automation.map((automation) => {\n                                const entityState =\n                                  this.hass.states[automation];\n                                return entityState\n                                  ? html`<div>\n                                      <a\n                                        href=${ifDefined(\n                                          entityState.attributes.id\n                                            ? `/config/automation/edit/${entityState.attributes.id}`\n                                            : undefined\n                                        )}\n                                      >\n                                        <paper-item\n                                          .automation=${entityState}\n                                          .disabled=${!entityState.attributes\n                                            .id}\n                                        >\n                                          <paper-item-body>\n                                            ${computeStateName(entityState)}\n                                          </paper-item-body>\n                                          <ha-icon-next></ha-icon-next>\n                                        </paper-item>\n                                      </a>\n                                      ${!entityState.attributes.id\n                                        ? html`\n                                            <paper-tooltip animation-delay=\"0\">\n                                              ${this.hass.localize(\n                                                \"ui.panel.config.devices.cant_edit\"\n                                              )}\n                                            </paper-tooltip>\n                                          `\n                                        : \"\"}\n                                    </div> `\n                                  : \"\";\n                              })}\n                            </div>\n                          `\n                        : html`\n                            <div class=\"card-content\">\n                              ${this.hass.localize(\n                                \"ui.panel.config.devices.add_prompt\",\n                                \"name\",\n                                this.hass.localize(\n                                  \"ui.panel.config.devices.automation.automations\"\n                                )\n                              )}\n                            </div>\n                          `}\n                    </ha-card>\n                  `\n                : \"\"\n            }\n            ${\n              isComponentLoaded(this.hass, \"scene\") && entities.length\n                ? html`\n                    <ha-card>\n                      <h1 class=\"card-header\">\n                        ${this.hass.localize(\n                          \"ui.panel.config.devices.scene.scenes\"\n                        )}\n\n                        <ha-icon-button\n                          @click=${this._createScene}\n                          .disabled=${device.disabled_by}\n                          .label=${device.disabled_by\n                            ? this.hass.localize(\n                                \"ui.panel.config.devices.scene.create_disabled\"\n                              )\n                            : this.hass.localize(\n                                \"ui.panel.config.devices.scene.create\"\n                              )}\n                          .path=${mdiPlusCircle}\n                        ></ha-icon-button>\n                      </h1>\n                      ${this._related?.scene?.length\n                        ? html`\n                            <div class=\"items\">\n                              ${this._related.scene.map((scene) => {\n                                const entityState = this.hass.states[scene];\n                                return entityState\n                                  ? html`\n                                      <div>\n                                        <a\n                                          href=${ifDefined(\n                                            entityState.attributes.id\n                                              ? `/config/scene/edit/${entityState.attributes.id}`\n                                              : undefined\n                                          )}\n                                        >\n                                          <paper-item\n                                            .scene=${entityState}\n                                            .disabled=${!entityState.attributes\n                                              .id}\n                                          >\n                                            <paper-item-body>\n                                              ${computeStateName(entityState)}\n                                            </paper-item-body>\n                                            <ha-icon-next></ha-icon-next>\n                                          </paper-item>\n                                        </a>\n                                        ${!entityState.attributes.id\n                                          ? html`\n                                              <paper-tooltip\n                                                animation-delay=\"0\"\n                                              >\n                                                ${this.hass.localize(\n                                                  \"ui.panel.config.devices.cant_edit\"\n                                                )}\n                                              </paper-tooltip>\n                                            `\n                                          : \"\"}\n                                      </div>\n                                    `\n                                  : \"\";\n                              })}\n                            </div>\n                          `\n                        : html`\n                            <div class=\"card-content\">\n                              ${this.hass.localize(\n                                \"ui.panel.config.devices.add_prompt\",\n                                \"name\",\n                                this.hass.localize(\n                                  \"ui.panel.config.devices.scene.scenes\"\n                                )\n                              )}\n                            </div>\n                          `}\n                    </ha-card>\n                  `\n                : \"\"\n            }\n              ${\n                isComponentLoaded(this.hass, \"script\")\n                  ? html`\n                      <ha-card>\n                        <h1 class=\"card-header\">\n                          ${this.hass.localize(\n                            \"ui.panel.config.devices.script.scripts\"\n                          )}\n                          <ha-icon-button\n                            @click=${this._showScriptDialog}\n                            .disabled=${device.disabled_by}\n                            .label=${device.disabled_by\n                              ? this.hass.localize(\n                                  \"ui.panel.config.devices.script.create_disabled\"\n                                )\n                              : this.hass.localize(\n                                  \"ui.panel.config.devices.script.create\"\n                                )}\n                            .path=${mdiPlusCircle}\n                          ></ha-icon-button>\n                        </h1>\n                        ${this._related?.script?.length\n                          ? html`\n                              <div class=\"items\">\n                                ${this._related.script.map((script) => {\n                                  const entityState = this.hass.states[script];\n                                  return entityState\n                                    ? html`\n                                        <a\n                                          href=${`/config/script/edit/${entityState.entity_id}`}\n                                        >\n                                          <paper-item .script=${script}>\n                                            <paper-item-body>\n                                              ${computeStateName(entityState)}\n                                            </paper-item-body>\n                                            <ha-icon-next></ha-icon-next>\n                                          </paper-item>\n                                        </a>\n                                      `\n                                    : \"\";\n                                })}\n                              </div>\n                            `\n                          : html`\n                              <div class=\"card-content\">\n                                ${this.hass.localize(\n                                  \"ui.panel.config.devices.add_prompt\",\n                                  \"name\",\n                                  this.hass.localize(\n                                    \"ui.panel.config.devices.script.scripts\"\n                                  )\n                                )}\n                              </div>\n                            `}\n                      </ha-card>\n                    `\n                  : \"\"\n              }\n            </div>\n          </div>\n        </ha-config-section>\n      </hass-tabs-subpage>    `;\n  }\n\n  private _computeEntityName(entity: EntityRegistryEntry) {\n    if (entity.name) {\n      return entity.name;\n    }\n    const entityState = this.hass.states[entity.entity_id];\n    return entityState ? computeStateName(entityState) : null;\n  }\n\n  private _onImageLoad(ev) {\n    ev.target.style.display = \"inline-block\";\n  }\n\n  private _onImageError(ev) {\n    ev.target.style.display = \"none\";\n  }\n\n  private async _findRelated() {\n    this._related = await findRelated(this.hass, \"device\", this.deviceId);\n  }\n\n  private _createScene() {\n    const entities: SceneEntities = {};\n    this._entities(this.deviceId, this.entities).forEach((entity) => {\n      entities[entity.entity_id] = \"\";\n    });\n    showSceneEditor({\n      entities,\n    });\n  }\n\n  private _showScriptDialog() {\n    showDeviceAutomationDialog(this, { deviceId: this.deviceId, script: true });\n  }\n\n  private _showAutomationDialog() {\n    showDeviceAutomationDialog(this, {\n      deviceId: this.deviceId,\n      script: false,\n    });\n  }\n\n  private _renderIntegrationInfo(\n    device,\n    integrations: string[]\n  ): TemplateResult[] {\n    const templates: TemplateResult[] = [];\n    if (integrations.includes(\"mqtt\")) {\n      import(\n        \"./device-detail/integration-elements/mqtt/ha-device-actions-mqtt\"\n      );\n      templates.push(html`\n        <div class=\"card-actions\" slot=\"actions\">\n          <ha-device-actions-mqtt\n            .hass=${this.hass}\n            .device=${device}\n          ></ha-device-actions-mqtt>\n        </div>\n      `);\n    }\n    if (integrations.includes(\"ozw\")) {\n      import(\"./device-detail/integration-elements/ozw/ha-device-actions-ozw\");\n      import(\"./device-detail/integration-elements/ozw/ha-device-info-ozw\");\n      templates.push(html`\n        <ha-device-info-ozw\n          .hass=${this.hass}\n          .device=${device}\n        ></ha-device-info-ozw>\n        <div class=\"card-actions\" slot=\"actions\">\n          <ha-device-actions-ozw\n            .hass=${this.hass}\n            .device=${device}\n          ></ha-device-actions-ozw>\n        </div>\n      `);\n    }\n    if (integrations.includes(\"tasmota\")) {\n      import(\n        \"./device-detail/integration-elements/tasmota/ha-device-actions-tasmota\"\n      );\n      templates.push(html`\n        <div class=\"card-actions\" slot=\"actions\">\n          <ha-device-actions-tasmota\n            .hass=${this.hass}\n            .device=${device}\n          ></ha-device-actions-tasmota>\n        </div>\n      `);\n    }\n    if (integrations.includes(\"zha\")) {\n      import(\"./device-detail/integration-elements/zha/ha-device-actions-zha\");\n      import(\"./device-detail/integration-elements/zha/ha-device-info-zha\");\n      templates.push(html`\n        <ha-device-info-zha\n          .hass=${this.hass}\n          .device=${device}\n        ></ha-device-info-zha>\n        <div class=\"card-actions\" slot=\"actions\">\n          <ha-device-actions-zha\n            .hass=${this.hass}\n            .device=${device}\n          ></ha-device-actions-zha>\n        </div>\n      `);\n    }\n    if (integrations.includes(\"zwave_js\")) {\n      import(\n        \"./device-detail/integration-elements/zwave_js/ha-device-info-zwave_js\"\n      );\n      import(\n        \"./device-detail/integration-elements/zwave_js/ha-device-actions-zwave_js\"\n      );\n      templates.push(html`\n        <ha-device-info-zwave_js\n          .hass=${this.hass}\n          .device=${device}\n        ></ha-device-info-zwave_js>\n        <div class=\"card-actions\" slot=\"actions\">\n          <ha-device-actions-zwave_js\n            .hass=${this.hass}\n            .device=${device}\n          ></ha-device-actions-zwave_js>\n        </div>\n      `);\n    }\n    return templates;\n  }\n\n  private async _showSettings() {\n    const device = this._device(this.deviceId, this.devices)!;\n    showDeviceRegistryDetailDialog(this, {\n      device,\n      updateEntry: async (updates) => {\n        const oldDeviceName = device.name_by_user || device.name;\n        const newDeviceName = updates.name_by_user;\n        const disabled =\n          updates.disabled_by === \"user\" && device.disabled_by !== \"user\";\n\n        if (disabled) {\n          for (const cnfg_entry of device.config_entries) {\n            if (\n              !this.devices.some(\n                (dvc) =>\n                  dvc.id !== device.id &&\n                  dvc.config_entries.includes(cnfg_entry)\n              )\n            ) {\n              const config_entry = this.entries.find(\n                (entry) => entry.entry_id === cnfg_entry\n              );\n              if (\n                config_entry &&\n                !config_entry.disabled_by &&\n                // eslint-disable-next-line no-await-in-loop\n                (await showConfirmationDialog(this, {\n                  title: this.hass.localize(\n                    \"ui.panel.config.devices.confirm_disable_config_entry\",\n                    \"entry_name\",\n                    config_entry.title\n                  ),\n                  confirmText: this.hass.localize(\"ui.common.yes\"),\n                  dismissText: this.hass.localize(\"ui.common.no\"),\n                }))\n              ) {\n                let result: DisableConfigEntryResult;\n                try {\n                  // eslint-disable-next-line no-await-in-loop\n                  result = await disableConfigEntry(this.hass, cnfg_entry);\n                } catch (err: any) {\n                  showAlertDialog(this, {\n                    title: this.hass.localize(\n                      \"ui.panel.config.integrations.config_entry.disable_error\"\n                    ),\n                    text: err.message,\n                  });\n                  return;\n                }\n                if (result.require_restart) {\n                  showAlertDialog(this, {\n                    text: this.hass.localize(\n                      \"ui.panel.config.integrations.config_entry.disable_restart_confirm\"\n                    ),\n                  });\n                }\n                delete updates.disabled_by;\n              }\n            }\n          }\n        }\n        try {\n          await updateDeviceRegistryEntry(this.hass, this.deviceId, updates);\n        } catch (err: any) {\n          showAlertDialog(this, {\n            title: this.hass.localize(\n              \"ui.panel.config.devices.update_device_error\"\n            ),\n            text: err.message,\n          });\n        }\n\n        if (\n          !oldDeviceName ||\n          !newDeviceName ||\n          oldDeviceName === newDeviceName\n        ) {\n          return;\n        }\n        const entities = this._entities(this.deviceId, this.entities);\n\n        const renameEntityid =\n          this.showAdvanced &&\n          (await showConfirmationDialog(this, {\n            title: this.hass.localize(\n              \"ui.panel.config.devices.confirm_rename_entity_ids\"\n            ),\n            text: this.hass.localize(\n              \"ui.panel.config.devices.confirm_rename_entity_ids_warning\"\n            ),\n            confirmText: this.hass.localize(\"ui.common.rename\"),\n            dismissText: this.hass.localize(\"ui.common.no\"),\n            warning: true,\n          }));\n\n        const updateProms = entities.map((entity) => {\n          const name = entity.name || entity.stateName;\n          let newEntityId: string | null = null;\n          let newName: string | null = null;\n\n          if (name && name.includes(oldDeviceName)) {\n            newName = name.replace(oldDeviceName, newDeviceName);\n          }\n\n          if (renameEntityid) {\n            const oldSearch = slugify(oldDeviceName);\n            if (entity.entity_id.includes(oldSearch)) {\n              newEntityId = entity.entity_id.replace(\n                oldSearch,\n                slugify(newDeviceName)\n              );\n            }\n          }\n\n          if (!newName && !newEntityId) {\n            return undefined;\n          }\n\n          return updateEntityRegistryEntry(this.hass!, entity.entity_id, {\n            name: newName || name,\n            new_entity_id: newEntityId || entity.entity_id,\n          });\n        });\n        await Promise.all(updateProms);\n      },\n    });\n  }\n\n  private async _enableDevice(): Promise<void> {\n    await updateDeviceRegistryEntry(this.hass, this.deviceId, {\n      disabled_by: null,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .container {\n          display: flex;\n          flex-wrap: wrap;\n          margin: auto;\n          max-width: 1000px;\n          margin-top: 32px;\n          margin-bottom: 32px;\n        }\n\n        .card-header {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          padding-bottom: 12px;\n        }\n\n        .card-header ha-icon-button {\n          margin-right: -8px;\n          color: var(--primary-color);\n          height: auto;\n        }\n\n        .device-info {\n          padding: 16px;\n        }\n\n        .show-more {\n        }\n\n        h1 {\n          margin: 0;\n          font-family: var(--paper-font-headline_-_font-family);\n          -webkit-font-smoothing: var(\n            --paper-font-headline_-_-webkit-font-smoothing\n          );\n          font-size: var(--paper-font-headline_-_font-size);\n          font-weight: var(--paper-font-headline_-_font-weight);\n          letter-spacing: var(--paper-font-headline_-_letter-spacing);\n          line-height: var(--paper-font-headline_-_line-height);\n          opacity: var(--dark-primary-opacity);\n        }\n\n        .header {\n          display: flex;\n          justify-content: space-between;\n        }\n\n        .header-name {\n          display: flex;\n          align-items: center;\n          padding-left: 8px;\n        }\n\n        .column,\n        .fullwidth {\n          padding: 8px;\n          box-sizing: border-box;\n        }\n        .column {\n          width: 33%;\n          flex-grow: 1;\n        }\n        .fullwidth {\n          width: 100%;\n          flex-grow: 1;\n        }\n\n        .header-right {\n          align-self: center;\n        }\n\n        .header-right img {\n          height: 30px;\n        }\n\n        .header-right {\n          display: flex;\n        }\n\n        .header-right:first-child {\n          width: 100%;\n          justify-content: flex-end;\n        }\n\n        .header-right > *:not(:first-child) {\n          margin-left: 16px;\n        }\n\n        .battery {\n          align-self: center;\n          align-items: center;\n          display: flex;\n        }\n\n        .column > *:not(:first-child) {\n          margin-top: 16px;\n        }\n\n        :host([narrow]) .column {\n          width: 100%;\n        }\n\n        :host([narrow]) .container {\n          margin-top: 0;\n        }\n\n        paper-item {\n          cursor: pointer;\n          font-size: var(--paper-font-body1_-_font-size);\n        }\n\n        a {\n          text-decoration: none;\n          color: var(--primary-color);\n        }\n\n        ha-card a {\n          color: var(--primary-text-color);\n        }\n\n        ha-svg-icon[slot=\"trailingIcon\"] {\n          display: block;\n        }\n\n        .items {\n          padding-bottom: 16px;\n        }\n      `,\n    ];\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport type { RequestSelectedDetail } from \"@material/mwc-list/mwc-list-item\";\nimport { mdiCancel, mdiFilterVariant, mdiPlus } from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { HASSDomEvent } from \"../../../common/dom/fire_event\";\nimport { computeStateDomain } from \"../../../common/entity/compute_state_domain\";\nimport { navigate } from \"../../../common/navigate\";\nimport { LocalizeFunc } from \"../../../common/translations/localize\";\nimport { computeRTL } from \"../../../common/util/compute_rtl\";\nimport {\n  DataTableColumnContainer,\n  DataTableRowData,\n  RowClickedEvent,\n} from \"../../../components/data-table/ha-data-table\";\nimport \"../../../components/entity/ha-battery-icon\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-icon-button\";\nimport { AreaRegistryEntry } from \"../../../data/area_registry\";\nimport { ConfigEntry } from \"../../../data/config_entries\";\nimport {\n  computeDeviceName,\n  DeviceEntityLookup,\n  DeviceRegistryEntry,\n} from \"../../../data/device_registry\";\nimport {\n  EntityRegistryEntry,\n  findBatteryChargingEntity,\n  findBatteryEntity,\n} from \"../../../data/entity_registry\";\nimport { domainToName } from \"../../../data/integration\";\nimport \"../../../layouts/hass-tabs-subpage-data-table\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { configSections } from \"../ha-panel-config\";\nimport { showZWaveJSAddNodeDialog } from \"../integrations/integration-panels/zwave_js/show-dialog-zwave_js-add-node\";\n\ninterface DeviceRowData extends DeviceRegistryEntry {\n  device?: DeviceRowData;\n  area?: string;\n  integration?: string;\n  battery_entity?: [string | undefined, string | undefined];\n}\n\n@customElement(\"ha-config-devices-dashboard\")\nexport class HaConfigDeviceDashboard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public narrow = false;\n\n  @property() public isWide = false;\n\n  @property() public devices!: DeviceRegistryEntry[];\n\n  @property() public entries!: ConfigEntry[];\n\n  @property() public entities!: EntityRegistryEntry[];\n\n  @property() public areas!: AreaRegistryEntry[];\n\n  @property() public route!: Route;\n\n  @state() private _searchParms = new URLSearchParams(window.location.search);\n\n  @state() private _showDisabled = false;\n\n  @state() private _filter = \"\";\n\n  @state() private _numHiddenDevices = 0;\n\n  private _ignoreLocationChange = false;\n\n  public constructor() {\n    super();\n    window.addEventListener(\"location-changed\", () => {\n      if (this._ignoreLocationChange) {\n        this._ignoreLocationChange = false;\n        return;\n      }\n      if (\n        window.location.search.substring(1) !== this._searchParms.toString()\n      ) {\n        this._searchParms = new URLSearchParams(window.location.search);\n      }\n    });\n    window.addEventListener(\"popstate\", () => {\n      if (\n        window.location.search.substring(1) !== this._searchParms.toString()\n      ) {\n        this._searchParms = new URLSearchParams(window.location.search);\n      }\n    });\n  }\n\n  private _activeFilters = memoizeOne(\n    (\n      entries: ConfigEntry[],\n      filters: URLSearchParams,\n      localize: LocalizeFunc\n    ): string[] | undefined => {\n      const filterTexts: string[] = [];\n      filters.forEach((value, key) => {\n        switch (key) {\n          case \"config_entry\": {\n            const configEntry = entries.find(\n              (entry) => entry.entry_id === value\n            );\n            if (!configEntry) {\n              break;\n            }\n            const integrationName = domainToName(localize, configEntry.domain);\n            filterTexts.push(\n              `${this.hass.localize(\n                \"ui.panel.config.integrations.integration\"\n              )} \"${integrationName}${\n                integrationName !== configEntry.title\n                  ? `: ${configEntry.title}`\n                  : \"\"\n              }\"`\n            );\n            break;\n          }\n        }\n      });\n      return filterTexts.length ? filterTexts : undefined;\n    }\n  );\n\n  private _devicesAndFilterDomains = memoizeOne(\n    (\n      devices: DeviceRegistryEntry[],\n      entries: ConfigEntry[],\n      entities: EntityRegistryEntry[],\n      areas: AreaRegistryEntry[],\n      filters: URLSearchParams,\n      showDisabled: boolean,\n      localize: LocalizeFunc\n    ) => {\n      // Some older installations might have devices pointing at invalid entryIDs\n      // So we guard for that.\n      let outputDevices: DeviceRowData[] = devices;\n\n      const deviceLookup: { [deviceId: string]: DeviceRegistryEntry } = {};\n      for (const device of devices) {\n        deviceLookup[device.id] = device;\n      }\n\n      // If nothing gets filtered, this is our correct count of devices\n      let startLength = outputDevices.length;\n\n      const deviceEntityLookup: DeviceEntityLookup = {};\n      for (const entity of entities) {\n        if (!entity.device_id) {\n          continue;\n        }\n        if (!(entity.device_id in deviceEntityLookup)) {\n          deviceEntityLookup[entity.device_id] = [];\n        }\n        deviceEntityLookup[entity.device_id].push(entity);\n      }\n\n      const entryLookup: { [entryId: string]: ConfigEntry } = {};\n      for (const entry of entries) {\n        entryLookup[entry.entry_id] = entry;\n      }\n\n      const areaLookup: { [areaId: string]: AreaRegistryEntry } = {};\n      for (const area of areas) {\n        areaLookup[area.area_id] = area;\n      }\n\n      let filterConfigEntry: ConfigEntry | undefined;\n\n      filters.forEach((value, key) => {\n        if (key === \"config_entry\") {\n          outputDevices = outputDevices.filter((device) =>\n            device.config_entries.includes(value)\n          );\n          startLength = outputDevices.length;\n          filterConfigEntry = entries.find((entry) => entry.entry_id === value);\n        }\n      });\n\n      if (!showDisabled) {\n        outputDevices = outputDevices.filter((device) => !device.disabled_by);\n      }\n\n      outputDevices = outputDevices.map((device) => ({\n        ...device,\n        name: computeDeviceName(\n          device,\n          this.hass,\n          deviceEntityLookup[device.id]\n        ),\n        model: device.model || \"<unknown>\",\n        manufacturer: device.manufacturer || \"<unknown>\",\n        area: device.area_id ? areaLookup[device.area_id].name : undefined,\n        integration: device.config_entries.length\n          ? device.config_entries\n              .filter((entId) => entId in entryLookup)\n              .map(\n                (entId) =>\n                  localize(`component.${entryLookup[entId].domain}.title`) ||\n                  entryLookup[entId].domain\n              )\n              .join(\", \")\n          : \"No integration\",\n        battery_entity: [\n          this._batteryEntity(device.id, deviceEntityLookup),\n          this._batteryChargingEntity(device.id, deviceEntityLookup),\n        ],\n        battery_level:\n          this.hass.states[\n            this._batteryEntity(device.id, deviceEntityLookup) || \"\"\n          ]?.state,\n      }));\n\n      this._numHiddenDevices = startLength - outputDevices.length;\n      return {\n        devicesOutput: outputDevices,\n        filteredConfigEntry: filterConfigEntry,\n      };\n    }\n  );\n\n  private _columns = memoizeOne(\n    (narrow: boolean, showDisabled: boolean): DataTableColumnContainer => {\n      const columns: DataTableColumnContainer = narrow\n        ? {\n            name: {\n              title: this.hass.localize(\n                \"ui.panel.config.devices.data_table.device\"\n              ),\n              sortable: true,\n              filterable: true,\n              direction: \"asc\",\n              grows: true,\n              template: (name, device: DataTableRowData) => html`\n                ${name}\n                <div class=\"secondary\">\n                  ${device.area} | ${device.integration}\n                </div>\n              `,\n            },\n          }\n        : {\n            name: {\n              title: this.hass.localize(\n                \"ui.panel.config.devices.data_table.device\"\n              ),\n              sortable: true,\n              filterable: true,\n              grows: true,\n              direction: \"asc\",\n            },\n          };\n\n      columns.manufacturer = {\n        title: this.hass.localize(\n          \"ui.panel.config.devices.data_table.manufacturer\"\n        ),\n        sortable: true,\n        hidden: narrow,\n        filterable: true,\n        width: \"15%\",\n      };\n      columns.model = {\n        title: this.hass.localize(\"ui.panel.config.devices.data_table.model\"),\n        sortable: true,\n        hidden: narrow,\n        filterable: true,\n        width: \"15%\",\n      };\n      columns.area = {\n        title: this.hass.localize(\"ui.panel.config.devices.data_table.area\"),\n        sortable: true,\n        hidden: narrow,\n        filterable: true,\n        width: \"15%\",\n      };\n      columns.integration = {\n        title: this.hass.localize(\n          \"ui.panel.config.devices.data_table.integration\"\n        ),\n        sortable: true,\n        hidden: narrow,\n        filterable: true,\n        width: \"15%\",\n      };\n      columns.battery_entity = {\n        title: this.hass.localize(\"ui.panel.config.devices.data_table.battery\"),\n        sortable: true,\n        filterable: true,\n        type: \"numeric\",\n        width: narrow ? \"95px\" : \"15%\",\n        maxWidth: \"95px\",\n        valueColumn: \"battery_level\",\n        template: (batteryEntityPair: DeviceRowData[\"battery_entity\"]) => {\n          const battery =\n            batteryEntityPair && batteryEntityPair[0]\n              ? this.hass.states[batteryEntityPair[0]]\n              : undefined;\n          const batteryCharging =\n            batteryEntityPair && batteryEntityPair[1]\n              ? this.hass.states[batteryEntityPair[1]]\n              : undefined;\n          const batteryIsBinary =\n            battery && computeStateDomain(battery) === \"binary_sensor\";\n          return battery && (batteryIsBinary || !isNaN(battery.state as any))\n            ? html`\n                ${batteryIsBinary ? \"\" : battery.state + \" %\"}\n                <ha-battery-icon\n                  .hass=${this.hass!}\n                  .batteryStateObj=${battery}\n                  .batteryChargingStateObj=${batteryCharging}\n                ></ha-battery-icon>\n              `\n            : html` - `;\n        },\n      };\n      if (showDisabled) {\n        columns.disabled_by = {\n          title: \"\",\n          type: \"icon\",\n          template: (disabled_by) =>\n            disabled_by\n              ? html`<div\n                  tabindex=\"0\"\n                  style=\"display:inline-block; position: relative;\"\n                >\n                  <ha-svg-icon .path=${mdiCancel}></ha-svg-icon>\n                  <paper-tooltip animation-delay=\"0\" position=\"left\">\n                    ${this.hass.localize(\"ui.panel.config.devices.disabled\")}\n                  </paper-tooltip>\n                </div>`\n              : \"\",\n        };\n      }\n      return columns;\n    }\n  );\n\n  public willUpdate(changedProps) {\n    if (changedProps.has(\"_searchParms\")) {\n      if (this._searchParms.get(\"config_entry\")) {\n        // If we are requested to show the devices for a given config entry,\n        // also show the disabled ones by default.\n        this._showDisabled = true;\n      }\n    }\n  }\n\n  protected render(): TemplateResult {\n    const { devicesOutput, filteredConfigEntry } =\n      this._devicesAndFilterDomains(\n        this.devices,\n        this.entries,\n        this.entities,\n        this.areas,\n        this._searchParms,\n        this._showDisabled,\n        this.hass.localize\n      );\n    const activeFilters = this._activeFilters(\n      this.entries,\n      this._searchParms,\n      this.hass.localize\n    );\n\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .backPath=${this._searchParms.has(\"historyBack\")\n          ? undefined\n          : \"/config\"}\n        .tabs=${configSections.devices}\n        .route=${this.route}\n        .activeFilters=${activeFilters}\n        .numHidden=${this._numHiddenDevices}\n        .searchLabel=${this.hass.localize(\n          \"ui.panel.config.devices.picker.search\"\n        )}\n        .hiddenLabel=${this.hass.localize(\n          \"ui.panel.config.devices.picker.filter.hidden_devices\",\n          \"number\",\n          this._numHiddenDevices\n        )}\n        .columns=${this._columns(this.narrow, this._showDisabled)}\n        .data=${devicesOutput}\n        .filter=${this._filter}\n        @clear-filter=${this._clearFilter}\n        @search-changed=${this._handleSearchChange}\n        @row-click=${this._handleRowClicked}\n        clickable\n        .hasFab=${filteredConfigEntry &&\n        (filteredConfigEntry.domain === \"zha\" ||\n          filteredConfigEntry.domain === \"zwave_js\")}\n      >\n        ${!filteredConfigEntry\n          ? \"\"\n          : filteredConfigEntry.domain === \"zwave_js\"\n          ? html`\n              <ha-fab\n                slot=\"fab\"\n                .label=${this.hass.localize(\"ui.panel.config.zha.add_device\")}\n                extended\n                ?rtl=${computeRTL(this.hass)}\n                @click=${this._showZJSAddDeviceDialog}\n              >\n                <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n              </ha-fab>\n            `\n          : filteredConfigEntry.domain === \"zha\"\n          ? html`<a href=\"/config/zha/add\" slot=\"fab\">\n              <ha-fab\n                .label=${this.hass.localize(\"ui.panel.config.zha.add_device\")}\n                extended\n                ?rtl=${computeRTL(this.hass)}\n              >\n                <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n              </ha-fab>\n            </a>`\n          : html``}\n        <ha-button-menu slot=\"filter-menu\" corner=\"BOTTOM_START\" multi>\n          <ha-icon-button\n            slot=\"trigger\"\n            .label=${this.hass!.localize(\n              \"ui.panel.config.devices.picker.filter.filter\"\n            )}\n            .path=${mdiFilterVariant}\n          ></ha-icon-button>\n          <mwc-list-item\n            @request-selected=${this._showDisabledChanged}\n            graphic=\"control\"\n            .selected=${this._showDisabled}\n          >\n            <ha-checkbox\n              slot=\"graphic\"\n              .checked=${this._showDisabled}\n            ></ha-checkbox>\n            ${this.hass!.localize(\n              \"ui.panel.config.devices.picker.filter.show_disabled\"\n            )}\n          </mwc-list-item>\n        </ha-button-menu>\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  private _batteryEntity(\n    deviceId: string,\n    deviceEntityLookup: DeviceEntityLookup\n  ): string | undefined {\n    const batteryEntity = findBatteryEntity(\n      this.hass,\n      deviceEntityLookup[deviceId] || []\n    );\n    return batteryEntity ? batteryEntity.entity_id : undefined;\n  }\n\n  private _batteryChargingEntity(\n    deviceId: string,\n    deviceEntityLookup: DeviceEntityLookup\n  ): string | undefined {\n    const batteryChargingEntity = findBatteryChargingEntity(\n      this.hass,\n      deviceEntityLookup[deviceId] || []\n    );\n    return batteryChargingEntity ? batteryChargingEntity.entity_id : undefined;\n  }\n\n  private _handleRowClicked(ev: HASSDomEvent<RowClickedEvent>) {\n    const deviceId = ev.detail.id;\n    this._ignoreLocationChange = true;\n    navigate(`/config/devices/device/${deviceId}`);\n  }\n\n  private _showDisabledChanged(ev: CustomEvent<RequestSelectedDetail>) {\n    if (ev.detail.source !== \"property\") {\n      return;\n    }\n    this._showDisabled = ev.detail.selected;\n  }\n\n  private _handleSearchChange(ev: CustomEvent) {\n    this._filter = ev.detail.value;\n  }\n\n  private _clearFilter() {\n    if (\n      this._activeFilters(this.entries, this._searchParms, this.hass.localize)\n    ) {\n      navigate(window.location.pathname, { replace: true });\n    }\n    this._showDisabled = true;\n  }\n\n  private _showZJSAddDeviceDialog() {\n    const { filteredConfigEntry } = this._devicesAndFilterDomains(\n      this.devices,\n      this.entries,\n      this.entities,\n      this.areas,\n      this._searchParms,\n      this._showDisabled,\n      this.hass.localize\n    );\n\n    showZWaveJSAddNodeDialog(this, {\n      entry_id: filteredConfigEntry!.entry_id,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      css`\n        ha-button-menu {\n          margin: 0 -8px 0 8px;\n        }\n      `,\n      haStyle,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-devices-dashboard\": HaConfigDeviceDashboard;\n  }\n}\n"],"names":[],"sourceRoot":""}