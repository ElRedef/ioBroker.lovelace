"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkhome_assistant_frontend"] = self["webpackChunkhome_assistant_frontend"] || []).push([["vendors-node_modules_polymer_app-layout_app-drawer_app-drawer_js-node_modules_comlink_dist_es-79cf3e"],{

/***/ "./node_modules/@polymer/app-layout/app-drawer/app-drawer.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@polymer/app-layout/app-drawer/app-drawer.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _polymer_polymer_polymer_legacy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @polymer/polymer/polymer-legacy.js */ \"./node_modules/@polymer/polymer/polymer-legacy.js\");\n/* harmony import */ var _polymer_iron_flex_layout_iron_flex_layout_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @polymer/iron-flex-layout/iron-flex-layout.js */ \"./node_modules/@polymer/iron-flex-layout/iron-flex-layout.js\");\n/* harmony import */ var _polymer_polymer_lib_legacy_polymer_fn_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @polymer/polymer/lib/legacy/polymer-fn.js */ \"./node_modules/@polymer/polymer/lib/legacy/polymer-fn.js\");\n/* harmony import */ var _polymer_polymer_lib_legacy_polymer_dom_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @polymer/polymer/lib/legacy/polymer.dom.js */ \"./node_modules/@polymer/polymer/lib/legacy/polymer.dom.js\");\n/* harmony import */ var _polymer_polymer_lib_utils_html_tag_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @polymer/polymer/lib/utils/html-tag.js */ \"./node_modules/@polymer/polymer/lib/utils/html-tag.js\");\n/* harmony import */ var _polymer_polymer_lib_utils_render_status_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @polymer/polymer/lib/utils/render-status.js */ \"./node_modules/@polymer/polymer/lib/utils/render-status.js\");\n/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n\n\n\n\n\n\n/**\napp-drawer is a navigation drawer that can slide in from the left or right.\n\nExample:\n\nAlign the drawer at the start, which is left in LTR layouts (default):\n\n```html\n<app-drawer opened></app-drawer>\n```\n\nAlign the drawer at the end:\n\n```html\n<app-drawer align=\"end\" opened></app-drawer>\n```\n\nTo make the contents of the drawer scrollable, create a wrapper for the scroll\ncontent, and apply height and overflow styles to it.\n\n```html\n<app-drawer>\n  <div style=\"height: 100%; overflow: auto;\"></div>\n</app-drawer>\n```\n\n### Styling\n\nCustom property                  | Description                            | Default\n---------------------------------|----------------------------------------|--------------------\n`--app-drawer-width`             | Width of the drawer                    | 256px\n`--app-drawer-content-container` | Mixin for the drawer content container | {}\n`--app-drawer-scrim-background`  | Background for the scrim               | rgba(0, 0, 0, 0.5)\n\n**NOTE:** If you use `<app-drawer>` with `<app-drawer-layout>` and specify a\nvalue for\n`--app-drawer-width`, that value must be accessible by both elements. This can\nbe done by defining the value on the `:host` that contains `<app-drawer-layout>`\n(or `html` if outside a shadow root):\n\n```css\n:host {\n  --app-drawer-width: 300px;\n}\n```\n\n@element app-drawer\n@demo app-drawer/demo/left-drawer.html Simple Left Drawer\n@demo app-drawer/demo/right-drawer.html Right Drawer with Icons\n*/\n\n(0,_polymer_polymer_lib_legacy_polymer_fn_js__WEBPACK_IMPORTED_MODULE_2__.Polymer)({\n  /** @override */\n  _template: _polymer_polymer_lib_utils_html_tag_js__WEBPACK_IMPORTED_MODULE_4__.html`\n    <style>\n      :host {\n        position: fixed;\n        top: -120px;\n        right: 0;\n        bottom: -120px;\n        left: 0;\n\n        visibility: hidden;\n\n        transition-property: visibility;\n      }\n\n      :host([opened]) {\n        visibility: visible;\n      }\n\n      :host([persistent]) {\n        width: var(--app-drawer-width, 256px);\n      }\n\n      :host([persistent][position=left]) {\n        right: auto;\n      }\n\n      :host([persistent][position=right]) {\n        left: auto;\n      }\n\n      #contentContainer {\n        position: absolute;\n        top: 0;\n        bottom: 0;\n        left: 0;\n\n        width: var(--app-drawer-width, 256px);\n        padding: var(--app-drawer-content-padding, 120px 0);\n\n        transition-property: -webkit-transform;\n        transition-property: transform;\n        -webkit-transform: translate3d(-100%, 0, 0);\n        transform: translate3d(-100%, 0, 0);\n\n        background-color: #FFF;\n\n        @apply --app-drawer-content-container;\n      }\n\n      #contentContainer[persistent] {\n        width: 100%;\n      }\n\n      #contentContainer[position=right] {\n        right: 0;\n        left: auto;\n\n        -webkit-transform: translate3d(100%, 0, 0);\n        transform: translate3d(100%, 0, 0);\n      }\n\n      #contentContainer[swipe-open]::after {\n        position: fixed;\n        top: 0;\n        bottom: 0;\n        left: 100%;\n\n        visibility: visible;\n\n        width: 20px;\n\n        content: '';\n      }\n\n      #contentContainer[swipe-open][position=right]::after {\n        right: 100%;\n        left: auto;\n      }\n\n      #contentContainer[opened] {\n        -webkit-transform: translate3d(0, 0, 0);\n        transform: translate3d(0, 0, 0);\n      }\n\n      #scrim {\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n\n        transition-property: opacity;\n        -webkit-transform: translateZ(0);\n        transform:  translateZ(0);\n\n        opacity: 0;\n        background: var(--app-drawer-scrim-background, rgba(0, 0, 0, 0.5));\n      }\n\n      #scrim.visible {\n        opacity: 1;\n      }\n\n      :host([no-transition]) #contentContainer {\n        transition-property: none;\n      }\n    </style>\n\n    <div id=\"scrim\" on-click=\"close\"></div>\n\n    <!-- HACK(keanulee): Bind attributes here (in addition to :host) for styling to workaround Safari\n    bug. https://bugs.webkit.org/show_bug.cgi?id=170762 -->\n    <div id=\"contentContainer\" opened\\$=\"[[opened]]\" persistent\\$=\"[[persistent]]\" position\\$=\"[[position]]\" swipe-open\\$=\"[[swipeOpen]]\">\n      <slot></slot>\n    </div>\n`,\n  is: 'app-drawer',\n  properties: {\n    /**\n     * The opened state of the drawer.\n     */\n    opened: {\n      type: Boolean,\n      value: false,\n      notify: true,\n      reflectToAttribute: true\n    },\n\n    /**\n     * The drawer does not have a scrim and cannot be swiped close.\n     */\n    persistent: {\n      type: Boolean,\n      value: false,\n      reflectToAttribute: true\n    },\n\n    /**\n     * The transition duration of the drawer in milliseconds.\n     */\n    transitionDuration: {\n      type: Number,\n      value: 200\n    },\n\n    /**\n     * The alignment of the drawer on the screen ('left', 'right', 'start' or\n     * 'end'). 'start' computes to left and 'end' to right in LTR layout and\n     * vice versa in RTL layout.\n     */\n    align: {\n      type: String,\n      value: 'left'\n    },\n\n    /**\n     * The computed, read-only position of the drawer on the screen ('left' or\n     * 'right').\n     */\n    position: {\n      type: String,\n      readOnly: true,\n      reflectToAttribute: true\n    },\n\n    /**\n     * Create an area at the edge of the screen to swipe open the drawer.\n     */\n    swipeOpen: {\n      type: Boolean,\n      value: false,\n      reflectToAttribute: true\n    },\n\n    /**\n     * Trap keyboard focus when the drawer is opened and not persistent.\n     */\n    noFocusTrap: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * Disables swiping on the drawer.\n     */\n    disableSwipe: {\n      type: Boolean,\n      value: false\n    }\n  },\n  observers: ['resetLayout(position, isAttached)', '_resetPosition(align, isAttached)', '_styleTransitionDuration(transitionDuration)', '_openedPersistentChanged(opened, persistent)'],\n  _translateOffset: 0,\n  _trackDetails: null,\n  _drawerState: 0,\n  _boundEscKeydownHandler: null,\n  _firstTabStop: null,\n  _lastTabStop: null,\n\n  /** @override */\n  attached: function () {\n    (0,_polymer_polymer_lib_utils_render_status_js__WEBPACK_IMPORTED_MODULE_5__.afterNextRender)(this, function () {\n      this._boundEscKeydownHandler = this._escKeydownHandler.bind(this);\n      this.addEventListener('keydown', this._tabKeydownHandler.bind(this)); // Only listen for horizontal track so you can vertically scroll\n      // inside the drawer.\n\n      this.listen(this, 'track', '_track');\n      this.setScrollDirection('y');\n    });\n    this.fire('app-reset-layout');\n  },\n\n  /** @override */\n  detached: function () {\n    document.removeEventListener('keydown', this._boundEscKeydownHandler);\n  },\n\n  /**\n   * Opens the drawer.\n   */\n  open: function () {\n    this.opened = true;\n  },\n\n  /**\n   * Closes the drawer.\n   */\n  close: function () {\n    this.opened = false;\n  },\n\n  /**\n   * Toggles the drawer open and close.\n   */\n  toggle: function () {\n    this.opened = !this.opened;\n  },\n\n  /**\n   * Gets the width of the drawer.\n   *\n   * @return {number} The width of the drawer in pixels.\n   */\n  getWidth: function () {\n    return this._savedWidth || this.$.contentContainer.offsetWidth;\n  },\n  _isRTL: function () {\n    return window.getComputedStyle(this).direction === 'rtl';\n  },\n  _resetPosition: function () {\n    switch (this.align) {\n      case 'start':\n        this._setPosition(this._isRTL() ? 'right' : 'left');\n\n        return;\n\n      case 'end':\n        this._setPosition(this._isRTL() ? 'left' : 'right');\n\n        return;\n    }\n\n    this._setPosition(this.align);\n  },\n  _escKeydownHandler: function (event) {\n    var ESC_KEYCODE = 27;\n\n    if (event.keyCode === ESC_KEYCODE) {\n      // Prevent any side effects if app-drawer closes.\n      event.preventDefault();\n      this.close();\n    }\n  },\n  _track: function (event) {\n    if (this.persistent || this.disableSwipe) {\n      return;\n    } // Disable user selection on desktop.\n\n\n    event.preventDefault();\n\n    switch (event.detail.state) {\n      case 'start':\n        this._trackStart(event);\n\n        break;\n\n      case 'track':\n        this._trackMove(event);\n\n        break;\n\n      case 'end':\n        this._trackEnd(event);\n\n        break;\n    }\n  },\n  _trackStart: function (event) {\n    this._drawerState = this._DRAWER_STATE.TRACKING;\n    var rect = this.$.contentContainer.getBoundingClientRect();\n    this._savedWidth = rect.width;\n\n    if (this.position === 'left') {\n      this._translateOffset = rect.left;\n    } else {\n      this._translateOffset = rect.right - window.innerWidth;\n    }\n\n    this._trackDetails = []; // Disable transitions since style attributes will reflect user track\n    // events.\n\n    this._styleTransitionDuration(0);\n\n    this.style.visibility = 'visible';\n  },\n  _trackMove: function (event) {\n    this._translateDrawer(event.detail.dx + this._translateOffset); // Use Date.now() since event.timeStamp is inconsistent across browsers\n    // (e.g. most browsers use milliseconds but FF 44 uses microseconds).\n\n\n    this._trackDetails.push({\n      dx: event.detail.dx,\n      timeStamp: Date.now()\n    });\n  },\n  _trackEnd: function (event) {\n    var x = event.detail.dx + this._translateOffset;\n    var drawerWidth = this.getWidth();\n    var isPositionLeft = this.position === 'left';\n    var isInEndState = isPositionLeft ? x >= 0 || x <= -drawerWidth : x <= 0 || x >= drawerWidth;\n\n    if (!isInEndState) {\n      // No longer need the track events after this method returns - allow them\n      // to be GC'd.\n      var trackDetails = this._trackDetails;\n      this._trackDetails = null;\n\n      this._flingDrawer(event, trackDetails);\n\n      if (this._drawerState === this._DRAWER_STATE.FLINGING) {\n        return;\n      }\n    } // If the drawer is not flinging, toggle the opened state based on the\n    // position of the drawer.\n\n\n    var halfWidth = drawerWidth / 2;\n\n    if (event.detail.dx < -halfWidth) {\n      this.opened = this.position === 'right';\n    } else if (event.detail.dx > halfWidth) {\n      this.opened = this.position === 'left';\n    }\n\n    if (isInEndState) {\n      this.debounce('_resetDrawerState', this._resetDrawerState);\n    } else {\n      this.debounce('_resetDrawerState', this._resetDrawerState, this.transitionDuration);\n    }\n\n    this._styleTransitionDuration(this.transitionDuration);\n\n    this._resetDrawerTranslate();\n\n    this.style.visibility = '';\n  },\n  _calculateVelocity: function (event, trackDetails) {\n    // Find the oldest track event that is within 100ms using binary search.\n    var now = Date.now();\n    var timeLowerBound = now - 100;\n    var trackDetail;\n    var min = 0;\n    var max = trackDetails.length - 1;\n\n    while (min <= max) {\n      // Floor of average of min and max.\n      var mid = min + max >> 1;\n      var d = trackDetails[mid];\n\n      if (d.timeStamp >= timeLowerBound) {\n        trackDetail = d;\n        max = mid - 1;\n      } else {\n        min = mid + 1;\n      }\n    }\n\n    if (trackDetail) {\n      var dx = event.detail.dx - trackDetail.dx;\n      var dt = now - trackDetail.timeStamp || 1;\n      return dx / dt;\n    }\n\n    return 0;\n  },\n  _flingDrawer: function (event, trackDetails) {\n    var velocity = this._calculateVelocity(event, trackDetails); // Do not fling if velocity is not above a threshold.\n\n\n    if (Math.abs(velocity) < this._MIN_FLING_THRESHOLD) {\n      return;\n    }\n\n    this._drawerState = this._DRAWER_STATE.FLINGING;\n    var x = event.detail.dx + this._translateOffset;\n    var drawerWidth = this.getWidth();\n    var isPositionLeft = this.position === 'left';\n    var isVelocityPositive = velocity > 0;\n    var isClosingLeft = !isVelocityPositive && isPositionLeft;\n    var isClosingRight = isVelocityPositive && !isPositionLeft;\n    var dx;\n\n    if (isClosingLeft) {\n      dx = -(x + drawerWidth);\n    } else if (isClosingRight) {\n      dx = drawerWidth - x;\n    } else {\n      dx = -x;\n    } // Enforce a minimum transition velocity to make the drawer feel snappy.\n\n\n    if (isVelocityPositive) {\n      velocity = Math.max(velocity, this._MIN_TRANSITION_VELOCITY);\n      this.opened = this.position === 'left';\n    } else {\n      velocity = Math.min(velocity, -this._MIN_TRANSITION_VELOCITY);\n      this.opened = this.position === 'right';\n    } // Calculate the amount of time needed to finish the transition based on the\n    // initial slope of the timing function.\n\n\n    var t = this._FLING_INITIAL_SLOPE * dx / velocity;\n\n    this._styleTransitionDuration(t);\n\n    this._styleTransitionTimingFunction(this._FLING_TIMING_FUNCTION);\n\n    this._resetDrawerTranslate();\n\n    this.debounce('_resetDrawerState', this._resetDrawerState, t);\n  },\n  _styleTransitionDuration: function (duration) {\n    this.style.transitionDuration = duration + 'ms';\n    this.$.contentContainer.style.transitionDuration = duration + 'ms';\n    this.$.scrim.style.transitionDuration = duration + 'ms';\n  },\n  _styleTransitionTimingFunction: function (timingFunction) {\n    this.$.contentContainer.style.transitionTimingFunction = timingFunction;\n    this.$.scrim.style.transitionTimingFunction = timingFunction;\n  },\n  _translateDrawer: function (x) {\n    var drawerWidth = this.getWidth();\n\n    if (this.position === 'left') {\n      x = Math.max(-drawerWidth, Math.min(x, 0));\n      this.$.scrim.style.opacity = 1 + x / drawerWidth;\n    } else {\n      x = Math.max(0, Math.min(x, drawerWidth));\n      this.$.scrim.style.opacity = 1 - x / drawerWidth;\n    }\n\n    this.translate3d(x + 'px', '0', '0', this.$.contentContainer);\n  },\n  _resetDrawerTranslate: function () {\n    this.$.scrim.style.opacity = '';\n    this.transform('', this.$.contentContainer);\n  },\n  _resetDrawerState: function () {\n    var oldState = this._drawerState; // If the drawer was flinging, we need to reset the style attributes.\n\n    if (oldState === this._DRAWER_STATE.FLINGING) {\n      this._styleTransitionDuration(this.transitionDuration);\n\n      this._styleTransitionTimingFunction('');\n\n      this.style.visibility = '';\n    }\n\n    this._savedWidth = null;\n\n    if (this.opened) {\n      this._drawerState = this.persistent ? this._DRAWER_STATE.OPENED_PERSISTENT : this._DRAWER_STATE.OPENED;\n    } else {\n      this._drawerState = this._DRAWER_STATE.CLOSED;\n    }\n\n    if (oldState !== this._drawerState) {\n      if (this._drawerState === this._DRAWER_STATE.OPENED) {\n        this._setKeyboardFocusTrap();\n\n        document.addEventListener('keydown', this._boundEscKeydownHandler);\n        document.body.style.overflow = 'hidden';\n      } else {\n        document.removeEventListener('keydown', this._boundEscKeydownHandler);\n        document.body.style.overflow = '';\n      } // Don't fire the event on initial load.\n\n\n      if (oldState !== this._DRAWER_STATE.INIT) {\n        this.fire('app-drawer-transitioned');\n      }\n    }\n  },\n\n  /**\n   * Resets the layout.\n   *\n   * @method resetLayout\n   */\n  resetLayout: function () {\n    this.fire('app-reset-layout');\n  },\n  _setKeyboardFocusTrap: function () {\n    if (this.noFocusTrap) {\n      return;\n    } // NOTE: Unless we use /deep/ (which we shouldn't since it's deprecated),\n    // this will not select focusable elements inside shadow roots.\n\n\n    var focusableElementsSelector = ['a[href]:not([tabindex=\"-1\"])', 'area[href]:not([tabindex=\"-1\"])', 'input:not([disabled]):not([tabindex=\"-1\"])', 'select:not([disabled]):not([tabindex=\"-1\"])', 'textarea:not([disabled]):not([tabindex=\"-1\"])', 'button:not([disabled]):not([tabindex=\"-1\"])', 'iframe:not([tabindex=\"-1\"])', '[tabindex]:not([tabindex=\"-1\"])', '[contentEditable=true]:not([tabindex=\"-1\"])'].join(',');\n    var focusableElements = (0,_polymer_polymer_lib_legacy_polymer_dom_js__WEBPACK_IMPORTED_MODULE_3__.dom)(this).querySelectorAll(focusableElementsSelector);\n\n    if (focusableElements.length > 0) {\n      this._firstTabStop = focusableElements[0];\n      this._lastTabStop = focusableElements[focusableElements.length - 1];\n    } else {\n      // Reset saved tab stops when there are no focusable elements in the\n      // drawer.\n      this._firstTabStop = null;\n      this._lastTabStop = null;\n    } // Focus on app-drawer if it has non-zero tabindex. Otherwise, focus the\n    // first focusable element in the drawer, if it exists. Use the tabindex\n    // attribute since the this.tabIndex property in IE/Edge returns 0 (instead\n    // of -1) when the attribute is not set.\n\n\n    var tabindex = this.getAttribute('tabindex');\n\n    if (tabindex && parseInt(tabindex, 10) > -1) {\n      this.focus();\n    } else if (this._firstTabStop) {\n      this._firstTabStop.focus();\n    }\n  },\n  _tabKeydownHandler: function (event) {\n    if (this.noFocusTrap) {\n      return;\n    }\n\n    var TAB_KEYCODE = 9;\n\n    if (this._drawerState === this._DRAWER_STATE.OPENED && event.keyCode === TAB_KEYCODE) {\n      if (event.shiftKey) {\n        if (this._firstTabStop && (0,_polymer_polymer_lib_legacy_polymer_dom_js__WEBPACK_IMPORTED_MODULE_3__.dom)(event).localTarget === this._firstTabStop) {\n          event.preventDefault();\n\n          this._lastTabStop.focus();\n        }\n      } else {\n        if (this._lastTabStop && (0,_polymer_polymer_lib_legacy_polymer_dom_js__WEBPACK_IMPORTED_MODULE_3__.dom)(event).localTarget === this._lastTabStop) {\n          event.preventDefault();\n\n          this._firstTabStop.focus();\n        }\n      }\n    }\n  },\n  _openedPersistentChanged: function (opened, persistent) {\n    this.toggleClass('visible', opened && !persistent, this.$.scrim); // Use a debounce timer instead of transitionend since transitionend won't\n    // fire when app-drawer is display: none.\n\n    this.debounce('_resetDrawerState', this._resetDrawerState, this.transitionDuration);\n  },\n  _MIN_FLING_THRESHOLD: 0.2,\n  _MIN_TRANSITION_VELOCITY: 1.2,\n  _FLING_TIMING_FUNCTION: 'cubic-bezier(0.667, 1, 0.667, 1)',\n  _FLING_INITIAL_SLOPE: 1.5,\n  _DRAWER_STATE: {\n    INIT: 0,\n    OPENED: 1,\n    OPENED_PERSISTENT: 2,\n    CLOSED: 3,\n    TRACKING: 4,\n    FLINGING: 5\n  }\n  /**\n   * Fired when the layout of app-drawer has changed.\n   *\n   * @event app-reset-layout\n   */\n\n  /**\n   * Fired when app-drawer has finished transitioning.\n   *\n   * @event app-drawer-transitioned\n   */\n\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@polymer/app-layout/app-drawer/app-drawer.js\n");

/***/ }),

/***/ "./node_modules/comlink/dist/esm/comlink.mjs":
/*!***************************************************!*\
  !*** ./node_modules/comlink/dist/esm/comlink.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createEndpoint\": () => (/* binding */ createEndpoint),\n/* harmony export */   \"expose\": () => (/* binding */ expose),\n/* harmony export */   \"proxy\": () => (/* binding */ proxy),\n/* harmony export */   \"proxyMarker\": () => (/* binding */ proxyMarker),\n/* harmony export */   \"releaseProxy\": () => (/* binding */ releaseProxy),\n/* harmony export */   \"transfer\": () => (/* binding */ transfer),\n/* harmony export */   \"transferHandlers\": () => (/* binding */ transferHandlers),\n/* harmony export */   \"windowEndpoint\": () => (/* binding */ windowEndpoint),\n/* harmony export */   \"wrap\": () => (/* binding */ wrap)\n/* harmony export */ });\n/**\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\n\nconst isObject = val => typeof val === \"object\" && val !== null || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\n\n\nconst proxyTransferHandler = {\n  canHandle: val => isObject(val) && val[proxyMarker],\n\n  serialize(obj) {\n    const {\n      port1,\n      port2\n    } = new MessageChannel();\n    expose(obj, port1);\n    return [port2, [port2]];\n  },\n\n  deserialize(port) {\n    port.start();\n    return wrap(port);\n  }\n\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\n\nconst throwTransferHandler = {\n  canHandle: value => isObject(value) && throwMarker in value,\n\n  serialize({\n    value\n  }) {\n    let serialized;\n\n    if (value instanceof Error) {\n      serialized = {\n        isError: true,\n        value: {\n          message: value.message,\n          name: value.name,\n          stack: value.stack\n        }\n      };\n    } else {\n      serialized = {\n        isError: false,\n        value\n      };\n    }\n\n    return [serialized, []];\n  },\n\n  deserialize(serialized) {\n    if (serialized.isError) {\n      throw Object.assign(new Error(serialized.value.message), serialized.value);\n    }\n\n    throw serialized.value;\n  }\n\n};\n/**\n * Allows customizing the serialization of certain values.\n */\n\nconst transferHandlers = new Map([[\"proxy\", proxyTransferHandler], [\"throw\", throwTransferHandler]]);\n\nfunction expose(obj, ep = self) {\n  ep.addEventListener(\"message\", function callback(ev) {\n    if (!ev || !ev.data) {\n      return;\n    }\n\n    const {\n      id,\n      type,\n      path\n    } = Object.assign({\n      path: []\n    }, ev.data);\n    const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n    let returnValue;\n\n    try {\n      const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n      const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n\n      switch (type) {\n        case \"GET\"\n        /* GET */\n        :\n          {\n            returnValue = rawValue;\n          }\n          break;\n\n        case \"SET\"\n        /* SET */\n        :\n          {\n            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n            returnValue = true;\n          }\n          break;\n\n        case \"APPLY\"\n        /* APPLY */\n        :\n          {\n            returnValue = rawValue.apply(parent, argumentList);\n          }\n          break;\n\n        case \"CONSTRUCT\"\n        /* CONSTRUCT */\n        :\n          {\n            const value = new rawValue(...argumentList);\n            returnValue = proxy(value);\n          }\n          break;\n\n        case \"ENDPOINT\"\n        /* ENDPOINT */\n        :\n          {\n            const {\n              port1,\n              port2\n            } = new MessageChannel();\n            expose(obj, port2);\n            returnValue = transfer(port1, [port1]);\n          }\n          break;\n\n        case \"RELEASE\"\n        /* RELEASE */\n        :\n          {\n            returnValue = undefined;\n          }\n          break;\n\n        default:\n          return;\n      }\n    } catch (value) {\n      returnValue = {\n        value,\n        [throwMarker]: 0\n      };\n    }\n\n    Promise.resolve(returnValue).catch(value => {\n      return {\n        value,\n        [throwMarker]: 0\n      };\n    }).then(returnValue => {\n      const [wireValue, transferables] = toWireValue(returnValue);\n      ep.postMessage(Object.assign(Object.assign({}, wireValue), {\n        id\n      }), transferables);\n\n      if (type === \"RELEASE\"\n      /* RELEASE */\n      ) {\n        // detach and deactive after sending release response above.\n        ep.removeEventListener(\"message\", callback);\n        closeEndPoint(ep);\n      }\n    });\n  });\n\n  if (ep.start) {\n    ep.start();\n  }\n}\n\nfunction isMessagePort(endpoint) {\n  return endpoint.constructor.name === \"MessagePort\";\n}\n\nfunction closeEndPoint(endpoint) {\n  if (isMessagePort(endpoint)) endpoint.close();\n}\n\nfunction wrap(ep, target) {\n  return createProxy(ep, [], target);\n}\n\nfunction throwIfProxyReleased(isReleased) {\n  if (isReleased) {\n    throw new Error(\"Proxy has been released and is not useable\");\n  }\n}\n\nfunction createProxy(ep, path = [], target = function () {}) {\n  let isProxyReleased = false;\n  const proxy = new Proxy(target, {\n    get(_target, prop) {\n      throwIfProxyReleased(isProxyReleased);\n\n      if (prop === releaseProxy) {\n        return () => {\n          return requestResponseMessage(ep, {\n            type: \"RELEASE\"\n            /* RELEASE */\n            ,\n            path: path.map(p => p.toString())\n          }).then(() => {\n            closeEndPoint(ep);\n            isProxyReleased = true;\n          });\n        };\n      }\n\n      if (prop === \"then\") {\n        if (path.length === 0) {\n          return {\n            then: () => proxy\n          };\n        }\n\n        const r = requestResponseMessage(ep, {\n          type: \"GET\"\n          /* GET */\n          ,\n          path: path.map(p => p.toString())\n        }).then(fromWireValue);\n        return r.then.bind(r);\n      }\n\n      return createProxy(ep, [...path, prop]);\n    },\n\n    set(_target, prop, rawValue) {\n      throwIfProxyReleased(isProxyReleased); // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n      // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n\n      const [value, transferables] = toWireValue(rawValue);\n      return requestResponseMessage(ep, {\n        type: \"SET\"\n        /* SET */\n        ,\n        path: [...path, prop].map(p => p.toString()),\n        value\n      }, transferables).then(fromWireValue);\n    },\n\n    apply(_target, _thisArg, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const last = path[path.length - 1];\n\n      if (last === createEndpoint) {\n        return requestResponseMessage(ep, {\n          type: \"ENDPOINT\"\n          /* ENDPOINT */\n\n        }).then(fromWireValue);\n      } // We just pretend that `bind()` didn’t happen.\n\n\n      if (last === \"bind\") {\n        return createProxy(ep, path.slice(0, -1));\n      }\n\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(ep, {\n        type: \"APPLY\"\n        /* APPLY */\n        ,\n        path: path.map(p => p.toString()),\n        argumentList\n      }, transferables).then(fromWireValue);\n    },\n\n    construct(_target, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(ep, {\n        type: \"CONSTRUCT\"\n        /* CONSTRUCT */\n        ,\n        path: path.map(p => p.toString()),\n        argumentList\n      }, transferables).then(fromWireValue);\n    }\n\n  });\n  return proxy;\n}\n\nfunction myFlat(arr) {\n  return Array.prototype.concat.apply([], arr);\n}\n\nfunction processArguments(argumentList) {\n  const processed = argumentList.map(toWireValue);\n  return [processed.map(v => v[0]), myFlat(processed.map(v => v[1]))];\n}\n\nconst transferCache = new WeakMap();\n\nfunction transfer(obj, transfers) {\n  transferCache.set(obj, transfers);\n  return obj;\n}\n\nfunction proxy(obj) {\n  return Object.assign(obj, {\n    [proxyMarker]: true\n  });\n}\n\nfunction windowEndpoint(w, context = self, targetOrigin = \"*\") {\n  return {\n    postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n    addEventListener: context.addEventListener.bind(context),\n    removeEventListener: context.removeEventListener.bind(context)\n  };\n}\n\nfunction toWireValue(value) {\n  for (const [name, handler] of transferHandlers) {\n    if (handler.canHandle(value)) {\n      const [serializedValue, transferables] = handler.serialize(value);\n      return [{\n        type: \"HANDLER\"\n        /* HANDLER */\n        ,\n        name,\n        value: serializedValue\n      }, transferables];\n    }\n  }\n\n  return [{\n    type: \"RAW\"\n    /* RAW */\n    ,\n    value\n  }, transferCache.get(value) || []];\n}\n\nfunction fromWireValue(value) {\n  switch (value.type) {\n    case \"HANDLER\"\n    /* HANDLER */\n    :\n      return transferHandlers.get(value.name).deserialize(value.value);\n\n    case \"RAW\"\n    /* RAW */\n    :\n      return value.value;\n  }\n}\n\nfunction requestResponseMessage(ep, msg, transfers) {\n  return new Promise(resolve => {\n    const id = generateUUID();\n    ep.addEventListener(\"message\", function l(ev) {\n      if (!ev.data || !ev.data.id || ev.data.id !== id) {\n        return;\n      }\n\n      ep.removeEventListener(\"message\", l);\n      resolve(ev.data);\n    });\n\n    if (ep.start) {\n      ep.start();\n    }\n\n    ep.postMessage(Object.assign({\n      id\n    }, msg), transfers);\n  });\n}\n\nfunction generateUUID() {\n  return new Array(4).fill(0).map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16)).join(\"-\");\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/comlink/dist/esm/comlink.mjs\n");

/***/ })

}]);