/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkhome_assistant_frontend"] = self["webpackChunkhome_assistant_frontend"] || []).push([["vendors-node_modules_proxy-polyfill_src_index_js"],{

/***/ "./node_modules/proxy-polyfill/src/index.js":
/*!**************************************************!*\
  !*** ./node_modules/proxy-polyfill/src/index.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("/*\n * Copyright 2018 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\n\n(function (scope) {\n  if (scope['Proxy']) {\n    return;\n  }\n\n  scope.Proxy = __webpack_require__(/*! ./proxy.js */ \"./node_modules/proxy-polyfill/src/proxy.js\")();\n  scope.Proxy['revocable'] = scope.Proxy.revocable;\n})('undefined' !== typeof process && '[object process]' === {}.toString.call(process) || 'undefined' !== typeof navigator && navigator.product === 'ReactNative' ? global : self);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcHJveHktcG9seWZpbGwvc3JjL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2hvbWUtYXNzaXN0YW50LWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3Byb3h5LXBvbHlmaWxsL3NyYy9pbmRleC5qcz8yODQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90XG4gKiB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZlxuICogdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUXG4gKiBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGVcbiAqIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyXG4gKiB0aGUgTGljZW5zZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbihmdW5jdGlvbihzY29wZSkge1xuICBpZiAoc2NvcGVbJ1Byb3h5J10pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgc2NvcGUuUHJveHkgPSByZXF1aXJlKCcuL3Byb3h5LmpzJykoKTtcbiAgc2NvcGUuUHJveHlbJ3Jldm9jYWJsZSddID0gc2NvcGUuUHJveHkucmV2b2NhYmxlO1xufSkoXG4gICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIHByb2Nlc3MgJiZcbiAgICAnW29iamVjdCBwcm9jZXNzXScgPT09IHt9LnRvU3RyaW5nLmNhbGwocHJvY2VzcykpIHx8XG4gICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJylcbiAgICA/IGdsb2JhbFxuICAgIDogc2VsZlxuKTtcblxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/proxy-polyfill/src/index.js\n");

/***/ }),

/***/ "./node_modules/proxy-polyfill/src/proxy.js":
/*!**************************************************!*\
  !*** ./node_modules/proxy-polyfill/src/proxy.js ***!
  \**************************************************/
/***/ (function(module) {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\nmodule.exports = function proxyPolyfill() {\n  var lastRevokeFn = null;\n\n  var _ProxyPolyfill;\n  /**\n   * @param {*} o\n   * @return {boolean} whether this is probably a (non-null) Object\n   */\n\n\n  function isObject(o) {\n    return o ? _typeof(o) === 'object' || typeof o === 'function' : false;\n  }\n\n  function validateProto(proto) {\n    if (proto !== null && !isObject(proto)) {\n      throw new TypeError('Object prototype may only be an Object or null: ' + proto);\n    }\n  }\n\n  var $Object = Object; // Closure assumes that `{__proto__: null} instanceof Object` is always true, hence why we check against a different name.\n\n  var canCreateNullProtoObjects = Boolean($Object.create) || !({\n    __proto__: null\n  } instanceof $Object);\n  var objectCreate = $Object.create || (canCreateNullProtoObjects ? function create(proto) {\n    validateProto(proto);\n    return {\n      __proto__: proto\n    };\n  } : function create(proto) {\n    validateProto(proto);\n\n    if (proto === null) {\n      throw new SyntaxError('Native Object.create is required to create objects with null prototype');\n    } // nb. cast to convince Closure compiler that this is a constructor\n\n\n    var T = function T() {};\n\n    T.prototype = proto;\n    return new T();\n  });\n\n  var noop = function noop() {\n    return null;\n  };\n\n  var getProto = $Object.getPrototypeOf || ([].__proto__ === Array.prototype ? function getPrototypeOf(O) {\n    // If O.[[Prototype]] === null, then the __proto__ accessor won't exist,\n    // as it's inherited from `Object.prototype`\n    var proto = O.__proto__;\n    return isObject(proto) ? proto : null;\n  } : noop);\n  /**\n   * @constructor\n   * @param {!Object} target\n   * @param {{apply, construct, get, set}} handler\n   */\n\n  _ProxyPolyfill = function ProxyPolyfill(target, handler) {\n    var newTarget = this && this instanceof _ProxyPolyfill ? this.constructor : undefined;\n\n    if (newTarget === undefined) {\n      throw new TypeError(\"Constructor Proxy requires 'new'\");\n    }\n\n    if (!isObject(target) || !isObject(handler)) {\n      throw new TypeError('Cannot create proxy with a non-object as target or handler');\n    } // Construct revoke function, and set lastRevokeFn so that Proxy.revocable can steal it.\n    // The caller might get the wrong revoke function if a user replaces or wraps scope.Proxy\n    // to call itself, but that seems unlikely especially when using the polyfill.\n\n\n    var throwRevoked = function throwRevoked() {};\n\n    lastRevokeFn = function lastRevokeFn() {\n      /** @suppress {checkTypes} */\n      target = null; // clear ref\n\n      throwRevoked = function throwRevoked(trap) {\n        throw new TypeError(\"Cannot perform '\".concat(trap, \"' on a proxy that has been revoked\"));\n      };\n    };\n\n    setTimeout(function () {\n      lastRevokeFn = null;\n    }, 0); // Fail on unsupported traps: Chrome doesn't do this, but ensure that users of the polyfill\n    // are a bit more careful. Copy the internal parts of handler to prevent user changes.\n\n    var unsafeHandler = handler;\n    handler = {\n      'get': null,\n      'set': null,\n      'apply': null,\n      'construct': null\n    };\n\n    for (var k in unsafeHandler) {\n      if (!(k in handler)) {\n        throw new TypeError(\"Proxy polyfill does not support trap '\".concat(k, \"'\"));\n      }\n\n      handler[k] = unsafeHandler[k];\n    }\n\n    if (typeof unsafeHandler === 'function') {\n      // Allow handler to be a function (which has an 'apply' method). This matches what is\n      // probably a bug in native versions. It treats the apply call as a trap to be configured.\n      handler.apply = unsafeHandler.apply.bind(unsafeHandler);\n    } // Define proxy as an object that extends target.[[Prototype]],\n    // or a Function (if either it's callable, or apply is set).\n\n\n    var proto = getProto(target); // can return null in old browsers\n\n    var proxy;\n    var isMethod = false;\n    var isArray = false;\n\n    if (typeof target === 'function') {\n      proxy = function ProxyPolyfill() {\n        var usingNew = this && this.constructor === proxy;\n        var args = Array.prototype.slice.call(arguments);\n        throwRevoked(usingNew ? 'construct' : 'apply'); // TODO(samthor): Closure compiler doesn't know about 'construct', attempts to rename it.\n\n        if (usingNew && handler['construct']) {\n          return handler['construct'].call(this, target, args);\n        } else if (!usingNew && handler.apply) {\n          return handler['apply'](target, this, args);\n        } // since the target was a function, fallback to calling it directly.\n\n\n        if (usingNew) {\n          // inspired by answers to https://stackoverflow.com/q/1606797\n          args.unshift(target); // pass class as first arg to constructor, although irrelevant\n          // nb. cast to convince Closure compiler that this is a constructor\n\n          var f = target.bind.apply(target, args);\n          return new f();\n        }\n\n        return target.apply(this, args);\n      };\n\n      isMethod = true;\n    } else if (target instanceof Array) {\n      proxy = [];\n      isArray = true;\n    } else {\n      proxy = canCreateNullProtoObjects || proto !== null ? objectCreate(proto) : {};\n    } // Create default getters/setters. Create different code paths as handler.get/handler.set can't\n    // change after creation.\n\n\n    var getter = handler.get ? function (prop) {\n      throwRevoked('get');\n      return handler.get(this, prop, proxy);\n    } : function (prop) {\n      throwRevoked('get');\n      return this[prop];\n    };\n    var setter = handler.set ? function (prop, value) {\n      throwRevoked('set');\n      var status = handler.set(this, prop, value, proxy); // TODO(samthor): If the calling code is in strict mode, throw TypeError.\n      // if (!status) {\n      // It's (sometimes) possible to work this out, if this code isn't strict- try to load the\n      // callee, and if it's available, that code is non-strict. However, this isn't exhaustive.\n      // }\n    } : function (prop, value) {\n      throwRevoked('set');\n      this[prop] = value;\n    }; // Clone direct properties (i.e., not part of a prototype).\n\n    var propertyNames = $Object.getOwnPropertyNames(target);\n    var propertyMap = {};\n    propertyNames.forEach(function (prop) {\n      if ((isMethod || isArray) && prop in proxy) {\n        return; // ignore properties already here, e.g. 'bind', 'prototype' etc\n      }\n\n      var real = $Object.getOwnPropertyDescriptor(target, prop);\n      var desc = {\n        enumerable: Boolean(real.enumerable),\n        get: getter.bind(target, prop),\n        set: setter.bind(target, prop)\n      };\n      $Object.defineProperty(proxy, prop, desc);\n      propertyMap[prop] = true;\n    }); // Set the prototype, or clone all prototype methods (always required if a getter is provided).\n    // TODO(samthor): We don't allow prototype methods to be set. It's (even more) awkward.\n    // An alternative here would be to _just_ clone methods to keep behavior consistent.\n\n    var prototypeOk = true;\n\n    if (isMethod || isArray) {\n      // Arrays and methods are special: above, we instantiate boring versions of these then swap\n      // our their prototype later. So we only need to use setPrototypeOf in these cases. Some old\n      // engines support `Object.getPrototypeOf` but not `Object.setPrototypeOf`.\n      var setProto = $Object.setPrototypeOf || ([].__proto__ === Array.prototype ? function setPrototypeOf(O, proto) {\n        validateProto(proto);\n        O.__proto__ = proto;\n        return O;\n      } : noop);\n\n      if (!(proto && setProto(proxy, proto))) {\n        prototypeOk = false;\n      }\n    }\n\n    if (handler.get || !prototypeOk) {\n      for (var _k in target) {\n        if (propertyMap[_k]) {\n          continue;\n        }\n\n        $Object.defineProperty(proxy, _k, {\n          get: getter.bind(target, _k)\n        });\n      }\n    } // The Proxy polyfill cannot handle adding new properties. Seal the target and proxy.\n\n\n    $Object.seal(target);\n    $Object.seal(proxy);\n    return proxy; // nb. if isMethod is true, proxy != this\n  };\n\n  _ProxyPolyfill.revocable = function (target, handler) {\n    var p = new _ProxyPolyfill(target, handler);\n    return {\n      'proxy': p,\n      'revoke': lastRevokeFn\n    };\n  };\n\n  return _ProxyPolyfill;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/proxy-polyfill/src/proxy.js\n");

/***/ })

}]);