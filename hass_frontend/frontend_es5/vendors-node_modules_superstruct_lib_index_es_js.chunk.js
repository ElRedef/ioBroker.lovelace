"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkhome_assistant_frontend"] = self["webpackChunkhome_assistant_frontend"] || []).push([["vendors-node_modules_superstruct_lib_index_es_js"],{

/***/ "./node_modules/superstruct/lib/index.es.js":
/*!**************************************************!*\
  !*** ./node_modules/superstruct/lib/index.es.js ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Struct\": function() { return /* binding */ Struct; },\n/* harmony export */   \"StructError\": function() { return /* binding */ StructError; },\n/* harmony export */   \"any\": function() { return /* binding */ any; },\n/* harmony export */   \"array\": function() { return /* binding */ array; },\n/* harmony export */   \"assert\": function() { return /* binding */ _assert; },\n/* harmony export */   \"assign\": function() { return /* binding */ assign; },\n/* harmony export */   \"boolean\": function() { return /* binding */ _boolean; },\n/* harmony export */   \"coerce\": function() { return /* binding */ coerce; },\n/* harmony export */   \"create\": function() { return /* binding */ _create; },\n/* harmony export */   \"date\": function() { return /* binding */ date; },\n/* harmony export */   \"defaulted\": function() { return /* binding */ defaulted; },\n/* harmony export */   \"define\": function() { return /* binding */ define; },\n/* harmony export */   \"deprecated\": function() { return /* binding */ deprecated; },\n/* harmony export */   \"dynamic\": function() { return /* binding */ dynamic; },\n/* harmony export */   \"empty\": function() { return /* binding */ empty; },\n/* harmony export */   \"enums\": function() { return /* binding */ enums; },\n/* harmony export */   \"func\": function() { return /* binding */ func; },\n/* harmony export */   \"instance\": function() { return /* binding */ instance; },\n/* harmony export */   \"integer\": function() { return /* binding */ integer; },\n/* harmony export */   \"intersection\": function() { return /* binding */ intersection; },\n/* harmony export */   \"is\": function() { return /* binding */ _is; },\n/* harmony export */   \"lazy\": function() { return /* binding */ lazy; },\n/* harmony export */   \"literal\": function() { return /* binding */ literal; },\n/* harmony export */   \"map\": function() { return /* binding */ map; },\n/* harmony export */   \"mask\": function() { return /* binding */ _mask; },\n/* harmony export */   \"max\": function() { return /* binding */ max; },\n/* harmony export */   \"min\": function() { return /* binding */ min; },\n/* harmony export */   \"never\": function() { return /* binding */ never; },\n/* harmony export */   \"nullable\": function() { return /* binding */ nullable; },\n/* harmony export */   \"number\": function() { return /* binding */ number; },\n/* harmony export */   \"object\": function() { return /* binding */ object; },\n/* harmony export */   \"omit\": function() { return /* binding */ omit; },\n/* harmony export */   \"optional\": function() { return /* binding */ optional; },\n/* harmony export */   \"partial\": function() { return /* binding */ partial; },\n/* harmony export */   \"pattern\": function() { return /* binding */ pattern; },\n/* harmony export */   \"pick\": function() { return /* binding */ pick; },\n/* harmony export */   \"record\": function() { return /* binding */ record; },\n/* harmony export */   \"refine\": function() { return /* binding */ refine; },\n/* harmony export */   \"regexp\": function() { return /* binding */ regexp; },\n/* harmony export */   \"set\": function() { return /* binding */ set; },\n/* harmony export */   \"size\": function() { return /* binding */ size; },\n/* harmony export */   \"string\": function() { return /* binding */ string; },\n/* harmony export */   \"struct\": function() { return /* binding */ struct; },\n/* harmony export */   \"trimmed\": function() { return /* binding */ trimmed; },\n/* harmony export */   \"tuple\": function() { return /* binding */ tuple; },\n/* harmony export */   \"type\": function() { return /* binding */ type; },\n/* harmony export */   \"union\": function() { return /* binding */ union; },\n/* harmony export */   \"unknown\": function() { return /* binding */ unknown; },\n/* harmony export */   \"validate\": function() { return /* binding */ _validate; }\n/* harmony export */ });\nvar _excluded = [\"message\"];\n\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar _marked = /*#__PURE__*/regeneratorRuntime.mark(toFailures),\n    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(run);\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\nvar StructError = /*#__PURE__*/function (_TypeError) {\n  _inherits(StructError, _TypeError);\n\n  var _super = _createSuper(StructError);\n\n  function StructError(failure, failures) {\n    var _this;\n\n    _classCallCheck(this, StructError);\n\n    var cached;\n\n    var message = failure.message,\n        rest = _objectWithoutProperties(failure, _excluded);\n\n    var path = failure.path;\n    var msg = path.length === 0 ? message : \"At path: \" + path.join('.') + \" -- \" + message;\n    _this = _super.call(this, msg);\n    Object.assign(_assertThisInitialized(_this), rest);\n    _this.name = _this.constructor.name;\n\n    _this.failures = function () {\n      var _cached;\n\n      return (_cached = cached) != null ? _cached : cached = [failure].concat(_toConsumableArray(failures()));\n    };\n\n    return _this;\n  }\n\n  return StructError;\n}( /*#__PURE__*/_wrapNativeSuper(TypeError));\n/**\n * Check if a value is an iterator.\n */\n\n\nfunction isIterable(x) {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function';\n}\n/**\n * Check if a value is a plain object.\n */\n\n\nfunction isObject(x) {\n  return _typeof(x) === 'object' && x != null;\n}\n/**\n * Check if a value is a plain object.\n */\n\n\nfunction isPlainObject(x) {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false;\n  }\n\n  var prototype = Object.getPrototypeOf(x);\n  return prototype === null || prototype === Object.prototype;\n}\n/**\n * Return a value as a printable string.\n */\n\n\nfunction print(value) {\n  return typeof value === 'string' ? JSON.stringify(value) : \"\" + value;\n}\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\n\nfunction shiftIterator(input) {\n  var _input$next = input.next(),\n      done = _input$next.done,\n      value = _input$next.value;\n\n  return done ? undefined : value;\n}\n/**\n * Convert a single validation result to a failure.\n */\n\n\nfunction toFailure(result, context, struct, value) {\n  if (result === true) {\n    return;\n  } else if (result === false) {\n    result = {};\n  } else if (typeof result === 'string') {\n    result = {\n      message: result\n    };\n  }\n\n  var path = context.path,\n      branch = context.branch;\n  var type = struct.type;\n  var _result = result,\n      refinement = _result.refinement,\n      _result$message = _result.message,\n      message = _result$message === void 0 ? \"Expected a value of type `\" + type + \"`\" + (refinement ? \" with refinement `\" + refinement + \"`\" : '') + \", but received: `\" + print(value) + \"`\" : _result$message;\n  return Object.assign({\n    value: value,\n    type: type,\n    refinement: refinement,\n    key: path[path.length - 1],\n    path: path,\n    branch: branch\n  }, result, {\n    message: message\n  });\n}\n/**\n * Convert a validation result to an iterable of failures.\n */\n\n\nfunction toFailures(result, context, struct, value) {\n  var _iterator, _step, r, failure;\n\n  return regeneratorRuntime.wrap(function toFailures$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!isIterable(result)) {\n            result = [result];\n          }\n\n          _iterator = _createForOfIteratorHelper(result);\n          _context.prev = 2;\n\n          _iterator.s();\n\n        case 4:\n          if ((_step = _iterator.n()).done) {\n            _context.next = 12;\n            break;\n          }\n\n          r = _step.value;\n          failure = toFailure(r, context, struct, value);\n\n          if (!failure) {\n            _context.next = 10;\n            break;\n          }\n\n          _context.next = 10;\n          return failure;\n\n        case 10:\n          _context.next = 4;\n          break;\n\n        case 12:\n          _context.next = 17;\n          break;\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](2);\n\n          _iterator.e(_context.t0);\n\n        case 17:\n          _context.prev = 17;\n\n          _iterator.f();\n\n          return _context.finish(17);\n\n        case 20:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[2, 14, 17, 20]]);\n}\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\n\nfunction run(value, struct) {\n  var options,\n      _options$path,\n      path,\n      _options$branch,\n      branch,\n      _options$coerce,\n      coerce,\n      _options$mask,\n      mask,\n      ctx,\n      key,\n      valid,\n      _iterator2,\n      _step2,\n      _failure,\n      _iterator3,\n      _step3,\n      _step3$value,\n      k,\n      v,\n      s,\n      ts,\n      _iterator5,\n      _step5,\n      t,\n      _iterator4,\n      _step4,\n      failure,\n      _args2 = arguments;\n\n  return regeneratorRuntime.wrap(function run$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          options = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n          _options$path = options.path, path = _options$path === void 0 ? [] : _options$path, _options$branch = options.branch, branch = _options$branch === void 0 ? [value] : _options$branch, _options$coerce = options.coerce, coerce = _options$coerce === void 0 ? false : _options$coerce, _options$mask = options.mask, mask = _options$mask === void 0 ? false : _options$mask;\n          ctx = {\n            path: path,\n            branch: branch\n          };\n\n          if (coerce) {\n            value = struct.coercer(value, ctx);\n\n            if (mask && struct.type !== 'type' && isObject(struct.schema) && isObject(value) && !Array.isArray(value)) {\n              for (key in value) {\n                if (struct.schema[key] === undefined) {\n                  delete value[key];\n                }\n              }\n            }\n          }\n\n          valid = true;\n          _iterator2 = _createForOfIteratorHelper(struct.validator(value, ctx));\n          _context2.prev = 6;\n\n          _iterator2.s();\n\n        case 8:\n          if ((_step2 = _iterator2.n()).done) {\n            _context2.next = 15;\n            break;\n          }\n\n          _failure = _step2.value;\n          valid = false;\n          _context2.next = 13;\n          return [_failure, undefined];\n\n        case 13:\n          _context2.next = 8;\n          break;\n\n        case 15:\n          _context2.next = 20;\n          break;\n\n        case 17:\n          _context2.prev = 17;\n          _context2.t0 = _context2[\"catch\"](6);\n\n          _iterator2.e(_context2.t0);\n\n        case 20:\n          _context2.prev = 20;\n\n          _iterator2.f();\n\n          return _context2.finish(20);\n\n        case 23:\n          _iterator3 = _createForOfIteratorHelper(struct.entries(value, ctx));\n          _context2.prev = 24;\n\n          _iterator3.s();\n\n        case 26:\n          if ((_step3 = _iterator3.n()).done) {\n            _context2.next = 53;\n            break;\n          }\n\n          _step3$value = _slicedToArray(_step3.value, 3), k = _step3$value[0], v = _step3$value[1], s = _step3$value[2];\n          ts = run(v, s, {\n            path: k === undefined ? path : [].concat(_toConsumableArray(path), [k]),\n            branch: k === undefined ? branch : [].concat(_toConsumableArray(branch), [v]),\n            coerce: coerce,\n            mask: mask\n          });\n          _iterator5 = _createForOfIteratorHelper(ts);\n          _context2.prev = 30;\n\n          _iterator5.s();\n\n        case 32:\n          if ((_step5 = _iterator5.n()).done) {\n            _context2.next = 43;\n            break;\n          }\n\n          t = _step5.value;\n\n          if (!t[0]) {\n            _context2.next = 40;\n            break;\n          }\n\n          valid = false;\n          _context2.next = 38;\n          return [t[0], undefined];\n\n        case 38:\n          _context2.next = 41;\n          break;\n\n        case 40:\n          if (coerce) {\n            v = t[1];\n\n            if (k === undefined) {\n              value = v;\n            } else if (value instanceof Map) {\n              value.set(k, v);\n            } else if (value instanceof Set) {\n              value.add(v);\n            } else if (isObject(value)) {\n              value[k] = v;\n            }\n          }\n\n        case 41:\n          _context2.next = 32;\n          break;\n\n        case 43:\n          _context2.next = 48;\n          break;\n\n        case 45:\n          _context2.prev = 45;\n          _context2.t1 = _context2[\"catch\"](30);\n\n          _iterator5.e(_context2.t1);\n\n        case 48:\n          _context2.prev = 48;\n\n          _iterator5.f();\n\n          return _context2.finish(48);\n\n        case 51:\n          _context2.next = 26;\n          break;\n\n        case 53:\n          _context2.next = 58;\n          break;\n\n        case 55:\n          _context2.prev = 55;\n          _context2.t2 = _context2[\"catch\"](24);\n\n          _iterator3.e(_context2.t2);\n\n        case 58:\n          _context2.prev = 58;\n\n          _iterator3.f();\n\n          return _context2.finish(58);\n\n        case 61:\n          if (!valid) {\n            _context2.next = 80;\n            break;\n          }\n\n          _iterator4 = _createForOfIteratorHelper(struct.refiner(value, ctx));\n          _context2.prev = 63;\n\n          _iterator4.s();\n\n        case 65:\n          if ((_step4 = _iterator4.n()).done) {\n            _context2.next = 72;\n            break;\n          }\n\n          failure = _step4.value;\n          valid = false;\n          _context2.next = 70;\n          return [failure, undefined];\n\n        case 70:\n          _context2.next = 65;\n          break;\n\n        case 72:\n          _context2.next = 77;\n          break;\n\n        case 74:\n          _context2.prev = 74;\n          _context2.t3 = _context2[\"catch\"](63);\n\n          _iterator4.e(_context2.t3);\n\n        case 77:\n          _context2.prev = 77;\n\n          _iterator4.f();\n\n          return _context2.finish(77);\n\n        case 80:\n          if (!valid) {\n            _context2.next = 83;\n            break;\n          }\n\n          _context2.next = 83;\n          return [undefined, value];\n\n        case 83:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[6, 17, 20, 23], [24, 55, 58, 61], [30, 45, 48, 51], [63, 74, 77, 80]]);\n}\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\n\nvar Struct = /*#__PURE__*/function () {\n  function Struct(props) {\n    var _this2 = this;\n\n    _classCallCheck(this, Struct);\n\n    var type = props.type,\n        schema = props.schema,\n        validator = props.validator,\n        refiner = props.refiner,\n        _props$coercer = props.coercer,\n        coercer = _props$coercer === void 0 ? function (value) {\n      return value;\n    } : _props$coercer,\n        _props$entries = props.entries,\n        entries = _props$entries === void 0 ? /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee);\n    }) : _props$entries;\n    this.type = type;\n    this.schema = schema;\n    this.entries = entries;\n    this.coercer = coercer;\n\n    if (validator) {\n      this.validator = function (value, context) {\n        var result = validator(value, context);\n        return toFailures(result, context, _this2, value);\n      };\n    } else {\n      this.validator = function () {\n        return [];\n      };\n    }\n\n    if (refiner) {\n      this.refiner = function (value, context) {\n        var result = refiner(value, context);\n        return toFailures(result, context, _this2, value);\n      };\n    } else {\n      this.refiner = function () {\n        return [];\n      };\n    }\n  }\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n\n  _createClass(Struct, [{\n    key: \"assert\",\n    value: function assert(value) {\n      return _assert(value, this);\n    }\n    /**\n     * Create a value with the struct's coercion logic, then validate it.\n     */\n\n  }, {\n    key: \"create\",\n    value: function create(value) {\n      return _create(value, this);\n    }\n    /**\n     * Check if a value passes the struct's validation.\n     */\n\n  }, {\n    key: \"is\",\n    value: function is(value) {\n      return _is(value, this);\n    }\n    /**\n     * Mask a value, coercing and validating it, but returning only the subset of\n     * properties defined by the struct's schema.\n     */\n\n  }, {\n    key: \"mask\",\n    value: function mask(value) {\n      return _mask(value, this);\n    }\n    /**\n     * Validate a value with the struct's validation logic, returning a tuple\n     * representing the result.\n     *\n     * You may optionally pass `true` for the `withCoercion` argument to coerce\n     * the value before attempting to validate it. If you do, the result will\n     * contain the coerced result when successful.\n     */\n\n  }, {\n    key: \"validate\",\n    value: function validate(value) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return _validate(value, this, options);\n    }\n  }]);\n\n  return Struct;\n}();\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\n\nfunction _assert(value, struct) {\n  var result = _validate(value, struct);\n\n  if (result[0]) {\n    throw result[0];\n  }\n}\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\n\nfunction _create(value, struct) {\n  var result = _validate(value, struct, {\n    coerce: true\n  });\n\n  if (result[0]) {\n    throw result[0];\n  } else {\n    return result[1];\n  }\n}\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\n\nfunction _mask(value, struct) {\n  var result = _validate(value, struct, {\n    coerce: true,\n    mask: true\n  });\n\n  if (result[0]) {\n    throw result[0];\n  } else {\n    return result[1];\n  }\n}\n/**\n * Check if a value passes a struct.\n */\n\n\nfunction _is(value, struct) {\n  var result = _validate(value, struct);\n\n  return !result[0];\n}\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\n\nfunction _validate(value, struct) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var tuples = run(value, struct, options);\n  var tuple = shiftIterator(tuples);\n\n  if (tuple[0]) {\n    var error = new StructError(tuple[0], /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      var _iterator6, _step6, t;\n\n      return regeneratorRuntime.wrap(function _callee2$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _iterator6 = _createForOfIteratorHelper(tuples);\n              _context4.prev = 1;\n\n              _iterator6.s();\n\n            case 3:\n              if ((_step6 = _iterator6.n()).done) {\n                _context4.next = 10;\n                break;\n              }\n\n              t = _step6.value;\n\n              if (!t[0]) {\n                _context4.next = 8;\n                break;\n              }\n\n              _context4.next = 8;\n              return t[0];\n\n            case 8:\n              _context4.next = 3;\n              break;\n\n            case 10:\n              _context4.next = 15;\n              break;\n\n            case 12:\n              _context4.prev = 12;\n              _context4.t0 = _context4[\"catch\"](1);\n\n              _iterator6.e(_context4.t0);\n\n            case 15:\n              _context4.prev = 15;\n\n              _iterator6.f();\n\n              return _context4.finish(15);\n\n            case 18:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee2, null, [[1, 12, 15, 18]]);\n    }));\n    return [error, undefined];\n  } else {\n    var v = tuple[1];\n    return [undefined, v];\n  }\n}\n\nfunction assign() {\n  for (var _len = arguments.length, Structs = new Array(_len), _key = 0; _key < _len; _key++) {\n    Structs[_key] = arguments[_key];\n  }\n\n  var isType = Structs[0].type === 'type';\n  var schemas = Structs.map(function (s) {\n    return s.schema;\n  });\n  var schema = Object.assign.apply(Object, [{}].concat(_toConsumableArray(schemas)));\n  return isType ? type(schema) : object(schema);\n}\n/**\n * Define a new struct type with a custom validation function.\n */\n\n\nfunction define(name, validator) {\n  return new Struct({\n    type: name,\n    schema: null,\n    validator: validator\n  });\n}\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\n\nfunction deprecated(struct, log) {\n  return new Struct(Object.assign({}, struct, {\n    refiner: function refiner(value, ctx) {\n      return value === undefined || struct.refiner(value, ctx);\n    },\n    validator: function validator(value, ctx) {\n      if (value === undefined) {\n        return true;\n      } else {\n        log(value, ctx);\n        return struct.validator(value, ctx);\n      }\n    }\n  }));\n}\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\n\nfunction dynamic(fn) {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    entries: /*#__PURE__*/regeneratorRuntime.mark(function entries(value, ctx) {\n      var struct;\n      return regeneratorRuntime.wrap(function entries$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              struct = fn(value, ctx);\n              return _context5.delegateYield(struct.entries(value, ctx), \"t0\", 2);\n\n            case 2:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, entries);\n    }),\n    validator: function validator(value, ctx) {\n      var struct = fn(value, ctx);\n      return struct.validator(value, ctx);\n    },\n    coercer: function coercer(value, ctx) {\n      var struct = fn(value, ctx);\n      return struct.coercer(value, ctx);\n    }\n  });\n}\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\n\nfunction lazy(fn) {\n  var struct;\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    entries: /*#__PURE__*/regeneratorRuntime.mark(function entries(value, ctx) {\n      var _struct;\n\n      return regeneratorRuntime.wrap(function entries$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              (_struct = struct) != null ? _struct : struct = fn();\n              return _context6.delegateYield(struct.entries(value, ctx), \"t0\", 2);\n\n            case 2:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, entries);\n    }),\n    validator: function validator(value, ctx) {\n      var _struct2;\n\n      (_struct2 = struct) != null ? _struct2 : struct = fn();\n      return struct.validator(value, ctx);\n    },\n    coercer: function coercer(value, ctx) {\n      var _struct3;\n\n      (_struct3 = struct) != null ? _struct3 : struct = fn();\n      return struct.coercer(value, ctx);\n    }\n  });\n}\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\n\nfunction omit(struct, keys) {\n  var schema = struct.schema;\n  var subschema = Object.assign({}, schema);\n\n  var _iterator7 = _createForOfIteratorHelper(keys),\n      _step7;\n\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var key = _step7.value;\n      delete subschema[key];\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n\n  return object(subschema);\n}\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\n\nfunction partial(struct) {\n  var schema = struct instanceof Struct ? Object.assign({}, struct.schema) : Object.assign({}, struct);\n\n  for (var key in schema) {\n    schema[key] = optional(schema[key]);\n  }\n\n  return object(schema);\n}\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\n\nfunction pick(struct, keys) {\n  var schema = struct.schema;\n  var subschema = {};\n\n  var _iterator8 = _createForOfIteratorHelper(keys),\n      _step8;\n\n  try {\n    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n      var key = _step8.value;\n      subschema[key] = schema[key];\n    }\n  } catch (err) {\n    _iterator8.e(err);\n  } finally {\n    _iterator8.f();\n  }\n\n  return object(subschema);\n}\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\n\nfunction struct(name, validator) {\n  console.warn('superstruct@0.11 - The `struct` helper has been renamed to `define`.');\n  return define(name, validator);\n}\n/**\n * Ensure that any value passes validation.\n */\n\n\nfunction any() {\n  return define('any', function () {\n    return true;\n  });\n}\n\nfunction array(Element) {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    entries: /*#__PURE__*/regeneratorRuntime.mark(function entries(value) {\n      var _iterator9, _step9, _step9$value, i, v;\n\n      return regeneratorRuntime.wrap(function entries$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              if (!(Element && Array.isArray(value))) {\n                _context7.next = 18;\n                break;\n              }\n\n              _iterator9 = _createForOfIteratorHelper(value.entries());\n              _context7.prev = 2;\n\n              _iterator9.s();\n\n            case 4:\n              if ((_step9 = _iterator9.n()).done) {\n                _context7.next = 10;\n                break;\n              }\n\n              _step9$value = _slicedToArray(_step9.value, 2), i = _step9$value[0], v = _step9$value[1];\n              _context7.next = 8;\n              return [i, v, Element];\n\n            case 8:\n              _context7.next = 4;\n              break;\n\n            case 10:\n              _context7.next = 15;\n              break;\n\n            case 12:\n              _context7.prev = 12;\n              _context7.t0 = _context7[\"catch\"](2);\n\n              _iterator9.e(_context7.t0);\n\n            case 15:\n              _context7.prev = 15;\n\n              _iterator9.f();\n\n              return _context7.finish(15);\n\n            case 18:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, entries, null, [[2, 12, 15, 18]]);\n    }),\n    coercer: function coercer(value) {\n      return Array.isArray(value) ? value.slice() : value;\n    },\n    validator: function validator(value) {\n      return Array.isArray(value) || \"Expected an array value, but received: \" + print(value);\n    }\n  });\n}\n/**\n * Ensure that a value is a boolean.\n */\n\n\nfunction _boolean() {\n  return define('boolean', function (value) {\n    return typeof value === 'boolean';\n  });\n}\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\n\nfunction date() {\n  return define('date', function (value) {\n    return value instanceof Date && !isNaN(value.getTime()) || \"Expected a valid `Date` object, but received: \" + print(value);\n  });\n}\n\nfunction enums(values) {\n  var schema = {};\n  var description = values.map(function (v) {\n    return print(v);\n  }).join();\n\n  var _iterator10 = _createForOfIteratorHelper(values),\n      _step10;\n\n  try {\n    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n      var key = _step10.value;\n      schema[key] = key;\n    }\n  } catch (err) {\n    _iterator10.e(err);\n  } finally {\n    _iterator10.f();\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema: schema,\n    validator: function validator(value) {\n      return values.includes(value) || \"Expected one of `\" + description + \"`, but received: \" + print(value);\n    }\n  });\n}\n/**\n * Ensure that a value is a function.\n */\n\n\nfunction func() {\n  return define('func', function (value) {\n    return typeof value === 'function' || \"Expected a function, but received: \" + print(value);\n  });\n}\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\n\nfunction instance(Class) {\n  return define('instance', function (value) {\n    return value instanceof Class || \"Expected a `\" + Class.name + \"` instance, but received: \" + print(value);\n  });\n}\n/**\n * Ensure that a value is an integer.\n */\n\n\nfunction integer() {\n  return define('integer', function (value) {\n    return typeof value === 'number' && !isNaN(value) && Number.isInteger(value) || \"Expected an integer, but received: \" + print(value);\n  });\n}\n\nfunction intersection(Structs) {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    entries: /*#__PURE__*/regeneratorRuntime.mark(function entries(value, ctx) {\n      var _iterator11, _step11, S;\n\n      return regeneratorRuntime.wrap(function entries$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _iterator11 = _createForOfIteratorHelper(Structs);\n              _context8.prev = 1;\n\n              _iterator11.s();\n\n            case 3:\n              if ((_step11 = _iterator11.n()).done) {\n                _context8.next = 8;\n                break;\n              }\n\n              S = _step11.value;\n              return _context8.delegateYield(S.entries(value, ctx), \"t0\", 6);\n\n            case 6:\n              _context8.next = 3;\n              break;\n\n            case 8:\n              _context8.next = 13;\n              break;\n\n            case 10:\n              _context8.prev = 10;\n              _context8.t1 = _context8[\"catch\"](1);\n\n              _iterator11.e(_context8.t1);\n\n            case 13:\n              _context8.prev = 13;\n\n              _iterator11.f();\n\n              return _context8.finish(13);\n\n            case 16:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, entries, null, [[1, 10, 13, 16]]);\n    }),\n    validator: /*#__PURE__*/regeneratorRuntime.mark(function validator(value, ctx) {\n      var _iterator12, _step12, S;\n\n      return regeneratorRuntime.wrap(function validator$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _iterator12 = _createForOfIteratorHelper(Structs);\n              _context9.prev = 1;\n\n              _iterator12.s();\n\n            case 3:\n              if ((_step12 = _iterator12.n()).done) {\n                _context9.next = 8;\n                break;\n              }\n\n              S = _step12.value;\n              return _context9.delegateYield(S.validator(value, ctx), \"t0\", 6);\n\n            case 6:\n              _context9.next = 3;\n              break;\n\n            case 8:\n              _context9.next = 13;\n              break;\n\n            case 10:\n              _context9.prev = 10;\n              _context9.t1 = _context9[\"catch\"](1);\n\n              _iterator12.e(_context9.t1);\n\n            case 13:\n              _context9.prev = 13;\n\n              _iterator12.f();\n\n              return _context9.finish(13);\n\n            case 16:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, validator, null, [[1, 10, 13, 16]]);\n    }),\n    refiner: /*#__PURE__*/regeneratorRuntime.mark(function refiner(value, ctx) {\n      var _iterator13, _step13, S;\n\n      return regeneratorRuntime.wrap(function refiner$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _iterator13 = _createForOfIteratorHelper(Structs);\n              _context10.prev = 1;\n\n              _iterator13.s();\n\n            case 3:\n              if ((_step13 = _iterator13.n()).done) {\n                _context10.next = 8;\n                break;\n              }\n\n              S = _step13.value;\n              return _context10.delegateYield(S.refiner(value, ctx), \"t0\", 6);\n\n            case 6:\n              _context10.next = 3;\n              break;\n\n            case 8:\n              _context10.next = 13;\n              break;\n\n            case 10:\n              _context10.prev = 10;\n              _context10.t1 = _context10[\"catch\"](1);\n\n              _iterator13.e(_context10.t1);\n\n            case 13:\n              _context10.prev = 13;\n\n              _iterator13.f();\n\n              return _context10.finish(13);\n\n            case 16:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, refiner, null, [[1, 10, 13, 16]]);\n    })\n  });\n}\n\nfunction literal(constant) {\n  var description = print(constant);\n\n  var t = _typeof(constant);\n\n  return new Struct({\n    type: 'literal',\n    schema: t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator: function validator(value) {\n      return value === constant || \"Expected the literal `\" + description + \"`, but received: \" + print(value);\n    }\n  });\n}\n\nfunction map(Key, Value) {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    entries: /*#__PURE__*/regeneratorRuntime.mark(function entries(value) {\n      var _iterator14, _step14, _step14$value, k, v;\n\n      return regeneratorRuntime.wrap(function entries$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              if (!(Key && Value && value instanceof Map)) {\n                _context11.next = 20;\n                break;\n              }\n\n              _iterator14 = _createForOfIteratorHelper(value.entries());\n              _context11.prev = 2;\n\n              _iterator14.s();\n\n            case 4:\n              if ((_step14 = _iterator14.n()).done) {\n                _context11.next = 12;\n                break;\n              }\n\n              _step14$value = _slicedToArray(_step14.value, 2), k = _step14$value[0], v = _step14$value[1];\n              _context11.next = 8;\n              return [k, k, Key];\n\n            case 8:\n              _context11.next = 10;\n              return [k, v, Value];\n\n            case 10:\n              _context11.next = 4;\n              break;\n\n            case 12:\n              _context11.next = 17;\n              break;\n\n            case 14:\n              _context11.prev = 14;\n              _context11.t0 = _context11[\"catch\"](2);\n\n              _iterator14.e(_context11.t0);\n\n            case 17:\n              _context11.prev = 17;\n\n              _iterator14.f();\n\n              return _context11.finish(17);\n\n            case 20:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, entries, null, [[2, 14, 17, 20]]);\n    }),\n    coercer: function coercer(value) {\n      return value instanceof Map ? new Map(value) : value;\n    },\n    validator: function validator(value) {\n      return value instanceof Map || \"Expected a `Map` object, but received: \" + print(value);\n    }\n  });\n}\n/**\n * Ensure that no value ever passes validation.\n */\n\n\nfunction never() {\n  return define('never', function () {\n    return false;\n  });\n}\n/**\n * Augment an existing struct to allow `null` values.\n */\n\n\nfunction nullable(struct) {\n  return new Struct(Object.assign({}, struct, {\n    validator: function validator(value, ctx) {\n      return value === null || struct.validator(value, ctx);\n    },\n    refiner: function refiner(value, ctx) {\n      return value === null || struct.refiner(value, ctx);\n    }\n  }));\n}\n/**\n * Ensure that a value is a number.\n */\n\n\nfunction number() {\n  return define('number', function (value) {\n    return typeof value === 'number' && !isNaN(value) || \"Expected a number, but received: \" + print(value);\n  });\n}\n\nfunction object(schema) {\n  var knowns = schema ? Object.keys(schema) : [];\n  var Never = never();\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    entries: /*#__PURE__*/regeneratorRuntime.mark(function entries(value) {\n      var unknowns, _iterator15, _step15, key, _iterator16, _step16, _key2;\n\n      return regeneratorRuntime.wrap(function entries$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              if (!(schema && isObject(value))) {\n                _context12.next = 37;\n                break;\n              }\n\n              unknowns = new Set(Object.keys(value));\n              _iterator15 = _createForOfIteratorHelper(knowns);\n              _context12.prev = 3;\n\n              _iterator15.s();\n\n            case 5:\n              if ((_step15 = _iterator15.n()).done) {\n                _context12.next = 12;\n                break;\n              }\n\n              key = _step15.value;\n              unknowns[\"delete\"](key);\n              _context12.next = 10;\n              return [key, value[key], schema[key]];\n\n            case 10:\n              _context12.next = 5;\n              break;\n\n            case 12:\n              _context12.next = 17;\n              break;\n\n            case 14:\n              _context12.prev = 14;\n              _context12.t0 = _context12[\"catch\"](3);\n\n              _iterator15.e(_context12.t0);\n\n            case 17:\n              _context12.prev = 17;\n\n              _iterator15.f();\n\n              return _context12.finish(17);\n\n            case 20:\n              _iterator16 = _createForOfIteratorHelper(unknowns);\n              _context12.prev = 21;\n\n              _iterator16.s();\n\n            case 23:\n              if ((_step16 = _iterator16.n()).done) {\n                _context12.next = 29;\n                break;\n              }\n\n              _key2 = _step16.value;\n              _context12.next = 27;\n              return [_key2, value[_key2], Never];\n\n            case 27:\n              _context12.next = 23;\n              break;\n\n            case 29:\n              _context12.next = 34;\n              break;\n\n            case 31:\n              _context12.prev = 31;\n              _context12.t1 = _context12[\"catch\"](21);\n\n              _iterator16.e(_context12.t1);\n\n            case 34:\n              _context12.prev = 34;\n\n              _iterator16.f();\n\n              return _context12.finish(34);\n\n            case 37:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, entries, null, [[3, 14, 17, 20], [21, 31, 34, 37]]);\n    }),\n    validator: function validator(value) {\n      return isObject(value) || \"Expected an object, but received: \" + print(value);\n    },\n    coercer: function coercer(value) {\n      return isObject(value) ? Object.assign({}, value) : value;\n    }\n  });\n}\n/**\n * Augment a struct to allow `undefined` values.\n */\n\n\nfunction optional(struct) {\n  return new Struct(Object.assign({}, struct, {\n    validator: function validator(value, ctx) {\n      return value === undefined || struct.validator(value, ctx);\n    },\n    refiner: function refiner(value, ctx) {\n      return value === undefined || struct.refiner(value, ctx);\n    }\n  }));\n}\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\n\nfunction record(Key, Value) {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    entries: /*#__PURE__*/regeneratorRuntime.mark(function entries(value) {\n      var k, v;\n      return regeneratorRuntime.wrap(function entries$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              if (!isObject(value)) {\n                _context13.next = 11;\n                break;\n              }\n\n              _context13.t0 = regeneratorRuntime.keys(value);\n\n            case 2:\n              if ((_context13.t1 = _context13.t0()).done) {\n                _context13.next = 11;\n                break;\n              }\n\n              k = _context13.t1.value;\n              v = value[k];\n              _context13.next = 7;\n              return [k, k, Key];\n\n            case 7:\n              _context13.next = 9;\n              return [k, v, Value];\n\n            case 9:\n              _context13.next = 2;\n              break;\n\n            case 11:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, entries);\n    }),\n    validator: function validator(value) {\n      return isObject(value) || \"Expected an object, but received: \" + print(value);\n    }\n  });\n}\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\n\nfunction regexp() {\n  return define('regexp', function (value) {\n    return value instanceof RegExp;\n  });\n}\n\nfunction set(Element) {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    entries: /*#__PURE__*/regeneratorRuntime.mark(function entries(value) {\n      var _iterator17, _step17, v;\n\n      return regeneratorRuntime.wrap(function entries$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              if (!(Element && value instanceof Set)) {\n                _context14.next = 18;\n                break;\n              }\n\n              _iterator17 = _createForOfIteratorHelper(value);\n              _context14.prev = 2;\n\n              _iterator17.s();\n\n            case 4:\n              if ((_step17 = _iterator17.n()).done) {\n                _context14.next = 10;\n                break;\n              }\n\n              v = _step17.value;\n              _context14.next = 8;\n              return [v, v, Element];\n\n            case 8:\n              _context14.next = 4;\n              break;\n\n            case 10:\n              _context14.next = 15;\n              break;\n\n            case 12:\n              _context14.prev = 12;\n              _context14.t0 = _context14[\"catch\"](2);\n\n              _iterator17.e(_context14.t0);\n\n            case 15:\n              _context14.prev = 15;\n\n              _iterator17.f();\n\n              return _context14.finish(15);\n\n            case 18:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, entries, null, [[2, 12, 15, 18]]);\n    }),\n    coercer: function coercer(value) {\n      return value instanceof Set ? new Set(value) : value;\n    },\n    validator: function validator(value) {\n      return value instanceof Set || \"Expected a `Set` object, but received: \" + print(value);\n    }\n  });\n}\n/**\n * Ensure that a value is a string.\n */\n\n\nfunction string() {\n  return define('string', function (value) {\n    return typeof value === 'string' || \"Expected a string, but received: \" + print(value);\n  });\n}\n\nfunction tuple(Elements) {\n  var Never = never();\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    entries: /*#__PURE__*/regeneratorRuntime.mark(function entries(value) {\n      var length, i;\n      return regeneratorRuntime.wrap(function entries$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              if (!Array.isArray(value)) {\n                _context15.next = 9;\n                break;\n              }\n\n              length = Math.max(Elements.length, value.length);\n              i = 0;\n\n            case 3:\n              if (!(i < length)) {\n                _context15.next = 9;\n                break;\n              }\n\n              _context15.next = 6;\n              return [i, value[i], Elements[i] || Never];\n\n            case 6:\n              i++;\n              _context15.next = 3;\n              break;\n\n            case 9:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, entries);\n    }),\n    validator: function validator(value) {\n      return Array.isArray(value) || \"Expected an array, but received: \" + print(value);\n    }\n  });\n}\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\n\nfunction type(schema) {\n  var keys = Object.keys(schema);\n  return new Struct({\n    type: 'type',\n    schema: schema,\n    entries: /*#__PURE__*/regeneratorRuntime.mark(function entries(value) {\n      var _iterator18, _step18, k;\n\n      return regeneratorRuntime.wrap(function entries$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              if (!isObject(value)) {\n                _context16.next = 18;\n                break;\n              }\n\n              _iterator18 = _createForOfIteratorHelper(keys);\n              _context16.prev = 2;\n\n              _iterator18.s();\n\n            case 4:\n              if ((_step18 = _iterator18.n()).done) {\n                _context16.next = 10;\n                break;\n              }\n\n              k = _step18.value;\n              _context16.next = 8;\n              return [k, value[k], schema[k]];\n\n            case 8:\n              _context16.next = 4;\n              break;\n\n            case 10:\n              _context16.next = 15;\n              break;\n\n            case 12:\n              _context16.prev = 12;\n              _context16.t0 = _context16[\"catch\"](2);\n\n              _iterator18.e(_context16.t0);\n\n            case 15:\n              _context16.prev = 15;\n\n              _iterator18.f();\n\n              return _context16.finish(15);\n\n            case 18:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, entries, null, [[2, 12, 15, 18]]);\n    }),\n    validator: function validator(value) {\n      return isObject(value) || \"Expected an object, but received: \" + print(value);\n    }\n  });\n}\n\nfunction union(Structs) {\n  var description = Structs.map(function (s) {\n    return s.type;\n  }).join(' | ');\n  return new Struct({\n    type: 'union',\n    schema: null,\n    coercer: function coercer(value, ctx) {\n      var firstMatch = Structs.find(function (s) {\n        var _s$validate = s.validate(value, {\n          coerce: true\n        }),\n            _s$validate2 = _slicedToArray(_s$validate, 1),\n            e = _s$validate2[0];\n\n        return !e;\n      }) || unknown();\n      return firstMatch.coercer(value, ctx);\n    },\n    validator: function validator(value, ctx) {\n      var failures = [];\n\n      var _iterator19 = _createForOfIteratorHelper(Structs),\n          _step19;\n\n      try {\n        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n          var S = _step19.value;\n\n          var _run = run(value, S, ctx),\n              _run2 = _toArray(_run),\n              tuples = _run2.slice(0);\n\n          var _tuples = _slicedToArray(tuples, 1),\n              first = _tuples[0];\n\n          if (!first[0]) {\n            return [];\n          } else {\n            var _iterator20 = _createForOfIteratorHelper(tuples),\n                _step20;\n\n            try {\n              for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n                var _step20$value = _slicedToArray(_step20.value, 1),\n                    failure = _step20$value[0];\n\n                if (failure) {\n                  failures.push(failure);\n                }\n              }\n            } catch (err) {\n              _iterator20.e(err);\n            } finally {\n              _iterator20.f();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator19.e(err);\n      } finally {\n        _iterator19.f();\n      }\n\n      return [\"Expected the value to satisfy a union of `\" + description + \"`, but received: \" + print(value)].concat(failures);\n    }\n  });\n}\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\n\nfunction unknown() {\n  return define('unknown', function () {\n    return true;\n  });\n}\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\n\nfunction coerce(struct, condition, _coercer) {\n  return new Struct(Object.assign({}, struct, {\n    coercer: function coercer(value, ctx) {\n      return _is(value, condition) ? struct.coercer(_coercer(value, ctx), ctx) : struct.coercer(value, ctx);\n    }\n  }));\n}\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\n\nfunction defaulted(struct, fallback) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return coerce(struct, unknown(), function (x) {\n    var f = typeof fallback === 'function' ? fallback() : fallback;\n\n    if (x === undefined) {\n      return f;\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      var ret = Object.assign({}, x);\n      var changed = false;\n\n      for (var key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key];\n          changed = true;\n        }\n      }\n\n      if (changed) {\n        return ret;\n      }\n    }\n\n    return x;\n  });\n}\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\n\nfunction trimmed(struct) {\n  return coerce(struct, string(), function (x) {\n    return x.trim();\n  });\n}\n/**\n * Ensure that a string, array, map, or set is empty.\n */\n\n\nfunction empty(struct) {\n  var expected = \"Expected an empty \" + struct.type;\n  return refine(struct, 'empty', function (value) {\n    if (value instanceof Map || value instanceof Set) {\n      var _size = value.size;\n      return _size === 0 || expected + \" but received one with a size of `\" + _size + \"`\";\n    } else {\n      var length = value.length;\n      return length === 0 || expected + \" but received one with a length of `\" + length + \"`\";\n    }\n  });\n}\n/**\n * Ensure that a number or date is below a threshold.\n */\n\n\nfunction max(struct, threshold) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var exclusive = options.exclusive;\n  return refine(struct, 'max', function (value) {\n    return exclusive ? value < threshold : value <= threshold || \"Expected a \" + struct.type + \" less than \" + (exclusive ? '' : 'or equal to ') + threshold + \" but received `\" + value + \"`\";\n  });\n}\n/**\n * Ensure that a number or date is above a threshold.\n */\n\n\nfunction min(struct, threshold) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var exclusive = options.exclusive;\n  return refine(struct, 'min', function (value) {\n    return exclusive ? value > threshold : value >= threshold || \"Expected a \" + struct.type + \" greater than \" + (exclusive ? '' : 'or equal to ') + threshold + \" but received `\" + value + \"`\";\n  });\n}\n/**\n * Ensure that a string matches a regular expression.\n */\n\n\nfunction pattern(struct, regexp) {\n  return refine(struct, 'pattern', function (value) {\n    return regexp.test(value) || \"Expected a \" + struct.type + \" matching `/\" + regexp.source + \"/` but received \\\"\" + value + \"\\\"\";\n  });\n}\n/**\n * Ensure that a string, array, number, date, map, or set has a size (or length, or time) between `min` and `max`.\n */\n\n\nfunction size(struct, min) {\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : min;\n  var expected = \"Expected a \" + struct.type;\n  var of = min === max ? \"of `\" + min + \"`\" : \"between `\" + min + \"` and `\" + max + \"`\";\n  return refine(struct, 'size', function (value) {\n    if (typeof value === 'number' || value instanceof Date) {\n      return min <= value && value <= max || expected + \" \" + of + \" but received `\" + value + \"`\";\n    } else if (value instanceof Map || value instanceof Set) {\n      var _size2 = value.size;\n      return min <= _size2 && _size2 <= max || expected + \" with a size \" + of + \" but received one with a size of `\" + _size2 + \"`\";\n    } else {\n      var length = value.length;\n      return min <= length && length <= max || expected + \" with a length \" + of + \" but received one with a length of `\" + length + \"`\";\n    }\n  });\n}\n/**\n * Augment a `Struct` to add an additional refinement to the validation.\n *\n * The refiner function is guaranteed to receive a value of the struct's type,\n * because the struct's existing validation will already have passed. This\n * allows you to layer additional validation on top of existing structs.\n */\n\n\nfunction refine(struct, name, refiner) {\n  return new Struct(Object.assign({}, struct, {\n    refiner: function (_refiner) {\n      var _marked3 = /*#__PURE__*/regeneratorRuntime.mark(refiner);\n\n      function refiner(_x, _x2) {\n        var _args17 = arguments;\n        return regeneratorRuntime.wrap(function refiner$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                return _context17.delegateYield(_refiner.apply(this, _args17), \"t0\", 1);\n\n              case 1:\n                return _context17.abrupt(\"return\", _context17.t0);\n\n              case 2:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _marked3, this);\n      }\n\n      refiner.toString = function () {\n        return _refiner.toString();\n      };\n\n      return refiner;\n    }( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(value, ctx) {\n      var result, failures, _iterator21, _step21, failure;\n\n      return regeneratorRuntime.wrap(function _callee3$(_context18) {\n        while (1) {\n          switch (_context18.prev = _context18.next) {\n            case 0:\n              return _context18.delegateYield(struct.refiner(value, ctx), \"t0\", 1);\n\n            case 1:\n              result = refiner(value, ctx);\n              failures = toFailures(result, ctx, struct, value);\n              _iterator21 = _createForOfIteratorHelper(failures);\n              _context18.prev = 4;\n\n              _iterator21.s();\n\n            case 6:\n              if ((_step21 = _iterator21.n()).done) {\n                _context18.next = 12;\n                break;\n              }\n\n              failure = _step21.value;\n              _context18.next = 10;\n              return Object.assign({}, failure, {\n                refinement: name\n              });\n\n            case 10:\n              _context18.next = 6;\n              break;\n\n            case 12:\n              _context18.next = 17;\n              break;\n\n            case 14:\n              _context18.prev = 14;\n              _context18.t1 = _context18[\"catch\"](4);\n\n              _iterator21.e(_context18.t1);\n\n            case 17:\n              _context18.prev = 17;\n\n              _iterator21.f();\n\n              return _context18.finish(17);\n\n            case 20:\n            case \"end\":\n              return _context18.stop();\n          }\n        }\n      }, _callee3, null, [[4, 14, 17, 20]]);\n    }))\n  }));\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/superstruct/lib/index.es.js\n");

/***/ })

}]);